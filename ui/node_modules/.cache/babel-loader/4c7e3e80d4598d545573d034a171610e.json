{"ast":null,"code":"'use strict';\n\nconst get = require('../get');\n\nmodule.exports = function getKeysInSchemaOrder(schema, val, path) {\n  const schemaKeys = path != null ? Object.keys(get(schema.tree, path, {})) : Object.keys(schema.tree);\n  const valKeys = new Set(Object.keys(val));\n  let keys;\n\n  if (valKeys.size > 1) {\n    keys = new Set();\n\n    for (const key of schemaKeys) {\n      if (valKeys.has(key)) {\n        keys.add(key);\n      }\n    }\n\n    for (const key of valKeys) {\n      if (!keys.has(key)) {\n        keys.add(key);\n      }\n    }\n\n    keys = Array.from(keys);\n  } else {\n    keys = Array.from(valKeys);\n  }\n\n  return keys;\n};","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/helpers/schema/getKeysInSchemaOrder.js"],"names":["get","require","module","exports","getKeysInSchemaOrder","schema","val","path","schemaKeys","Object","keys","tree","valKeys","Set","size","key","has","add","Array","from"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,oBAAT,CAA8BC,MAA9B,EAAsCC,GAAtC,EAA2CC,IAA3C,EAAiD;AAChE,QAAMC,UAAU,GAAGD,IAAI,IAAI,IAAR,GAAeE,MAAM,CAACC,IAAP,CAAYV,GAAG,CAACK,MAAM,CAACM,IAAR,EAAcJ,IAAd,EAAoB,EAApB,CAAf,CAAf,GAAyDE,MAAM,CAACC,IAAP,CAAYL,MAAM,CAACM,IAAnB,CAA5E;AACA,QAAMC,OAAO,GAAG,IAAIC,GAAJ,CAAQJ,MAAM,CAACC,IAAP,CAAYJ,GAAZ,CAAR,CAAhB;AAEA,MAAII,IAAJ;;AACA,MAAIE,OAAO,CAACE,IAAR,GAAe,CAAnB,EAAsB;AACpBJ,IAAAA,IAAI,GAAG,IAAIG,GAAJ,EAAP;;AACA,SAAK,MAAME,GAAX,IAAkBP,UAAlB,EAA8B;AAC5B,UAAII,OAAO,CAACI,GAAR,CAAYD,GAAZ,CAAJ,EAAsB;AACpBL,QAAAA,IAAI,CAACO,GAAL,CAASF,GAAT;AACD;AACF;;AACD,SAAK,MAAMA,GAAX,IAAkBH,OAAlB,EAA2B;AACzB,UAAI,CAACF,IAAI,CAACM,GAAL,CAASD,GAAT,CAAL,EAAoB;AAClBL,QAAAA,IAAI,CAACO,GAAL,CAASF,GAAT;AACD;AACF;;AACDL,IAAAA,IAAI,GAAGQ,KAAK,CAACC,IAAN,CAAWT,IAAX,CAAP;AACD,GAbD,MAaO;AACLA,IAAAA,IAAI,GAAGQ,KAAK,CAACC,IAAN,CAAWP,OAAX,CAAP;AACD;;AAED,SAAOF,IAAP;AACD,CAvBD","sourcesContent":["'use strict';\n\nconst get = require('../get');\n\nmodule.exports = function getKeysInSchemaOrder(schema, val, path) {\n  const schemaKeys = path != null ? Object.keys(get(schema.tree, path, {})) : Object.keys(schema.tree);\n  const valKeys = new Set(Object.keys(val));\n\n  let keys;\n  if (valKeys.size > 1) {\n    keys = new Set();\n    for (const key of schemaKeys) {\n      if (valKeys.has(key)) {\n        keys.add(key);\n      }\n    }\n    for (const key of valKeys) {\n      if (!keys.has(key)) {\n        keys.add(key);\n      }\n    }\n    keys = Array.from(keys);\n  } else {\n    keys = Array.from(valKeys);\n  }\n\n  return keys;\n};"]},"metadata":{},"sourceType":"script"}