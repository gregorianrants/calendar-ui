{"ast":null,"code":"const {\n  get,\n  set\n} = require(\"lodash\");\n\nfunction convertToLodashDotPath(mongooseDotPath) {\n  return mongooseDotPath.replace(/\\d+/g, match => {\n    return `[${match}]`;\n  });\n}\n\nfunction isValidatorError(err) {\n  console.log(\"err\", err);\n  if (err.name === \"ValidatorError\") return true;\n  console.log(\"err\", err);\n  return false;\n}\n\nfunction getValidatorMessage(err) {\n  return err.message;\n}\n\nfunction isCastError(err) {\n  if (err.name === \"CastError\") return true;\n  return false;\n}\n\nfunction getCastMessage(err) {\n  return `should be a ${err.kind}`;\n}\n\nfunction processMongooseError(err) {\n  if (!err) return null;\n  const result = {};\n\n  for (let [key, value] of Object.entries(err.errors)) {\n    const path = convertToLodashDotPath(key);\n    console.log(path);\n    if (isCastError(err)) set(result, path, getCastMessage(value));else if (isValidatorError(err)) {\n      set(result, path, getValidatorMessage(value));\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = {\n  processMongooseError,\n  convertToLodashDotPath\n};","map":{"version":3,"sources":["/home/gregorian/calendar-ui/ui/src/utilities/processMongooseError.js"],"names":["get","set","require","convertToLodashDotPath","mongooseDotPath","replace","match","isValidatorError","err","console","log","name","getValidatorMessage","message","isCastError","getCastMessage","kind","processMongooseError","result","key","value","Object","entries","errors","path","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,GAAF;AAAOC,EAAAA;AAAP,IAAeC,OAAO,CAAC,QAAD,CAA5B;;AAEA,SAASC,sBAAT,CAAgCC,eAAhC,EAAiD;AAC/C,SAAOA,eAAe,CAACC,OAAhB,CAAwB,MAAxB,EAAiCC,KAAD,IAAW;AAChD,WAAQ,IAAGA,KAAM,GAAjB;AACD,GAFM,CAAP;AAGD;;AAED,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB;AACA,MAAIA,GAAG,CAACG,IAAJ,KAAa,gBAAjB,EAAmC,OAAO,IAAP;AACnCF,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB;AACA,SAAO,KAAP;AACD;;AAED,SAASI,mBAAT,CAA6BJ,GAA7B,EAAkC;AAChC,SAAOA,GAAG,CAACK,OAAX;AACD;;AAED,SAASC,WAAT,CAAqBN,GAArB,EAA0B;AACxB,MAAIA,GAAG,CAACG,IAAJ,KAAa,WAAjB,EAA8B,OAAO,IAAP;AAC9B,SAAO,KAAP;AACD;;AAED,SAASI,cAAT,CAAwBP,GAAxB,EAA6B;AAC3B,SAAQ,eAAcA,GAAG,CAACQ,IAAK,EAA/B;AACD;;AAED,SAASC,oBAAT,CAA8BT,GAA9B,EAAmC;AACjC,MAAI,CAACA,GAAL,EAAU,OAAO,IAAP;AACV,QAAMU,MAAM,GAAG,EAAf;;AAEA,OAAK,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAT,IAAyBC,MAAM,CAACC,OAAP,CAAed,GAAG,CAACe,MAAnB,CAAzB,EAAqD;AACnD,UAAMC,IAAI,GAAGrB,sBAAsB,CAACgB,GAAD,CAAnC;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAYc,IAAZ;AACA,QAAIV,WAAW,CAACN,GAAD,CAAf,EAAsBP,GAAG,CAACiB,MAAD,EAASM,IAAT,EAAeT,cAAc,CAACK,KAAD,CAA7B,CAAH,CAAtB,KACK,IAAIb,gBAAgB,CAACC,GAAD,CAApB,EAA2B;AAC9BP,MAAAA,GAAG,CAACiB,MAAD,EAASM,IAAT,EAAeZ,mBAAmB,CAACQ,KAAD,CAAlC,CAAH;AACD;AACF;;AACD,SAAOF,MAAP;AACD;;AAEDO,MAAM,CAACC,OAAP,GAAiB;AAAET,EAAAA,oBAAF;AAAwBd,EAAAA;AAAxB,CAAjB","sourcesContent":["const { get, set } = require(\"lodash\");\n\nfunction convertToLodashDotPath(mongooseDotPath) {\n  return mongooseDotPath.replace(/\\d+/g, (match) => {\n    return `[${match}]`;\n  });\n}\n\nfunction isValidatorError(err) {\n  console.log(\"err\", err);\n  if (err.name === \"ValidatorError\") return true;\n  console.log(\"err\", err);\n  return false;\n}\n\nfunction getValidatorMessage(err) {\n  return err.message;\n}\n\nfunction isCastError(err) {\n  if (err.name === \"CastError\") return true;\n  return false;\n}\n\nfunction getCastMessage(err) {\n  return `should be a ${err.kind}`;\n}\n\nfunction processMongooseError(err) {\n  if (!err) return null;\n  const result = {};\n\n  for (let [key, value] of Object.entries(err.errors)) {\n    const path = convertToLodashDotPath(key);\n    console.log(path);\n    if (isCastError(err)) set(result, path, getCastMessage(value));\n    else if (isValidatorError(err)) {\n      set(result, path, getValidatorMessage(value));\n    }\n  }\n  return result;\n}\n\nmodule.exports = { processMongooseError, convertToLodashDotPath };\n"]},"metadata":{},"sourceType":"module"}