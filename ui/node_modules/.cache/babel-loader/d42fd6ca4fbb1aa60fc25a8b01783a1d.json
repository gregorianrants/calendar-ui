{"ast":null,"code":"const mongoose = require(\"mongoose\");\n\nconst cuid = require(\"cuid\");\n/*const addGcalEvent = require('./../googleCalendar')*/\n\n\nconst setHours = require(\"date-fns/setHours\");\n\nconst addressObj = {\n  _id: {\n    type: String,\n    default: cuid\n  },\n  value: {\n    validate: {\n      validator: v => {\n        return v.length > 4;\n      },\n      message: `name must have more than 4 characters`\n    },\n    type: String\n  }\n};\nconst addressSchema = mongoose.Schema(addressObj);\nconst operativesObj = {\n  _id: {\n    type: String,\n    default: cuid\n  },\n  value: {\n    validate: {\n      validator: v => {\n        return v.length > 4;\n      },\n      message: `name must have more than 4 characters`\n    },\n    type: String\n  }\n};\nconst operativesSchema = mongoose.Schema(op);\nconst chargesObj = {\n  hourlyRate: {\n    type: Number\n  },\n  fuelCharge: {\n    type: Number\n  },\n  travelTime: {\n    type: Number\n  }\n};\nconst customerObj = {\n  name: {\n    type: String,\n    required: true,\n    validate: [{\n      validator: v => {\n        return v.length > 4;\n      },\n      message: `name must have more than 4 characters`\n    } // this validator was used to look at how multiple validators are handled\n    // removing comment will show that only on error is ever returned for a path\n    // {\n    //   validator: (v) => {\n    //     return v[0] === \"A\";\n    //   },\n    //   message: `first letter must be A`,\n    // },\n    ]\n  },\n  mobile: {\n    type: String,\n    validate: [{\n      validator: v => {\n        return v.length > 4;\n      },\n      message: `name must have more than 4 characters`\n    }]\n  },\n  email: {\n    type: String\n  }\n};\nconst jobSchema = new mongoose.Schema({\n  _id: {\n    type: String,\n    default: cuid\n  },\n  start: {\n    type: Date,\n    required: true\n  },\n  end: {\n    type: Date,\n    required: true\n  },\n  customer: mongoose.Schema(customerObj),\n  charges: chargesObj,\n  operatives: [mongoose.Schema(operativesObj)],\n  items: String,\n  addresses: [addressObj]\n});\nlet Job = mongoose.model(\"Job\", jobSchema, \"jobs\");\n\nasync function list({\n  from,\n  to\n}) {\n  let data = await Job.find({\n    start: {\n      $gte: from\n    },\n    end: {\n      $lte: to\n    }\n  });\n  return data;\n}\n\nasync function create(data) {\n  let job = new Job(data);\n  await job.save(); //TODO add some validation start must be before end\n\n  return job;\n}\n\nasync function get(id) {\n  const job = await Job.findById(id);\n  return job;\n}\n\nasync function remove(id) {\n  let data = await Job.deleteOne({\n    _id: id\n  });\n  return data;\n}\n\nasync function edit(_id, change) {\n  const product = await get(_id);\n  Object.keys(change).forEach(function (key) {\n    product[key] = change[key];\n  });\n  await product.save();\n  return product;\n}\n\nasync function resetData(data) {\n  await Job.deleteMany();\n  console.log(data);\n  await Job.insertMany(data);\n}\n\nmodule.exports = {\n  list,\n  create,\n  get,\n  remove,\n  resetData,\n  edit,\n  jobSchema\n};\nexports.Job = Job;","map":{"version":3,"sources":["/home/gregorian/calendar-ui/api/model/job.js"],"names":["mongoose","require","cuid","setHours","addressObj","_id","type","String","default","value","validate","validator","v","length","message","addressSchema","Schema","operativesObj","operativesSchema","op","chargesObj","hourlyRate","Number","fuelCharge","travelTime","customerObj","name","required","mobile","email","jobSchema","start","Date","end","customer","charges","operatives","items","addresses","Job","model","list","from","to","data","find","$gte","$lte","create","job","save","get","id","findById","remove","deleteOne","edit","change","product","Object","keys","forEach","key","resetData","deleteMany","console","log","insertMany","module","exports"],"mappings":"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","sourcesContent":["const mongoose = require(\"mongoose\");\nconst cuid = require(\"cuid\");\n/*const addGcalEvent = require('./../googleCalendar')*/\n\nconst setHours = require(\"date-fns/setHours\");\n\nconst addressObj = {\n  _id: {\n    type: String,\n    default: cuid,\n  },\n  value: {\n    validate: {\n      validator: (v) => {\n        return v.length > 4;\n      },\n      message: `name must have more than 4 characters`,\n    },\n    type: String,\n  },\n};\n\nconst addressSchema = mongoose.Schema(addressObj)\n\nconst operativesObj = {\n  _id: {\n    type: String,\n    default: cuid,\n  },\n  value: {\n    validate: {\n      validator: (v) => {\n        return v.length > 4;\n      },\n      message: `name must have more than 4 characters`,\n    },\n    type: String,\n  },\n};\n\nconst operativesSchema = mongoose.Schema(op)\nconst chargesObj = {\n  hourlyRate: { type: Number },\n  fuelCharge: { type: Number },\n  travelTime: { type: Number },\n};\n\nconst customerObj = {\n  name: {\n    type: String,\n    required: true,\n    validate: [\n      {\n        validator: (v) => {\n          return v.length > 4;\n        },\n        message: `name must have more than 4 characters`,\n      },\n      // this validator was used to look at how multiple validators are handled\n      // removing comment will show that only on error is ever returned for a path\n      // {\n      //   validator: (v) => {\n      //     return v[0] === \"A\";\n      //   },\n      //   message: `first letter must be A`,\n      // },\n    ],\n  },\n  mobile: {\n    type: String,\n    validate: [\n      {\n        validator: (v) => {\n          return v.length > 4;\n        },\n        message: `name must have more than 4 characters`,\n      },\n    ],\n  },\n  email: { type: String },\n};\n\nconst jobSchema = new mongoose.Schema({\n  _id: {\n    type: String,\n    default: cuid,\n  },\n  start: {\n    type: Date,\n    required: true,\n  },\n  end: {\n    type: Date,\n    required: true,\n  },\n  customer: mongoose.Schema(customerObj),\n  charges: chargesObj,\n  operatives: [mongoose.Schema(operativesObj)],\n  items: String,\n  addresses: [addressObj],\n});\n\nlet Job = mongoose.model(\"Job\", jobSchema, \"jobs\");\n\nasync function list({ from, to }) {\n  let data = await Job.find({\n    start: { $gte: from },\n    end: { $lte: to },\n  });\n  return data;\n}\n\nasync function create(data) {\n  let job = new Job(data);\n  await job.save(); //TODO add some validation start must be before end\n  return job;\n}\n\nasync function get(id) {\n  const job = await Job.findById(id);\n  return job;\n}\n\nasync function remove(id) {\n  let data = await Job.deleteOne({ _id: id });\n  return data;\n}\n\nasync function edit(_id, change) {\n  const product = await get(_id);\n  Object.keys(change).forEach(function (key) {\n    product[key] = change[key];\n  });\n  await product.save();\n  return product;\n}\n\nasync function resetData(data) {\n  await Job.deleteMany();\n  console.log(data);\n  await Job.insertMany(data);\n}\n\nmodule.exports = {\n  list,\n  create,\n  get,\n  remove,\n  resetData,\n  edit,\n  jobSchema,\n};\n\nexports.Job = Job;\n"]},"metadata":{},"sourceType":"script"}