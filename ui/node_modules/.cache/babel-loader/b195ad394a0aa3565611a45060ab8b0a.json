{"ast":null,"code":"import{setHours,setMinutes}from\"date-fns\";var _require=require(\"date-fns\"),addDays=_require.addDays,format=_require.format,nextMonday=_require.nextMonday,isSameDay=_require.isSameDay;export function mondayIndexed(sundayIndexed){return sundayIndexed===0?6:sundayIndexed-1;}export function weekIndex(date){return mondayIndexed(date.getDay());}/*\nfunction currentDateTime() {\n    return add(new Date(), {minutes: new Date().getTimezoneOffset() * -1})\n}\n*/export function weekContaining(date){var daysOfWeek=[0,1,2,3,4,5,6];var difference=daysOfWeek.map(function(day){return day-weekIndex(date);});return difference.map(function(diff){return addDays(date,diff);});}export function dayOfWeek(date){return format(date,'iii');}export function monthAndYear(date){return\"\".concat(format(date,'MMM'),\" \").concat(format(date,'yyyy'));}export function previousMonday(date){var result=nextMonday(addDays(date,-7));result.setHours(0);result.setMinutes(0);return result;}export var fitsInWeek=function fitsInWeek(firstDayOfWeek,date){var endOfWeek=addDays(firstDayOfWeek,7);if(isSameDay(firstDayOfWeek,date)||isSameDay(endOfWeek,date)){return true;}return date>=firstDayOfWeek&&date<=endOfWeek;};export var mergeDateAndTime=function mergeDateAndTime(date,time){var hours=time.getHours();var minutes=time.getMinutes();return setMinutes(setHours(date,hours),minutes);};export function setTimeDayStart(date){return setMinutes(setHours(date,0),0);}export function setTimeDayEnd(date){return setTimeDayStart(addDays(date,1));}var defaultExports={weekContaining:weekContaining,dayOfWeek:dayOfWeek,monthAndYear:monthAndYear,addDays:addDays,previousMonday:previousMonday,fitsInWeek:fitsInWeek,mergeDateAndTime:mergeDateAndTime,startOfDay:setTimeDayStart,endOfDay:setTimeDayEnd};export default defaultExports;","map":{"version":3,"sources":["/home/gregorian/calendar-ui/ui/src/utilities/dateUtilities.js"],"names":["setHours","setMinutes","require","addDays","format","nextMonday","isSameDay","mondayIndexed","sundayIndexed","weekIndex","date","getDay","weekContaining","daysOfWeek","difference","map","day","diff","dayOfWeek","monthAndYear","previousMonday","result","fitsInWeek","firstDayOfWeek","endOfWeek","mergeDateAndTime","time","hours","getHours","minutes","getMinutes","setTimeDayStart","setTimeDayEnd","defaultExports","startOfDay","endOfDay"],"mappings":"AAAA,OAAQA,QAAR,CAAkBC,UAAlB,KAAmC,UAAnC,CAEA,aAA8CC,OAAO,CAAC,UAAD,CAArD,CAAOC,OAAP,UAAOA,OAAP,CAAeC,MAAf,UAAeA,MAAf,CAAsBC,UAAtB,UAAsBA,UAAtB,CAAiCC,SAAjC,UAAiCA,SAAjC,CAEA,MAAO,SAASC,CAAAA,aAAT,CAAuBC,aAAvB,CAAsC,CACzC,MAAOA,CAAAA,aAAa,GAAK,CAAlB,CAAsB,CAAtB,CAA0BA,aAAa,CAAG,CAAjD,CACH,CAED,MAAO,SAASC,CAAAA,SAAT,CAAmBC,IAAnB,CAAyB,CAC5B,MAAOH,CAAAA,aAAa,CAACG,IAAI,CAACC,MAAL,EAAD,CAApB,CACH,CAED;AACA;AACA;AACA;AACA,EAEA,MAAO,SAASC,CAAAA,cAAT,CAAwBF,IAAxB,CAA8B,CACjC,GAAMG,CAAAA,UAAU,CAAG,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,CAAb,CAAgB,CAAhB,CAAmB,CAAnB,CAAnB,CACA,GAAMC,CAAAA,UAAU,CAAGD,UAAU,CAACE,GAAX,CAAe,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAAGP,SAAS,CAACC,IAAD,CAAnB,EAAlB,CAAnB,CACA,MAAOI,CAAAA,UAAU,CAACC,GAAX,CAAe,SAAAE,IAAI,QAAId,CAAAA,OAAO,CAACO,IAAD,CAAOO,IAAP,CAAX,EAAnB,CAAP,CACH,CAED,MAAO,SAASC,CAAAA,SAAT,CAAmBR,IAAnB,CAAwB,CAC3B,MAAON,CAAAA,MAAM,CAACM,IAAD,CAAM,KAAN,CAAb,CACH,CAED,MAAO,SAASS,CAAAA,YAAT,CAAsBT,IAAtB,CAA2B,CAC9B,gBAAUN,MAAM,CAACM,IAAD,CAAM,KAAN,CAAhB,aAAgCN,MAAM,CAACM,IAAD,CAAM,MAAN,CAAtC,EACH,CAED,MAAO,SAASU,CAAAA,cAAT,CAAwBV,IAAxB,CAA6B,CAChC,GAAMW,CAAAA,MAAM,CAAEhB,UAAU,CAACF,OAAO,CAACO,IAAD,CAAM,CAAC,CAAP,CAAR,CAAxB,CACAW,MAAM,CAACrB,QAAP,CAAgB,CAAhB,EACAqB,MAAM,CAACpB,UAAP,CAAkB,CAAlB,EACA,MAAOoB,CAAAA,MAAP,CACH,CAED,MAAO,IAAMC,CAAAA,UAAU,CAAC,QAAXA,CAAAA,UAAW,CAACC,cAAD,CAAgBb,IAAhB,CAAuB,CAC3C,GAAMc,CAAAA,SAAS,CAAGrB,OAAO,CAACoB,cAAD,CAAgB,CAAhB,CAAzB,CACA,GAAIjB,SAAS,CAACiB,cAAD,CAAgBb,IAAhB,CAAT,EAAkCJ,SAAS,CAACkB,SAAD,CAAWd,IAAX,CAA/C,CAAgE,CAC5D,MAAO,KAAP,CACH,CACD,MAAQA,CAAAA,IAAI,EAAGa,cAAP,EAAyBb,IAAI,EAAGc,SAAxC,CACH,CANM,CAQP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACf,IAAD,CAAMgB,IAAN,CAAa,CACzC,GAAMC,CAAAA,KAAK,CAAGD,IAAI,CAACE,QAAL,EAAd,CACA,GAAMC,CAAAA,OAAO,CAAGH,IAAI,CAACI,UAAL,EAAhB,CACA,MAAO7B,CAAAA,UAAU,CAACD,QAAQ,CAACU,IAAD,CAAMiB,KAAN,CAAT,CAAsBE,OAAtB,CAAjB,CACH,CAJM,CAMP,MAAO,SAASE,CAAAA,eAAT,CAAyBrB,IAAzB,CAA8B,CACjC,MAAOT,CAAAA,UAAU,CAACD,QAAQ,CAACU,IAAD,CAAM,CAAN,CAAT,CAAkB,CAAlB,CAAjB,CACH,CAED,MAAO,SAASsB,CAAAA,aAAT,CAAuBtB,IAAvB,CAA4B,CAC/B,MAAOqB,CAAAA,eAAe,CAAC5B,OAAO,CAACO,IAAD,CAAM,CAAN,CAAR,CAAtB,CACH,CAED,GAAMuB,CAAAA,cAAc,CAAG,CACnBrB,cAAc,CAAdA,cADmB,CAEnBM,SAAS,CAATA,SAFmB,CAGnBC,YAAY,CAAZA,YAHmB,CAInBhB,OAAO,CAAPA,OAJmB,CAKnBiB,cAAc,CAAdA,cALmB,CAMnBE,UAAU,CAAVA,UANmB,CAOnBG,gBAAgB,CAAhBA,gBAPmB,CAQnBS,UAAU,CAAEH,eARO,CASnBI,QAAQ,CAAEH,aATS,CAAvB,CAYA,cAAeC,CAAAA,cAAf","sourcesContent":["import {setHours, setMinutes} from \"date-fns\";\n\nconst {addDays,format,nextMonday,isSameDay} = require(\"date-fns\");\n\nexport function mondayIndexed(sundayIndexed) {\n    return sundayIndexed === 0 ? 6 : sundayIndexed - 1\n}\n\nexport function weekIndex(date) {\n    return mondayIndexed(date.getDay())\n}\n\n/*\nfunction currentDateTime() {\n    return add(new Date(), {minutes: new Date().getTimezoneOffset() * -1})\n}\n*/\n\nexport function weekContaining(date) {\n    const daysOfWeek = [0, 1, 2, 3, 4, 5, 6]\n    const difference = daysOfWeek.map(day => day - weekIndex(date))\n    return difference.map(diff => addDays(date, diff))\n}\n\nexport function dayOfWeek(date){\n    return format(date,'iii')\n}\n\nexport function monthAndYear(date){\n    return `${format(date,'MMM')} ${format(date,'yyyy')}`\n}\n\nexport function previousMonday(date){\n    const result =nextMonday(addDays(date,-7))\n    result.setHours(0)\n    result.setMinutes(0)\n    return result\n}\n\nexport const fitsInWeek=(firstDayOfWeek,date)=>{\n    const endOfWeek = addDays(firstDayOfWeek,7)\n    if (isSameDay(firstDayOfWeek,date) || isSameDay(endOfWeek,date)){\n        return true\n    }\n    return (date >=firstDayOfWeek && date <=endOfWeek)\n}\n\nexport const mergeDateAndTime = (date,time)=>{\n    const hours = time.getHours()\n    const minutes = time.getMinutes()\n    return setMinutes(setHours(date,hours),minutes)\n}\n\nexport function setTimeDayStart(date){\n    return setMinutes(setHours(date,0),0)\n}\n\nexport function setTimeDayEnd(date){\n    return setTimeDayStart(addDays(date,1))\n}\n\nconst defaultExports = {\n    weekContaining,\n    dayOfWeek,\n    monthAndYear,\n    addDays,\n    previousMonday,\n    fitsInWeek,\n    mergeDateAndTime,\n    startOfDay: setTimeDayStart,\n    endOfDay: setTimeDayEnd\n}\n\nexport default defaultExports"]},"metadata":{},"sourceType":"module"}