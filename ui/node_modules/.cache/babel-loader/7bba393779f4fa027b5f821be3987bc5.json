{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('../error/cast');\n\nconst SchemaType = require('../schematype');\n\nconst castBoolean = require('../cast/boolean');\n\nconst utils = require('../utils');\n/**\n * Boolean SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\n\nfunction SchemaBoolean(path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nSchemaBoolean.schemaName = 'Boolean';\nSchemaBoolean.defaultOptions = {};\n/*!\n * Inherits from SchemaType.\n */\n\nSchemaBoolean.prototype = Object.create(SchemaType.prototype);\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n/*!\n * ignore\n */\n\nSchemaBoolean._cast = castBoolean;\n/**\n * Sets a default option for all Boolean instances.\n *\n * ####Example:\n *\n *     // Make all booleans have `default` of false.\n *     mongoose.Schema.Boolean.set('default', false);\n *\n *     const Order = mongoose.model('Order', new Schema({ isPaid: Boolean }));\n *     new Order({ }).isPaid; // false\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaBoolean.set = SchemaType.set;\n/**\n * Get/set the function used to cast arbitrary values to booleans.\n *\n * ####Example:\n *\n *     // Make Mongoose cast empty string '' to false.\n *     const original = mongoose.Schema.Boolean.cast();\n *     mongoose.Schema.Boolean.cast(v => {\n *       if (v === '') {\n *         return false;\n *       }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Boolean.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaBoolean.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n\n  this._cast = caster;\n  return this._cast;\n};\n/*!\n * ignore\n */\n\n\nSchemaBoolean._defaultCaster = v => {\n  if (v != null && typeof v !== 'boolean') {\n    throw new Error();\n  }\n\n  return v;\n};\n/*!\n * ignore\n */\n\n\nSchemaBoolean._checkRequired = v => v === true || v === false;\n/**\n * Override the function the required validator uses to check whether a boolean\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\n\nSchemaBoolean.checkRequired = SchemaType.checkRequired;\n/**\n * Check if the given value satisfies a required validator. For a boolean\n * to satisfy a required validator, it must be strictly equal to true or to\n * false.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBoolean.prototype.checkRequired = function (value) {\n  return this.constructor._checkRequired(value);\n};\n/**\n * Configure which values get casted to `true`.\n *\n * ####Example:\n *\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\n *     new M({ b: 'affirmative' }).b; // undefined\n *     mongoose.Schema.Boolean.convertToTrue.add('affirmative');\n *     new M({ b: 'affirmative' }).b; // true\n *\n * @property convertToTrue\n * @type Set\n * @api public\n */\n\n\nObject.defineProperty(SchemaBoolean, 'convertToTrue', {\n  get: () => castBoolean.convertToTrue,\n  set: v => {\n    castBoolean.convertToTrue = v;\n  }\n});\n/**\n * Configure which values get casted to `false`.\n *\n * ####Example:\n *\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\n *     new M({ b: 'nay' }).b; // undefined\n *     mongoose.Schema.Types.Boolean.convertToFalse.add('nay');\n *     new M({ b: 'nay' }).b; // false\n *\n * @property convertToFalse\n * @type Set\n * @api public\n */\n\nObject.defineProperty(SchemaBoolean, 'convertToFalse', {\n  get: () => castBoolean.convertToFalse,\n  set: v => {\n    castBoolean.convertToFalse = v;\n  }\n});\n/**\n * Casts to boolean\n *\n * @param {Object} value\n * @param {Object} model - this value is optional\n * @api private\n */\n\nSchemaBoolean.prototype.cast = function (value) {\n  let castBoolean;\n\n  if (typeof this._castFunction === 'function') {\n    castBoolean = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castBoolean = this.constructor.cast();\n  } else {\n    castBoolean = SchemaBoolean.cast();\n  }\n\n  try {\n    return castBoolean(value);\n  } catch (error) {\n    throw new CastError('Boolean', value, this.path, error, this);\n  }\n};\n\nSchemaBoolean.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {});\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBoolean.prototype.castForQuery = function ($conditional, val) {\n  let handler;\n\n  if (arguments.length === 2) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this._castForQuery(val);\n  }\n\n  return this._castForQuery($conditional);\n};\n/**\n *\n * @api private\n */\n\n\nSchemaBoolean.prototype._castNullish = function _castNullish(v) {\n  if (typeof v === 'undefined' && this.$$context != null && this.$$context._mongooseOptions != null && this.$$context._mongooseOptions.omitUndefined) {\n    return v;\n  }\n\n  const castBoolean = typeof this.constructor.cast === 'function' ? this.constructor.cast() : SchemaBoolean.cast();\n\n  if (castBoolean == null) {\n    return v;\n  }\n\n  if (castBoolean.convertToFalse instanceof Set && castBoolean.convertToFalse.has(v)) {\n    return false;\n  }\n\n  if (castBoolean.convertToTrue instanceof Set && castBoolean.convertToTrue.has(v)) {\n    return true;\n  }\n\n  return v;\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = SchemaBoolean;","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/schema/boolean.js"],"names":["CastError","require","SchemaType","castBoolean","utils","SchemaBoolean","path","options","call","schemaName","defaultOptions","prototype","Object","create","constructor","_cast","set","cast","caster","arguments","length","_defaultCaster","v","Error","_checkRequired","checkRequired","value","defineProperty","get","convertToTrue","convertToFalse","_castFunction","error","$conditionalHandlers","castForQuery","$conditional","val","handler","_castForQuery","_castNullish","$$context","_mongooseOptions","omitUndefined","Set","has","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('../error/cast');\nconst SchemaType = require('../schematype');\nconst castBoolean = require('../cast/boolean');\nconst utils = require('../utils');\n\n/**\n * Boolean SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBoolean(path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBoolean.schemaName = 'Boolean';\n\nSchemaBoolean.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBoolean.prototype = Object.create(SchemaType.prototype);\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n\n/*!\n * ignore\n */\n\nSchemaBoolean._cast = castBoolean;\n\n/**\n * Sets a default option for all Boolean instances.\n *\n * ####Example:\n *\n *     // Make all booleans have `default` of false.\n *     mongoose.Schema.Boolean.set('default', false);\n *\n *     const Order = mongoose.model('Order', new Schema({ isPaid: Boolean }));\n *     new Order({ }).isPaid; // false\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaBoolean.set = SchemaType.set;\n\n/**\n * Get/set the function used to cast arbitrary values to booleans.\n *\n * ####Example:\n *\n *     // Make Mongoose cast empty string '' to false.\n *     const original = mongoose.Schema.Boolean.cast();\n *     mongoose.Schema.Boolean.cast(v => {\n *       if (v === '') {\n *         return false;\n *       }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Boolean.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaBoolean.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaBoolean._defaultCaster = v => {\n  if (v != null && typeof v !== 'boolean') {\n    throw new Error();\n  }\n  return v;\n};\n\n/*!\n * ignore\n */\n\nSchemaBoolean._checkRequired = v => v === true || v === false;\n\n/**\n * Override the function the required validator uses to check whether a boolean\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaBoolean.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator. For a boolean\n * to satisfy a required validator, it must be strictly equal to true or to\n * false.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBoolean.prototype.checkRequired = function(value) {\n  return this.constructor._checkRequired(value);\n};\n\n/**\n * Configure which values get casted to `true`.\n *\n * ####Example:\n *\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\n *     new M({ b: 'affirmative' }).b; // undefined\n *     mongoose.Schema.Boolean.convertToTrue.add('affirmative');\n *     new M({ b: 'affirmative' }).b; // true\n *\n * @property convertToTrue\n * @type Set\n * @api public\n */\n\nObject.defineProperty(SchemaBoolean, 'convertToTrue', {\n  get: () => castBoolean.convertToTrue,\n  set: v => { castBoolean.convertToTrue = v; }\n});\n\n/**\n * Configure which values get casted to `false`.\n *\n * ####Example:\n *\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\n *     new M({ b: 'nay' }).b; // undefined\n *     mongoose.Schema.Types.Boolean.convertToFalse.add('nay');\n *     new M({ b: 'nay' }).b; // false\n *\n * @property convertToFalse\n * @type Set\n * @api public\n */\n\nObject.defineProperty(SchemaBoolean, 'convertToFalse', {\n  get: () => castBoolean.convertToFalse,\n  set: v => { castBoolean.convertToFalse = v; }\n});\n\n/**\n * Casts to boolean\n *\n * @param {Object} value\n * @param {Object} model - this value is optional\n * @api private\n */\n\nSchemaBoolean.prototype.cast = function(value) {\n  let castBoolean;\n  if (typeof this._castFunction === 'function') {\n    castBoolean = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castBoolean = this.constructor.cast();\n  } else {\n    castBoolean = SchemaBoolean.cast();\n  }\n\n  try {\n    return castBoolean(value);\n  } catch (error) {\n    throw new CastError('Boolean', value, this.path, error, this);\n  }\n};\n\nSchemaBoolean.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {});\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBoolean.prototype.castForQuery = function($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this._castForQuery(val);\n  }\n\n  return this._castForQuery($conditional);\n};\n\n/**\n *\n * @api private\n */\n\nSchemaBoolean.prototype._castNullish = function _castNullish(v) {\n  if (typeof v === 'undefined' &&\n      this.$$context != null &&\n      this.$$context._mongooseOptions != null &&\n      this.$$context._mongooseOptions.omitUndefined) {\n    return v;\n  }\n  const castBoolean = typeof this.constructor.cast === 'function' ?\n    this.constructor.cast() :\n    SchemaBoolean.cast();\n  if (castBoolean == null) {\n    return v;\n  }\n  if (castBoolean.convertToFalse instanceof Set && castBoolean.convertToFalse.has(v)) {\n    return false;\n  }\n  if (castBoolean.convertToTrue instanceof Set && castBoolean.convertToTrue.has(v)) {\n    return true;\n  }\n  return v;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBoolean;\n"]},"metadata":{},"sourceType":"script"}