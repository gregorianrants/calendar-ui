{"ast":null,"code":"const mongoose = require(\"mongoose\");\n\nconst cuid = require(\"cuid\");\n/*const addGcalEvent = require('./../googleCalendar')*/\n\n\nconst setHours = require(\"date-fns/setHours\");\n\nconst addressObj = {\n  _id: {\n    type: String,\n    default: cuid\n  },\n  value: {\n    type: String\n  }\n};\nconst operativesObj = {\n  _id: {\n    type: String,\n    default: cuid\n  },\n  value: {\n    type: String\n  }\n};\nconst chargesSchema = new mongoose.Schema({\n  hourlyRate: {\n    type: Number\n  },\n  fuelCharge: {\n    type: Number\n  },\n  travelTime: {\n    type: Number\n  }\n});\nconst jobSchema = new mongoose.Schema({\n  _id: {\n    type: String,\n    default: cuid\n  },\n  start: {\n    type: Date,\n    required: true\n  },\n  end: {\n    type: Date,\n    required: true\n  },\n  customer: {\n    name: {\n      type: String,\n      validate: [{\n        validator: v => {\n          return v.length > 4;\n        },\n        message: `name must have more than 4 characters`\n      } // this validator was used to look at how multiple validators are handled\n      // removing comment will show that only on error is ever returned for a path\n      // {\n      //   validator: (v) => {\n      //     return v[0] === \"A\";\n      //   },\n      //   message: `first letter must be A`,\n      // },\n      ]\n    },\n    mobile: {\n      type: String\n    },\n    email: {\n      type: String\n    }\n  },\n  charges: chargesSchema,\n  operatives: [operativesSchema],\n  items: String,\n  addresses: [addressSchema]\n});\nlet Job = mongoose.model(\"Job\", jobSchema, \"jobs\");\n\nasync function list({\n  from,\n  to\n}) {\n  let data = await Job.find({\n    start: {\n      $gte: from\n    },\n    end: {\n      $lte: to\n    }\n  });\n  return data;\n}\n\nasync function create(data) {\n  let job = new Job(data);\n  await job.save(); //TODO add some validation start must be before end\n\n  return job;\n}\n\nasync function get(id) {\n  const job = await Job.findById(id);\n  return job;\n}\n\nasync function remove(id) {\n  let data = await Job.deleteOne({\n    _id: id\n  });\n  return data;\n}\n\nasync function edit(_id, change) {\n  const product = await get(_id);\n  Object.keys(change).forEach(function (key) {\n    product[key] = change[key];\n  });\n  await product.save();\n  return product;\n}\n\nasync function resetData(data) {\n  await Job.deleteMany();\n  console.log(data);\n  await Job.insertMany(data);\n}\n\nmodule.exports = {\n  list,\n  create,\n  get,\n  remove,\n  resetData,\n  edit,\n  jobSchema\n};\nexports.Job = Job;","map":{"version":3,"sources":["/home/gregorian/calendar-ui/api/model/job.js"],"names":["mongoose","require","cuid","setHours","addressObj","_id","type","String","default","value","operativesObj","chargesSchema","Schema","hourlyRate","Number","fuelCharge","travelTime","jobSchema","start","Date","required","end","customer","name","validate","validator","v","length","message","mobile","email","charges","operatives","operativesSchema","items","addresses","addressSchema","Job","model","list","from","to","data","find","$gte","$lte","create","job","save","get","id","findById","remove","deleteOne","edit","change","product","Object","keys","forEach","key","resetData","deleteMany","console","log","insertMany","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;AACA;;;AAEA,MAAME,QAAQ,GAAGF,OAAO,CAAC,mBAAD,CAAxB;;AAEA,MAAMG,UAAU,GAAG;AACjBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,OAAO,EAAEN;AAFN,GADY;AAKjBO,EAAAA,KAAK,EAAE;AACLH,IAAAA,IAAI,EAAEC;AADD;AALU,CAAnB;AAUA,MAAMG,aAAa,GAAG;AACpBL,EAAAA,GAAG,EAAE;AACHC,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,OAAO,EAAEN;AAFN,GADe;AAKpBO,EAAAA,KAAK,EAAE;AACLH,IAAAA,IAAI,EAAEC;AADD;AALa,CAAtB;AAUA,MAAMI,aAAa,GAAG,IAAIX,QAAQ,CAACY,MAAb,CAAoB;AACxCC,EAAAA,UAAU,EAAE;AAAEP,IAAAA,IAAI,EAAEQ;AAAR,GAD4B;AAExCC,EAAAA,UAAU,EAAE;AAAET,IAAAA,IAAI,EAAEQ;AAAR,GAF4B;AAGxCE,EAAAA,UAAU,EAAE;AAAEV,IAAAA,IAAI,EAAEQ;AAAR;AAH4B,CAApB,CAAtB;AAMA,MAAMG,SAAS,GAAG,IAAIjB,QAAQ,CAACY,MAAb,CAAoB;AACpCP,EAAAA,GAAG,EAAE;AACHC,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,OAAO,EAAEN;AAFN,GAD+B;AAKpCgB,EAAAA,KAAK,EAAE;AACLZ,IAAAA,IAAI,EAAEa,IADD;AAELC,IAAAA,QAAQ,EAAE;AAFL,GAL6B;AASpCC,EAAAA,GAAG,EAAE;AACHf,IAAAA,IAAI,EAAEa,IADH;AAEHC,IAAAA,QAAQ,EAAE;AAFP,GAT+B;AAapCE,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAE;AACJjB,MAAAA,IAAI,EAAEC,MADF;AAEJiB,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,SAAS,EAAGC,CAAD,IAAO;AAChB,iBAAOA,CAAC,CAACC,MAAF,GAAW,CAAlB;AACD,SAHH;AAIEC,QAAAA,OAAO,EAAG;AAJZ,OADQ,CAOR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdQ;AAFN,KADE;AAoBRC,IAAAA,MAAM,EAAE;AAAEvB,MAAAA,IAAI,EAAEC;AAAR,KApBA;AAqBRuB,IAAAA,KAAK,EAAE;AAAExB,MAAAA,IAAI,EAAEC;AAAR;AArBC,GAb0B;AAoCpCwB,EAAAA,OAAO,EAAEpB,aApC2B;AAqCpCqB,EAAAA,UAAU,EAAE,CAACC,gBAAD,CArCwB;AAsCpCC,EAAAA,KAAK,EAAE3B,MAtC6B;AAuCpC4B,EAAAA,SAAS,EAAE,CAACC,aAAD;AAvCyB,CAApB,CAAlB;AA0CA,IAAIC,GAAG,GAAGrC,QAAQ,CAACsC,KAAT,CAAe,KAAf,EAAsBrB,SAAtB,EAAiC,MAAjC,CAAV;;AAEA,eAAesB,IAAf,CAAoB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAApB,EAAkC;AAChC,MAAIC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS;AACxBzB,IAAAA,KAAK,EAAE;AAAE0B,MAAAA,IAAI,EAAEJ;AAAR,KADiB;AAExBnB,IAAAA,GAAG,EAAE;AAAEwB,MAAAA,IAAI,EAAEJ;AAAR;AAFmB,GAAT,CAAjB;AAIA,SAAOC,IAAP;AACD;;AAED,eAAeI,MAAf,CAAsBJ,IAAtB,EAA4B;AAC1B,MAAIK,GAAG,GAAG,IAAIV,GAAJ,CAAQK,IAAR,CAAV;AACA,QAAMK,GAAG,CAACC,IAAJ,EAAN,CAF0B,CAER;;AAClB,SAAOD,GAAP;AACD;;AAED,eAAeE,GAAf,CAAmBC,EAAnB,EAAuB;AACrB,QAAMH,GAAG,GAAG,MAAMV,GAAG,CAACc,QAAJ,CAAaD,EAAb,CAAlB;AACA,SAAOH,GAAP;AACD;;AAED,eAAeK,MAAf,CAAsBF,EAAtB,EAA0B;AACxB,MAAIR,IAAI,GAAG,MAAML,GAAG,CAACgB,SAAJ,CAAc;AAAEhD,IAAAA,GAAG,EAAE6C;AAAP,GAAd,CAAjB;AACA,SAAOR,IAAP;AACD;;AAED,eAAeY,IAAf,CAAoBjD,GAApB,EAAyBkD,MAAzB,EAAiC;AAC/B,QAAMC,OAAO,GAAG,MAAMP,GAAG,CAAC5C,GAAD,CAAzB;AACAoD,EAAAA,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,OAApB,CAA4B,UAAUC,GAAV,EAAe;AACzCJ,IAAAA,OAAO,CAACI,GAAD,CAAP,GAAeL,MAAM,CAACK,GAAD,CAArB;AACD,GAFD;AAGA,QAAMJ,OAAO,CAACR,IAAR,EAAN;AACA,SAAOQ,OAAP;AACD;;AAED,eAAeK,SAAf,CAAyBnB,IAAzB,EAA+B;AAC7B,QAAML,GAAG,CAACyB,UAAJ,EAAN;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYtB,IAAZ;AACA,QAAML,GAAG,CAAC4B,UAAJ,CAAevB,IAAf,CAAN;AACD;;AAEDwB,MAAM,CAACC,OAAP,GAAiB;AACf5B,EAAAA,IADe;AAEfO,EAAAA,MAFe;AAGfG,EAAAA,GAHe;AAIfG,EAAAA,MAJe;AAKfS,EAAAA,SALe;AAMfP,EAAAA,IANe;AAOfrC,EAAAA;AAPe,CAAjB;AAUAkD,OAAO,CAAC9B,GAAR,GAAcA,GAAd","sourcesContent":["const mongoose = require(\"mongoose\");\nconst cuid = require(\"cuid\");\n/*const addGcalEvent = require('./../googleCalendar')*/\n\nconst setHours = require(\"date-fns/setHours\");\n\nconst addressObj = {\n  _id: {\n    type: String,\n    default: cuid,\n  },\n  value: {\n    type: String,\n  },\n}\n\nconst operativesObj = {\n  _id: {\n    type: String,\n    default: cuid,\n  },\n  value: {\n    type: String,\n  },\n}\n\nconst chargesSchema = new mongoose.Schema({\n  hourlyRate: { type: Number },\n  fuelCharge: { type: Number },\n  travelTime: { type: Number },\n});\n\nconst jobSchema = new mongoose.Schema({\n  _id: {\n    type: String,\n    default: cuid,\n  },\n  start: {\n    type: Date,\n    required: true,\n  },\n  end: {\n    type: Date,\n    required: true,\n  },\n  customer: {\n    name: {\n      type: String,\n      validate: [\n        {\n          validator: (v) => {\n            return v.length > 4;\n          },\n          message: `name must have more than 4 characters`,\n        },\n        // this validator was used to look at how multiple validators are handled\n        // removing comment will show that only on error is ever returned for a path\n        // {\n        //   validator: (v) => {\n        //     return v[0] === \"A\";\n        //   },\n        //   message: `first letter must be A`,\n        // },\n      ],\n    },\n    mobile: { type: String },\n    email: { type: String },\n  },\n  charges: chargesSchema,\n  operatives: [operativesSchema],\n  items: String,\n  addresses: [addressSchema],\n});\n\nlet Job = mongoose.model(\"Job\", jobSchema, \"jobs\");\n\nasync function list({ from, to }) {\n  let data = await Job.find({\n    start: { $gte: from },\n    end: { $lte: to },\n  });\n  return data;\n}\n\nasync function create(data) {\n  let job = new Job(data);\n  await job.save(); //TODO add some validation start must be before end\n  return job;\n}\n\nasync function get(id) {\n  const job = await Job.findById(id);\n  return job;\n}\n\nasync function remove(id) {\n  let data = await Job.deleteOne({ _id: id });\n  return data;\n}\n\nasync function edit(_id, change) {\n  const product = await get(_id);\n  Object.keys(change).forEach(function (key) {\n    product[key] = change[key];\n  });\n  await product.save();\n  return product;\n}\n\nasync function resetData(data) {\n  await Job.deleteMany();\n  console.log(data);\n  await Job.insertMany(data);\n}\n\nmodule.exports = {\n  list,\n  create,\n  get,\n  remove,\n  resetData,\n  edit,\n  jobSchema,\n};\n\nexports.Job = Job;\n"]},"metadata":{},"sourceType":"script"}