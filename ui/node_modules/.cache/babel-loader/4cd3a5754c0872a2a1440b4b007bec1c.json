{"ast":null,"code":"const {\n  cloneDeep\n} = require(\"lodash\");\n\nconst {\n  pipe,\n  partialRight,\n  curry,\n  flip\n} = require(\"ramda\");\n\nfunction removeDotPaths(obj) {\n  return Object.keys(obj).reduce((a, b) => {\n    if (b.includes(\".\")) {\n      return a;\n    } else {\n      return { ...a,\n        [b]: cloneDeep(obj[b])\n      };\n    }\n  }, {});\n} //TO UNDERSTAND LOOK AT THIS FIRST THE FURHTER CHANGES ARE JUST TO MAKE IMMUTABLE AND FUNCTIONAL - this is a recursive function\n// i realise this is pretty confusing but so are mongoose error objects\n//\n// function process(errorsObj, result) {\n//   if (errorsObj.hasOwnProperty(\"errors\"))\n//     return process(errorsObj[\"errors\"], result);\n//   if (errorsObj.hasOwnProperty(\"properties\"))\n//     return errorsObj[\"properties\"][\"message\"];\n//   let builder = {};\n//   for (const [key, value] of Object.entries(errorsObj)) {\n//     builder[key] = process(value, {});\n//   }\n//   return builder;\n// }\n//we wrap the function purely to clone the errors obj passed to it,\n//because passing oject by reference can cause bugs, this could happen if we modified the object,\n//we dont modify it but i have cloned it anyway so that the object passed is forever protected from modification by this function.\n\n\nfunction processMongooseError(errorsObj) {\n  if (!errorsObj) return null;\n\n  function inner(errorsObj, result) {\n    if (errorsObj.hasOwnProperty(\"errors\")) return inner(errorsObj[\"errors\"]);\n    if (errorsObj.hasOwnProperty(\"properties\")) return errorsObj[\"properties\"][\"message\"];\n    let builder = {};\n    const withoutDuplicates = removeDotPaths(errorsObj); //todo proccess the object outside of function to remove all dot paths first\n\n    for (const [key, value] of Object.entries(withoutDuplicates)) {\n      builder[key] = inner(value);\n    }\n\n    return builder;\n  }\n\n  return inner(cloneDeep(errorsObj));\n}\n\nmodule.exports = processMongooseError;\nconst errorsObj = {\n  errors: {\n    customer: {\n      errors: {\n        name: {\n          name: \"ValidatorError\",\n          message: \"name must have more than 4 characters\",\n          properties: {\n            message: \"name must have more than 4 characters\",\n            type: \"user defined\",\n            path: \"name\",\n            value: \"Al\"\n          },\n          kind: \"user defined\",\n          path: \"name\",\n          value: \"Al\"\n        }\n      },\n      _message: \"Validation failed\",\n      name: \"ValidationError\",\n      message: \"Validation failed: name: name must have more than 4 characters\"\n    },\n    operatives: {\n      errors: {\n        value: {\n          name: \"ValidatorError\",\n          message: \"name must have more than 4 characters\",\n          properties: {\n            message: \"name must have more than 4 characters\",\n            type: \"user defined\",\n            path: \"value\",\n            value: \"dave\"\n          },\n          kind: \"user defined\",\n          path: \"value\",\n          value: \"dave\"\n        }\n      },\n      _message: \"Validation failed\",\n      name: \"ValidationError\",\n      message: \"Validation failed: value: name must have more than 4 characters\"\n    }\n  },\n  _message: \"Validation failed\",\n  name: \"ValidationError\",\n  message: \"Validation failed: customer.name: name must have more than 4 characters, customer: Validation failed: name: name must have more than 4 characters, operatives: Validation failed: value: name must have more than 4 characters\"\n};\nlet res = processM(errorsObj);\nconsole.log(res);","map":{"version":3,"sources":["/home/gregorian/calendar-ui/ui/src/utilities/processMongooseError.js"],"names":["cloneDeep","require","pipe","partialRight","curry","flip","removeDotPaths","obj","Object","keys","reduce","a","b","includes","processMongooseError","errorsObj","inner","result","hasOwnProperty","builder","withoutDuplicates","key","value","entries","module","exports","errors","customer","name","message","properties","type","path","kind","_message","operatives","res","processM","console","log"],"mappings":"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","sourcesContent":["const { cloneDeep } = require(\"lodash\");\nconst { pipe, partialRight, curry, flip } = require(\"ramda\");\n\nfunction removeDotPaths(obj) {\n  return Object.keys(obj).reduce((a, b) => {\n    if (b.includes(\".\")) {\n      return a;\n    } else {\n      return { ...a, [b]: cloneDeep(obj[b]) };\n    }\n  }, {});\n}\n\n//TO UNDERSTAND LOOK AT THIS FIRST THE FURHTER CHANGES ARE JUST TO MAKE IMMUTABLE AND FUNCTIONAL - this is a recursive function\n// i realise this is pretty confusing but so are mongoose error objects\n//\n// function process(errorsObj, result) {\n//   if (errorsObj.hasOwnProperty(\"errors\"))\n//     return process(errorsObj[\"errors\"], result);\n\n//   if (errorsObj.hasOwnProperty(\"properties\"))\n//     return errorsObj[\"properties\"][\"message\"];\n\n//   let builder = {};\n//   for (const [key, value] of Object.entries(errorsObj)) {\n//     builder[key] = process(value, {});\n//   }\n//   return builder;\n// }\n\n//we wrap the function purely to clone the errors obj passed to it,\n//because passing oject by reference can cause bugs, this could happen if we modified the object,\n//we dont modify it but i have cloned it anyway so that the object passed is forever protected from modification by this function.\n\nfunction processMongooseError(errorsObj) {\n  if (!errorsObj) return null;\n  function inner(errorsObj, result) {\n    if (errorsObj.hasOwnProperty(\"errors\")) return inner(errorsObj[\"errors\"]);\n\n    if (errorsObj.hasOwnProperty(\"properties\"))\n      return errorsObj[\"properties\"][\"message\"];\n\n    let builder = {};\n    const withoutDuplicates = removeDotPaths(errorsObj); //todo proccess the object outside of function to remove all dot paths first\n    for (const [key, value] of Object.entries(withoutDuplicates)) {\n      builder[key] = inner(value);\n    }\n    return builder;\n  }\n  return inner(cloneDeep(errorsObj));\n}\n\nmodule.exports = processMongooseError;\n\nconst errorsObj = {\n  errors: {\n    customer: {\n      errors: {\n        name: {\n          name: \"ValidatorError\",\n          message: \"name must have more than 4 characters\",\n          properties: {\n            message: \"name must have more than 4 characters\",\n            type: \"user defined\",\n            path: \"name\",\n            value: \"Al\",\n          },\n          kind: \"user defined\",\n          path: \"name\",\n          value: \"Al\",\n        },\n      },\n      _message: \"Validation failed\",\n      name: \"ValidationError\",\n      message: \"Validation failed: name: name must have more than 4 characters\",\n    },\n    operatives: {\n      errors: {\n        value: {\n          name: \"ValidatorError\",\n          message: \"name must have more than 4 characters\",\n          properties: {\n            message: \"name must have more than 4 characters\",\n            type: \"user defined\",\n            path: \"value\",\n            value: \"dave\",\n          },\n          kind: \"user defined\",\n          path: \"value\",\n          value: \"dave\",\n        },\n      },\n      _message: \"Validation failed\",\n      name: \"ValidationError\",\n      message:\n        \"Validation failed: value: name must have more than 4 characters\",\n    },\n  },\n  _message: \"Validation failed\",\n  name: \"ValidationError\",\n  message:\n    \"Validation failed: customer.name: name must have more than 4 characters, customer: Validation failed: name: name must have more than 4 characters, operatives: Validation failed: value: name must have more than 4 characters\",\n};\nlet res = processM(errorsObj);\n\nconsole.log(res);\n"]},"metadata":{},"sourceType":"module"}