{"ast":null,"code":"'use strict';\n/*!\n * ignore\n */\n\nconst MongooseMap = require('../types/map');\n\nconst SchemaMapOptions = require('../options/SchemaMapOptions');\n\nconst SchemaType = require('../schematype');\n/*!\n * ignore\n */\n\n\nclass Map extends SchemaType {\n  constructor(key, options) {\n    super(key, options, 'Map');\n    this.$isSchemaMap = true;\n  }\n\n  set(option, value) {\n    return SchemaType.set(option, value);\n  }\n\n  cast(val, doc, init) {\n    if (val instanceof MongooseMap) {\n      return val;\n    }\n\n    const path = this.path;\n\n    if (init) {\n      const map = new MongooseMap({}, path, doc, this.$__schemaType);\n\n      if (val instanceof global.Map) {\n        for (const key of val.keys()) {\n          let _val = val.get(key);\n\n          if (_val == null) {\n            _val = map.$__schemaType._castNullish(_val);\n          } else {\n            _val = map.$__schemaType.cast(_val, doc, true, null, {\n              path: path + '.' + key\n            });\n          }\n\n          map.$init(key, _val);\n        }\n      } else {\n        for (const key of Object.keys(val)) {\n          let _val = val[key];\n\n          if (_val == null) {\n            _val = map.$__schemaType._castNullish(_val);\n          } else {\n            _val = map.$__schemaType.cast(_val, doc, true, null, {\n              path: path + '.' + key\n            });\n          }\n\n          map.$init(key, _val);\n        }\n      }\n\n      return map;\n    }\n\n    return new MongooseMap(val, path, doc, this.$__schemaType);\n  }\n\n  clone() {\n    const schematype = super.clone();\n\n    if (this.$__schemaType != null) {\n      schematype.$__schemaType = this.$__schemaType.clone();\n    }\n\n    return schematype;\n  }\n\n}\n\nMap.prototype.OptionsConstructor = SchemaMapOptions;\nMap.defaultOptions = {};\nmodule.exports = Map;","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/schema/map.js"],"names":["MongooseMap","require","SchemaMapOptions","SchemaType","Map","constructor","key","options","$isSchemaMap","set","option","value","cast","val","doc","init","path","map","$__schemaType","global","keys","_val","get","_castNullish","$init","Object","clone","schematype","prototype","OptionsConstructor","defaultOptions","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/*!\n * ignore\n */\n\nconst MongooseMap = require('../types/map');\nconst SchemaMapOptions = require('../options/SchemaMapOptions');\nconst SchemaType = require('../schematype');\n/*!\n * ignore\n */\n\nclass Map extends SchemaType {\n  constructor(key, options) {\n    super(key, options, 'Map');\n    this.$isSchemaMap = true;\n  }\n\n  set(option, value) {\n    return SchemaType.set(option, value);\n  }\n\n  cast(val, doc, init) {\n    if (val instanceof MongooseMap) {\n      return val;\n    }\n\n    const path = this.path;\n\n    if (init) {\n      const map = new MongooseMap({}, path, doc, this.$__schemaType);\n\n      if (val instanceof global.Map) {\n        for (const key of val.keys()) {\n          let _val = val.get(key);\n          if (_val == null) {\n            _val = map.$__schemaType._castNullish(_val);\n          } else {\n            _val = map.$__schemaType.cast(_val, doc, true, null, { path: path + '.' + key });\n          }\n          map.$init(key, _val);\n        }\n      } else {\n        for (const key of Object.keys(val)) {\n          let _val = val[key];\n          if (_val == null) {\n            _val = map.$__schemaType._castNullish(_val);\n          } else {\n            _val = map.$__schemaType.cast(_val, doc, true, null, { path: path + '.' + key });\n          }\n          map.$init(key, _val);\n        }\n      }\n\n      return map;\n    }\n\n    return new MongooseMap(val, path, doc, this.$__schemaType);\n  }\n\n  clone() {\n    const schematype = super.clone();\n\n    if (this.$__schemaType != null) {\n      schematype.$__schemaType = this.$__schemaType.clone();\n    }\n    return schematype;\n  }\n}\n\nMap.prototype.OptionsConstructor = SchemaMapOptions;\n\nMap.defaultOptions = {};\n\nmodule.exports = Map;\n"]},"metadata":{},"sourceType":"script"}