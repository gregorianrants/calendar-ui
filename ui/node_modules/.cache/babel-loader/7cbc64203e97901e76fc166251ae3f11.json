{"ast":null,"code":"'use strict';\n\nconst PromiseProvider = require('../promise_provider');\n\nconst immediate = require('./immediate');\n\nconst emittedSymbol = Symbol('mongoose:emitted');\n\nmodule.exports = function promiseOrCallback(callback, fn, ee, Promise) {\n  if (typeof callback === 'function') {\n    return fn(function (error) {\n      if (error != null) {\n        if (ee != null && ee.listeners != null && ee.listeners('error').length > 0 && !error[emittedSymbol]) {\n          error[emittedSymbol] = true;\n          ee.emit('error', error);\n        }\n\n        try {\n          callback(error);\n        } catch (error) {\n          return immediate(() => {\n            throw error;\n          });\n        }\n\n        return;\n      }\n\n      callback.apply(this, arguments);\n    });\n  }\n\n  Promise = Promise || PromiseProvider.get();\n  return new Promise((resolve, reject) => {\n    fn(function (error, res) {\n      if (error != null) {\n        if (ee != null && ee.listeners != null && ee.listeners('error').length > 0 && !error[emittedSymbol]) {\n          error[emittedSymbol] = true;\n          ee.emit('error', error);\n        }\n\n        return reject(error);\n      }\n\n      if (arguments.length > 2) {\n        return resolve(Array.prototype.slice.call(arguments, 1));\n      }\n\n      resolve(res);\n    });\n  });\n};","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/helpers/promiseOrCallback.js"],"names":["PromiseProvider","require","immediate","emittedSymbol","Symbol","module","exports","promiseOrCallback","callback","fn","ee","Promise","error","listeners","length","emit","apply","arguments","get","resolve","reject","res","Array","prototype","slice","call"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,qBAAD,CAA/B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AAEA,MAAME,aAAa,GAAGC,MAAM,CAAC,kBAAD,CAA5B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,iBAAT,CAA2BC,QAA3B,EAAqCC,EAArC,EAAyCC,EAAzC,EAA6CC,OAA7C,EAAsD;AACrE,MAAI,OAAOH,QAAP,KAAoB,UAAxB,EAAoC;AAClC,WAAOC,EAAE,CAAC,UAASG,KAAT,EAAgB;AACxB,UAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,YAAIF,EAAE,IAAI,IAAN,IAAcA,EAAE,CAACG,SAAH,IAAgB,IAA9B,IAAsCH,EAAE,CAACG,SAAH,CAAa,OAAb,EAAsBC,MAAtB,GAA+B,CAArE,IAA0E,CAACF,KAAK,CAACT,aAAD,CAApF,EAAqG;AACnGS,UAAAA,KAAK,CAACT,aAAD,CAAL,GAAuB,IAAvB;AACAO,UAAAA,EAAE,CAACK,IAAH,CAAQ,OAAR,EAAiBH,KAAjB;AACD;;AACD,YAAI;AACFJ,UAAAA,QAAQ,CAACI,KAAD,CAAR;AACD,SAFD,CAEE,OAAOA,KAAP,EAAc;AACd,iBAAOV,SAAS,CAAC,MAAM;AACrB,kBAAMU,KAAN;AACD,WAFe,CAAhB;AAGD;;AACD;AACD;;AACDJ,MAAAA,QAAQ,CAACQ,KAAT,CAAe,IAAf,EAAqBC,SAArB;AACD,KAhBQ,CAAT;AAiBD;;AAEDN,EAAAA,OAAO,GAAGA,OAAO,IAAIX,eAAe,CAACkB,GAAhB,EAArB;AAEA,SAAO,IAAIP,OAAJ,CAAY,CAACQ,OAAD,EAAUC,MAAV,KAAqB;AACtCX,IAAAA,EAAE,CAAC,UAASG,KAAT,EAAgBS,GAAhB,EAAqB;AACtB,UAAIT,KAAK,IAAI,IAAb,EAAmB;AACjB,YAAIF,EAAE,IAAI,IAAN,IAAcA,EAAE,CAACG,SAAH,IAAgB,IAA9B,IAAsCH,EAAE,CAACG,SAAH,CAAa,OAAb,EAAsBC,MAAtB,GAA+B,CAArE,IAA0E,CAACF,KAAK,CAACT,aAAD,CAApF,EAAqG;AACnGS,UAAAA,KAAK,CAACT,aAAD,CAAL,GAAuB,IAAvB;AACAO,UAAAA,EAAE,CAACK,IAAH,CAAQ,OAAR,EAAiBH,KAAjB;AACD;;AACD,eAAOQ,MAAM,CAACR,KAAD,CAAb;AACD;;AACD,UAAIK,SAAS,CAACH,MAAV,GAAmB,CAAvB,EAA0B;AACxB,eAAOK,OAAO,CAACG,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BR,SAA3B,EAAsC,CAAtC,CAAD,CAAd;AACD;;AACDE,MAAAA,OAAO,CAACE,GAAD,CAAP;AACD,KAZC,CAAF;AAaD,GAdM,CAAP;AAeD,CAtCD","sourcesContent":["'use strict';\n\nconst PromiseProvider = require('../promise_provider');\nconst immediate = require('./immediate');\n\nconst emittedSymbol = Symbol('mongoose:emitted');\n\nmodule.exports = function promiseOrCallback(callback, fn, ee, Promise) {\n  if (typeof callback === 'function') {\n    return fn(function(error) {\n      if (error != null) {\n        if (ee != null && ee.listeners != null && ee.listeners('error').length > 0 && !error[emittedSymbol]) {\n          error[emittedSymbol] = true;\n          ee.emit('error', error);\n        }\n        try {\n          callback(error);\n        } catch (error) {\n          return immediate(() => {\n            throw error;\n          });\n        }\n        return;\n      }\n      callback.apply(this, arguments);\n    });\n  }\n\n  Promise = Promise || PromiseProvider.get();\n\n  return new Promise((resolve, reject) => {\n    fn(function(error, res) {\n      if (error != null) {\n        if (ee != null && ee.listeners != null && ee.listeners('error').length > 0 && !error[emittedSymbol]) {\n          error[emittedSymbol] = true;\n          ee.emit('error', error);\n        }\n        return reject(error);\n      }\n      if (arguments.length > 2) {\n        return resolve(Array.prototype.slice.call(arguments, 1));\n      }\n      resolve(res);\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"script"}