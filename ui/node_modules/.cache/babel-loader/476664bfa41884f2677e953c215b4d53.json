{"ast":null,"code":"'use strict';\n\nconst CastError = require('../error/cast');\n/*!\n * Given a value, cast it to a boolean, or throw a `CastError` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @param {String} [path] optional the path to set on the CastError\n * @return {Boolean|null|undefined}\n * @throws {CastError} if `value` is not one of the allowed values\n * @api private\n */\n\n\nmodule.exports = function castBoolean(value, path) {\n  if (module.exports.convertToTrue.has(value)) {\n    return true;\n  }\n\n  if (module.exports.convertToFalse.has(value)) {\n    return false;\n  }\n\n  if (value == null) {\n    return value;\n  }\n\n  throw new CastError('boolean', value, path);\n};\n\nmodule.exports.convertToTrue = new Set([true, 'true', 1, '1', 'yes']);\nmodule.exports.convertToFalse = new Set([false, 'false', 0, '0', 'no']);","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/cast/boolean.js"],"names":["CastError","require","module","exports","castBoolean","value","path","convertToTrue","has","convertToFalse","Set"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,IAA5B,EAAkC;AACjD,MAAIJ,MAAM,CAACC,OAAP,CAAeI,aAAf,CAA6BC,GAA7B,CAAiCH,KAAjC,CAAJ,EAA6C;AAC3C,WAAO,IAAP;AACD;;AACD,MAAIH,MAAM,CAACC,OAAP,CAAeM,cAAf,CAA8BD,GAA9B,CAAkCH,KAAlC,CAAJ,EAA8C;AAC5C,WAAO,KAAP;AACD;;AAED,MAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,WAAOA,KAAP;AACD;;AAED,QAAM,IAAIL,SAAJ,CAAc,SAAd,EAAyBK,KAAzB,EAAgCC,IAAhC,CAAN;AACD,CAbD;;AAeAJ,MAAM,CAACC,OAAP,CAAeI,aAAf,GAA+B,IAAIG,GAAJ,CAAQ,CAAC,IAAD,EAAO,MAAP,EAAe,CAAf,EAAkB,GAAlB,EAAuB,KAAvB,CAAR,CAA/B;AACAR,MAAM,CAACC,OAAP,CAAeM,cAAf,GAAgC,IAAIC,GAAJ,CAAQ,CAAC,KAAD,EAAQ,OAAR,EAAiB,CAAjB,EAAoB,GAApB,EAAyB,IAAzB,CAAR,CAAhC","sourcesContent":["'use strict';\n\nconst CastError = require('../error/cast');\n\n/*!\n * Given a value, cast it to a boolean, or throw a `CastError` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @param {String} [path] optional the path to set on the CastError\n * @return {Boolean|null|undefined}\n * @throws {CastError} if `value` is not one of the allowed values\n * @api private\n */\n\nmodule.exports = function castBoolean(value, path) {\n  if (module.exports.convertToTrue.has(value)) {\n    return true;\n  }\n  if (module.exports.convertToFalse.has(value)) {\n    return false;\n  }\n\n  if (value == null) {\n    return value;\n  }\n\n  throw new CastError('boolean', value, path);\n};\n\nmodule.exports.convertToTrue = new Set([true, 'true', 1, '1', 'yes']);\nmodule.exports.convertToFalse = new Set([false, 'false', 0, '0', 'no']);\n"]},"metadata":{},"sourceType":"script"}