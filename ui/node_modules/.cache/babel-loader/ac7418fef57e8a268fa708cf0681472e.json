{"ast":null,"code":"'use strict';\n/*!\n * ignore\n */\n\nmodule.exports = function cleanModifiedSubpaths(doc, path, options) {\n  options = options || {};\n  const skipDocArrays = options.skipDocArrays;\n  let deleted = 0;\n\n  if (!doc) {\n    return deleted;\n  }\n\n  for (const modifiedPath of Object.keys(doc.$__.activePaths.states.modify)) {\n    if (skipDocArrays) {\n      const schemaType = doc.$__schema.path(modifiedPath);\n\n      if (schemaType && schemaType.$isMongooseDocumentArray) {\n        continue;\n      }\n    }\n\n    if (modifiedPath.startsWith(path + '.')) {\n      delete doc.$__.activePaths.states.modify[modifiedPath];\n      ++deleted;\n    }\n  }\n\n  return deleted;\n};","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/helpers/document/cleanModifiedSubpaths.js"],"names":["module","exports","cleanModifiedSubpaths","doc","path","options","skipDocArrays","deleted","modifiedPath","Object","keys","$__","activePaths","states","modify","schemaType","$__schema","$isMongooseDocumentArray","startsWith"],"mappings":"AAAA;AAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,qBAAT,CAA+BC,GAA/B,EAAoCC,IAApC,EAA0CC,OAA1C,EAAmD;AAClEA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,QAAMC,aAAa,GAAGD,OAAO,CAACC,aAA9B;AAEA,MAAIC,OAAO,GAAG,CAAd;;AACA,MAAI,CAACJ,GAAL,EAAU;AACR,WAAOI,OAAP;AACD;;AACD,OAAK,MAAMC,YAAX,IAA2BC,MAAM,CAACC,IAAP,CAAYP,GAAG,CAACQ,GAAJ,CAAQC,WAAR,CAAoBC,MAApB,CAA2BC,MAAvC,CAA3B,EAA2E;AACzE,QAAIR,aAAJ,EAAmB;AACjB,YAAMS,UAAU,GAAGZ,GAAG,CAACa,SAAJ,CAAcZ,IAAd,CAAmBI,YAAnB,CAAnB;;AACA,UAAIO,UAAU,IAAIA,UAAU,CAACE,wBAA7B,EAAuD;AACrD;AACD;AACF;;AACD,QAAIT,YAAY,CAACU,UAAb,CAAwBd,IAAI,GAAG,GAA/B,CAAJ,EAAyC;AACvC,aAAOD,GAAG,CAACQ,GAAJ,CAAQC,WAAR,CAAoBC,MAApB,CAA2BC,MAA3B,CAAkCN,YAAlC,CAAP;AACA,QAAED,OAAF;AACD;AACF;;AACD,SAAOA,OAAP;AACD,CArBD","sourcesContent":["'use strict';\n\n/*!\n * ignore\n */\n\nmodule.exports = function cleanModifiedSubpaths(doc, path, options) {\n  options = options || {};\n  const skipDocArrays = options.skipDocArrays;\n\n  let deleted = 0;\n  if (!doc) {\n    return deleted;\n  }\n  for (const modifiedPath of Object.keys(doc.$__.activePaths.states.modify)) {\n    if (skipDocArrays) {\n      const schemaType = doc.$__schema.path(modifiedPath);\n      if (schemaType && schemaType.$isMongooseDocumentArray) {\n        continue;\n      }\n    }\n    if (modifiedPath.startsWith(path + '.')) {\n      delete doc.$__.activePaths.states.modify[modifiedPath];\n      ++deleted;\n    }\n  }\n  return deleted;\n};\n"]},"metadata":{},"sourceType":"script"}