{"ast":null,"code":"/* eslint-env browser */\n'use strict';\n\nrequire('./driver').set(require('./drivers/browser'));\n\nconst DocumentProvider = require('./document_provider.js');\n\nconst PromiseProvider = require('./promise_provider');\n\nDocumentProvider.setBrowser(true);\n/**\n * The Mongoose [Promise](#promise_Promise) constructor.\n *\n * @method Promise\n * @api public\n */\n\nObject.defineProperty(exports, 'Promise', {\n  get: function () {\n    return PromiseProvider.get();\n  },\n  set: function (lib) {\n    PromiseProvider.set(lib);\n  }\n});\n/**\n * Storage layer for mongoose promises\n *\n * @method PromiseProvider\n * @api public\n */\n\nexports.PromiseProvider = PromiseProvider;\n/**\n * The [MongooseError](#error_MongooseError) constructor.\n *\n * @method Error\n * @api public\n */\n\nexports.Error = require('./error/index');\n/**\n * The Mongoose [Schema](#schema_Schema) constructor\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *     const Schema = mongoose.Schema;\n *     const CatSchema = new Schema(..);\n *\n * @method Schema\n * @api public\n */\n\nexports.Schema = require('./schema');\n/**\n * The various Mongoose Types.\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *     const array = mongoose.Types.Array;\n *\n * ####Types:\n *\n * - [Array](/docs/schematypes.html#arrays)\n * - [Buffer](/docs/schematypes.html#buffers)\n * - [Embedded](/docs/schematypes.html#schemas)\n * - [DocumentArray](/docs/api/documentarraypath.html)\n * - [Decimal128](/docs/api.html#mongoose_Mongoose-Decimal128)\n * - [ObjectId](/docs/schematypes.html#objectids)\n * - [Map](/docs/schematypes.html#maps)\n * - [Subdocument](/docs/schematypes.html#schemas)\n *\n * Using this exposed access to the `ObjectId` type, we can construct ids on demand.\n *\n *     const ObjectId = mongoose.Types.ObjectId;\n *     const id1 = new ObjectId;\n *\n * @property Types\n * @api public\n */\n\nexports.Types = require('./types');\n/**\n * The Mongoose [VirtualType](#virtualtype_VirtualType) constructor\n *\n * @method VirtualType\n * @api public\n */\n\nexports.VirtualType = require('./virtualtype');\n/**\n * The various Mongoose SchemaTypes.\n *\n * ####Note:\n *\n * _Alias of mongoose.Schema.Types for backwards compatibility._\n *\n * @property SchemaTypes\n * @see Schema.SchemaTypes #schema_Schema.Types\n * @api public\n */\n\nexports.SchemaType = require('./schematype.js');\n/**\n * Internal utils\n *\n * @property utils\n * @api private\n */\n\nexports.utils = require('./utils.js');\n/**\n * The Mongoose browser [Document](/api/document.html) constructor.\n *\n * @method Document\n * @api public\n */\n\nexports.Document = DocumentProvider();\n/**\n * Return a new browser model. In the browser, a model is just\n * a simplified document with a schema - it does **not** have\n * functions like `findOne()`, etc.\n *\n * @method model\n * @api public\n * @param {String} name\n * @param {Schema} schema\n * @return Class\n */\n\nexports.model = function (name, schema) {\n  class Model extends exports.Document {\n    constructor(obj, fields) {\n      super(obj, schema, fields);\n    }\n\n  }\n\n  Model.modelName = name;\n  return Model;\n};\n/*!\n * Module exports.\n */\n\n\nif (typeof window !== 'undefined') {\n  window.mongoose = module.exports;\n  window.Buffer = Buffer;\n}","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/browser.js"],"names":["require","set","DocumentProvider","PromiseProvider","setBrowser","Object","defineProperty","exports","get","lib","Error","Schema","Types","VirtualType","SchemaType","utils","Document","model","name","schema","Model","constructor","obj","fields","modelName","window","mongoose","module","Buffer"],"mappings":"AAAA;AAEA;;AAEAA,OAAO,CAAC,UAAD,CAAP,CAAoBC,GAApB,CAAwBD,OAAO,CAAC,mBAAD,CAA/B;;AAEA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,wBAAD,CAAhC;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,oBAAD,CAA/B;;AAEAE,gBAAgB,CAACE,UAAjB,CAA4B,IAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,SAA/B,EAA0C;AACxCC,EAAAA,GAAG,EAAE,YAAW;AACd,WAAOL,eAAe,CAACK,GAAhB,EAAP;AACD,GAHuC;AAIxCP,EAAAA,GAAG,EAAE,UAASQ,GAAT,EAAc;AACjBN,IAAAA,eAAe,CAACF,GAAhB,CAAoBQ,GAApB;AACD;AANuC,CAA1C;AASA;AACA;AACA;AACA;AACA;AACA;;AAEAF,OAAO,CAACJ,eAAR,GAA0BA,eAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAI,OAAO,CAACG,KAAR,GAAgBV,OAAO,CAAC,eAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAO,OAAO,CAACI,MAAR,GAAiBX,OAAO,CAAC,UAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAO,OAAO,CAACK,KAAR,GAAgBZ,OAAO,CAAC,SAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAO,OAAO,CAACM,WAAR,GAAsBb,OAAO,CAAC,eAAD,CAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAO,OAAO,CAACO,UAAR,GAAqBd,OAAO,CAAC,iBAAD,CAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAO,OAAO,CAACQ,KAAR,GAAgBf,OAAO,CAAC,YAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAO,OAAO,CAACS,QAAR,GAAmBd,gBAAgB,EAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAK,OAAO,CAACU,KAAR,GAAgB,UAASC,IAAT,EAAeC,MAAf,EAAuB;AACrC,QAAMC,KAAN,SAAoBb,OAAO,CAACS,QAA5B,CAAqC;AACnCK,IAAAA,WAAW,CAACC,GAAD,EAAMC,MAAN,EAAc;AACvB,YAAMD,GAAN,EAAWH,MAAX,EAAmBI,MAAnB;AACD;;AAHkC;;AAKrCH,EAAAA,KAAK,CAACI,SAAN,GAAkBN,IAAlB;AAEA,SAAOE,KAAP;AACD,CATD;AAWA;AACA;AACA;;;AAEA,IAAI,OAAOK,MAAP,KAAkB,WAAtB,EAAmC;AACjCA,EAAAA,MAAM,CAACC,QAAP,GAAkBC,MAAM,CAACpB,OAAzB;AACAkB,EAAAA,MAAM,CAACG,MAAP,GAAgBA,MAAhB;AACD","sourcesContent":["/* eslint-env browser */\n\n'use strict';\n\nrequire('./driver').set(require('./drivers/browser'));\n\nconst DocumentProvider = require('./document_provider.js');\nconst PromiseProvider = require('./promise_provider');\n\nDocumentProvider.setBrowser(true);\n\n/**\n * The Mongoose [Promise](#promise_Promise) constructor.\n *\n * @method Promise\n * @api public\n */\n\nObject.defineProperty(exports, 'Promise', {\n  get: function() {\n    return PromiseProvider.get();\n  },\n  set: function(lib) {\n    PromiseProvider.set(lib);\n  }\n});\n\n/**\n * Storage layer for mongoose promises\n *\n * @method PromiseProvider\n * @api public\n */\n\nexports.PromiseProvider = PromiseProvider;\n\n/**\n * The [MongooseError](#error_MongooseError) constructor.\n *\n * @method Error\n * @api public\n */\n\nexports.Error = require('./error/index');\n\n/**\n * The Mongoose [Schema](#schema_Schema) constructor\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *     const Schema = mongoose.Schema;\n *     const CatSchema = new Schema(..);\n *\n * @method Schema\n * @api public\n */\n\nexports.Schema = require('./schema');\n\n/**\n * The various Mongoose Types.\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *     const array = mongoose.Types.Array;\n *\n * ####Types:\n *\n * - [Array](/docs/schematypes.html#arrays)\n * - [Buffer](/docs/schematypes.html#buffers)\n * - [Embedded](/docs/schematypes.html#schemas)\n * - [DocumentArray](/docs/api/documentarraypath.html)\n * - [Decimal128](/docs/api.html#mongoose_Mongoose-Decimal128)\n * - [ObjectId](/docs/schematypes.html#objectids)\n * - [Map](/docs/schematypes.html#maps)\n * - [Subdocument](/docs/schematypes.html#schemas)\n *\n * Using this exposed access to the `ObjectId` type, we can construct ids on demand.\n *\n *     const ObjectId = mongoose.Types.ObjectId;\n *     const id1 = new ObjectId;\n *\n * @property Types\n * @api public\n */\nexports.Types = require('./types');\n\n/**\n * The Mongoose [VirtualType](#virtualtype_VirtualType) constructor\n *\n * @method VirtualType\n * @api public\n */\nexports.VirtualType = require('./virtualtype');\n\n/**\n * The various Mongoose SchemaTypes.\n *\n * ####Note:\n *\n * _Alias of mongoose.Schema.Types for backwards compatibility._\n *\n * @property SchemaTypes\n * @see Schema.SchemaTypes #schema_Schema.Types\n * @api public\n */\n\nexports.SchemaType = require('./schematype.js');\n\n/**\n * Internal utils\n *\n * @property utils\n * @api private\n */\n\nexports.utils = require('./utils.js');\n\n/**\n * The Mongoose browser [Document](/api/document.html) constructor.\n *\n * @method Document\n * @api public\n */\nexports.Document = DocumentProvider();\n\n/**\n * Return a new browser model. In the browser, a model is just\n * a simplified document with a schema - it does **not** have\n * functions like `findOne()`, etc.\n *\n * @method model\n * @api public\n * @param {String} name\n * @param {Schema} schema\n * @return Class\n */\nexports.model = function(name, schema) {\n  class Model extends exports.Document {\n    constructor(obj, fields) {\n      super(obj, schema, fields);\n    }\n  }\n  Model.modelName = name;\n\n  return Model;\n};\n\n/*!\n * Module exports.\n */\n\nif (typeof window !== 'undefined') {\n  window.mongoose = module.exports;\n  window.Buffer = Buffer;\n}\n"]},"metadata":{},"sourceType":"script"}