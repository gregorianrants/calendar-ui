{"ast":null,"code":"const mongoose = require(\"mongoose\");\n\nconst cuid = require(\"cuid\");\n/*const addGcalEvent = require('./../googleCalendar')*/\n\n\nconst setHours = require(\"date-fns/setHours\");\n\nfunction buildSchema(mongoose) {\n  const addressSchema = new mongoose.Schema({\n    _id: {\n      type: String,\n      default: cuid\n    },\n    value: {\n      type: String\n    }\n  });\n  const operativesSchema = new mongoose.Schema({\n    _id: {\n      type: String,\n      default: cuid\n    },\n    value: {\n      type: String\n    }\n  });\n  const chargesSchema = new mongoose.Schema({\n    hourlyRate: {\n      type: Number\n    },\n    fuelCharge: {\n      type: Number\n    },\n    travelTime: {\n      type: Number\n    }\n  });\n  const jobSchema = new mongoose.Schema({\n    _id: {\n      type: String,\n      default: cuid\n    },\n    start: {\n      type: Date,\n      required: true\n    },\n    end: {\n      type: Date,\n      required: true\n    },\n    customer: {\n      name: {\n        type: String,\n        validate: {\n          validator: v => {\n            console.log(\"v\", v);\n            return v.length > 4;\n          },\n          message: `name must have more than 4 characters`\n        }\n      },\n      mobile: {\n        type: String\n      },\n      email: {\n        type: String\n      }\n    },\n    charges: chargesSchema,\n    operatives: [operativesSchema],\n    items: String,\n    addresses: [addressSchema]\n  });\n  return jobSchema;\n}\n\nlet Job = mongoose.model(\"Job\", buildSchema(mongoose), \"jobs\");\n\nasync function list({\n  from,\n  to\n}) {\n  let data = await Job.find({\n    start: {\n      $gte: from\n    },\n    end: {\n      $lte: to\n    }\n  });\n  return data;\n}\n\nasync function create(data) {\n  let job = new Job(data);\n  await job.save(); //TODO add some validation start must be before end\n\n  return job;\n}\n\nasync function get(id) {\n  const job = await Job.findById(id);\n  return job;\n}\n\nasync function remove(id) {\n  let data = await Job.deleteOne({\n    _id: id\n  });\n  return data;\n}\n\nasync function edit(_id, change) {\n  const product = await get(_id);\n  Object.keys(change).forEach(function (key) {\n    product[key] = change[key];\n  });\n  await product.save();\n  return product;\n}\n\nasync function resetData(data) {\n  await Job.deleteMany();\n  console.log(data);\n  await Job.insertMany(data);\n}\n\nmodule.exports = {\n  list,\n  create,\n  get,\n  remove,\n  resetData,\n  edit,\n  jobSchema\n};\nexports.Job = Job;","map":{"version":3,"sources":["/home/gregorian/calendar-ui/api/model/job.js"],"names":["mongoose","require","cuid","setHours","buildSchema","addressSchema","Schema","_id","type","String","default","value","operativesSchema","chargesSchema","hourlyRate","Number","fuelCharge","travelTime","jobSchema","start","Date","required","end","customer","name","validate","validator","v","console","log","length","message","mobile","email","charges","operatives","items","addresses","Job","model","list","from","to","data","find","$gte","$lte","create","job","save","get","id","findById","remove","deleteOne","edit","change","product","Object","keys","forEach","key","resetData","deleteMany","insertMany","module","exports"],"mappings":"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","sourcesContent":["const mongoose = require(\"mongoose\");\nconst cuid = require(\"cuid\");\n/*const addGcalEvent = require('./../googleCalendar')*/\n\nconst setHours = require(\"date-fns/setHours\");\n\nfunction buildSchema(mongoose){\n  const addressSchema = new mongoose.Schema({\n    _id: {\n      type: String,\n      default: cuid,\n    },\n    value: {\n      type: String,\n    },\n  });\n  \n  const operativesSchema = new mongoose.Schema({\n    _id: {\n      type: String,\n      default: cuid,\n    },\n    value: {\n      type: String,\n    },\n  });\n  \n  const chargesSchema = new mongoose.Schema({\n    hourlyRate: { type: Number },\n    fuelCharge: { type: Number },\n    travelTime: { type: Number },\n  });\n  \n  const jobSchema = new mongoose.Schema({\n    _id: {\n      type: String,\n      default: cuid,\n    },\n    start: {\n      type: Date,\n      required: true,\n    },\n    end: {\n      type: Date,\n      required: true,\n    },\n    customer: {\n      name: {\n        type: String,\n        validate: {\n          validator: (v) => {\n            console.log(\"v\", v);\n            return v.length > 4;\n          },\n          message: `name must have more than 4 characters`,\n        },\n      },\n      mobile: { type: String },\n      email: { type: String },\n    },\n    charges: chargesSchema,\n    operatives: [operativesSchema],\n    items: String,\n    addresses: [addressSchema],\n  });\n\n  return jobSchema\n}\n\n\n\nlet Job = mongoose.model(\"Job\", buildSchema(mongoose), \"jobs\");\n\nasync function list({ from, to }) {\n  let data = await Job.find({\n    start: { $gte: from },\n    end: { $lte: to },\n  });\n  return data;\n}\n\nasync function create(data) {\n  let job = new Job(data);\n  await job.save(); //TODO add some validation start must be before end\n  return job;\n}\n\nasync function get(id) {\n  const job = await Job.findById(id);\n  return job;\n}\n\nasync function remove(id) {\n  let data = await Job.deleteOne({ _id: id });\n  return data;\n}\n\nasync function edit(_id, change) {\n  const product = await get(_id);\n  Object.keys(change).forEach(function (key) {\n    product[key] = change[key];\n  });\n  await product.save();\n  return product;\n}\n\nasync function resetData(data) {\n  await Job.deleteMany();\n  console.log(data);\n  await Job.insertMany(data);\n}\n\nmodule.exports = {\n  list,\n  create,\n  get,\n  remove,\n  resetData,\n  edit,\n  jobSchema,\n};\n\nexports.Job = Job;\n"]},"metadata":{},"sourceType":"script"}