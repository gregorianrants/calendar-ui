{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { weekContaining, setTimeDayStart, setTimeDayEnd } from \"../../utilities/dateUtilities\";\nimport { addDays } from \"date-fns\";\nimport { fetchDays } from \"../../Model/Jobs\";\nexport function getWeek(date, increment = 0) {\n  const currentDate = addDays(date, increment * 7);\n  const days = weekContaining(currentDate);\n  const firstDay = setTimeDayStart(new Date(days[0])); //TODO\n\n  const lastDay = setTimeDayEnd(new Date(days[days.length - 1])); //TODO\n\n  return {\n    currentDate,\n    days,\n    firstDay,\n    lastDay\n  };\n}\nconst initialState = { ...getWeek(new Date()),\n  events: []\n};\nconst calendarSlice = createSlice({\n  name: \"calendar\",\n  initialState,\n  reducers: {\n    dataLoaded(state, action) {\n      state.events = action.payload;\n    }\n\n  }\n});\nconst {\n  dataLoaded\n} = calendarSlice.actions;\nexport const fetchData = (dispatch, getState) => {\n  const state = getState();\n  console.log(state.calendar.firstDay);\n  fetchDays(state.calendar.firstDay.toString(), state.calendar.lastDay.toString()).then(data => {\n    console.log(data);\n    dispatch(dataLoaded([...data])); //TODO have a look at what we are doing here what if there is no data\n  }).catch(console.error);\n};\nexport default calendarSlice.reducer;","map":{"version":3,"sources":["/home/gregorian/calendar-ui/ui/src/components/Calendar/calendarSlice.js"],"names":["createSlice","weekContaining","setTimeDayStart","setTimeDayEnd","addDays","fetchDays","getWeek","date","increment","currentDate","days","firstDay","Date","lastDay","length","initialState","events","calendarSlice","name","reducers","dataLoaded","state","action","payload","actions","fetchData","dispatch","getState","console","log","calendar","toString","then","data","catch","error","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SACEC,cADF,EAEEC,eAFF,EAGEC,aAHF,QAIO,+BAJP;AAKA,SAASC,OAAT,QAAwB,UAAxB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,SAAS,GAAG,CAAnC,EAAsC;AAC3C,QAAMC,WAAW,GAAGL,OAAO,CAACG,IAAD,EAAOC,SAAS,GAAG,CAAnB,CAA3B;AACA,QAAME,IAAI,GAAGT,cAAc,CAACQ,WAAD,CAA3B;AACA,QAAME,QAAQ,GAAGT,eAAe,CAAC,IAAIU,IAAJ,CAASF,IAAI,CAAC,CAAD,CAAb,CAAD,CAAhC,CAH2C,CAGU;;AACrD,QAAMG,OAAO,GAAGV,aAAa,CAAC,IAAIS,IAAJ,CAASF,IAAI,CAACA,IAAI,CAACI,MAAL,GAAc,CAAf,CAAb,CAAD,CAA7B,CAJ2C,CAIqB;;AAChE,SAAO;AACLL,IAAAA,WADK;AAELC,IAAAA,IAFK;AAGLC,IAAAA,QAHK;AAILE,IAAAA;AAJK,GAAP;AAMD;AAED,MAAME,YAAY,GAAG,EACnB,GAAGT,OAAO,CAAC,IAAIM,IAAJ,EAAD,CADS;AAEnBI,EAAAA,MAAM,EAAE;AAFW,CAArB;AAKA,MAAMC,aAAa,GAAGjB,WAAW,CAAC;AAChCkB,EAAAA,IAAI,EAAE,UAD0B;AAEhCH,EAAAA,YAFgC;AAGhCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACxBD,MAAAA,KAAK,CAACL,MAAN,GAAeM,MAAM,CAACC,OAAtB;AACD;;AAHO;AAHsB,CAAD,CAAjC;AAUA,MAAM;AAAEH,EAAAA;AAAF,IAAiBH,aAAa,CAACO,OAArC;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC/C,QAAMN,KAAK,GAAGM,QAAQ,EAAtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACS,QAAN,CAAenB,QAA3B;AACAN,EAAAA,SAAS,CAACgB,KAAK,CAACS,QAAN,CAAenB,QAAf,CAAwBoB,QAAxB,EAAD,EAAqCV,KAAK,CAACS,QAAN,CAAejB,OAAf,CAAuBkB,QAAvB,EAArC,CAAT,CACGC,IADH,CACSC,IAAD,IAAU;AACdL,IAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACAP,IAAAA,QAAQ,CAACN,UAAU,CAAC,CAAC,GAAGa,IAAJ,CAAD,CAAX,CAAR,CAFc,CAEmB;AAClC,GAJH,EAKGC,KALH,CAKSN,OAAO,CAACO,KALjB;AAMD,CATM;AAWP,eAAelB,aAAa,CAACmB,OAA7B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport {\n  weekContaining,\n  setTimeDayStart,\n  setTimeDayEnd,\n} from \"../../utilities/dateUtilities\";\nimport { addDays } from \"date-fns\";\nimport { fetchDays } from \"../../Model/Jobs\";\n\nexport function getWeek(date, increment = 0) {\n  const currentDate = addDays(date, increment * 7);\n  const days = weekContaining(currentDate);\n  const firstDay = setTimeDayStart(new Date(days[0])); //TODO\n  const lastDay = setTimeDayEnd(new Date(days[days.length - 1])); //TODO\n  return {\n    currentDate,\n    days,\n    firstDay,\n    lastDay,\n  };\n}\n\nconst initialState = {\n  ...getWeek(new Date()),\n  events: [],\n};\n\nconst calendarSlice = createSlice({\n  name: \"calendar\",\n  initialState,\n  reducers: {\n    dataLoaded(state, action) {\n      state.events = action.payload;\n    },\n  },\n});\n\nconst { dataLoaded } = calendarSlice.actions;\n\nexport const fetchData = (dispatch, getState) => {\n  const state = getState();\n  console.log(state.calendar.firstDay);\n  fetchDays(state.calendar.firstDay.toString(), state.calendar.lastDay.toString())\n    .then((data) => {\n      console.log(data);\n      dispatch(dataLoaded([...data])); //TODO have a look at what we are doing here what if there is no data\n    })\n    .catch(console.error);\n};\n\nexport default calendarSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}