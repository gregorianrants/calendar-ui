{"ast":null,"code":"const Job = require(\"./../model/job\");\n\nconst dateUtils = require(\"../dateUtilities/dateUtilities\"); //TODO share between api and react app\n//const {notify} = require('../sockets')\n\n\nconst autoCatch = require(\"../lib/autoCatch\");\n\nconst {\n  nextDay\n} = require(\"date-fns\");\n\nconst AppError = require(\"./../errorUtilities/AppError\");\n\nasync function getJobs(req, res) {\n  const {\n    monday,\n    sunday\n  } = dateUtils.weekBoundaries(dateUtils.currentDateTime()); //todo need to set monday to start of day and sunday to end of day\n\n  const {\n    from = monday,\n    to = sunday\n  } = req.query;\n  let data = await Job.list({\n    from,\n    to\n  });\n  res.status(200).json({\n    status: \"success\",\n    data: data\n  });\n}\n\nasync function createJob(req, res) {\n  let job = await Job.create(req.body); //notify()\n\n  res.status(200).json({\n    status: \"success\",\n    data: job\n  });\n}\n\nasync function getJob(req, res, next) {\n  const job = await Job.get(req.params.id);\n\n  if (!job) {\n    const error = new AppError(\"No job found with that id\", 404);\n    return next(error);\n  }\n\n  res.status(200).json({\n    status: \"success\",\n    data: job\n  });\n}\n\nasync function deleteJob(req, res) {\n  const id = req.params.id;\n  let data = await Job.remove(id);\n  res.status(200).json({\n    status: \"success\",\n    data: data\n  });\n}\n\nasync function editJob(req, res) {\n  const id = req.params.id;\n  const data = await Job.edit(id, req.body);\n  console.log(req.body);\n  res.status(200).json({\n    status: \"success\",\n    data: data\n  });\n}\n\nmodule.exports = autoCatch({\n  getJobs,\n  createJob,\n  getJob,\n  deleteJob,\n  editJob\n});","map":{"version":3,"sources":["/home/gregorian/calendar-ui/api/controllers/jobsController.js"],"names":["Job","require","dateUtils","autoCatch","nextDay","AppError","getJobs","req","res","monday","sunday","weekBoundaries","currentDateTime","from","to","query","data","list","status","json","createJob","job","create","body","getJob","next","get","params","id","error","deleteJob","remove","editJob","edit","console","log","module","exports"],"mappings":"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","sourcesContent":["const Job = require(\"./../model/job\");\nconst dateUtils = require(\"../dateUtilities/dateUtilities\"); //TODO share between api and react app\n//const {notify} = require('../sockets')\nconst autoCatch = require(\"../lib/autoCatch\");\nconst { nextDay } = require(\"date-fns\");\nconst AppError = require(\"./../errorUtilities/AppError\");\n\nasync function getJobs(req, res) {\n  const { monday, sunday } = dateUtils.weekBoundaries(\n    dateUtils.currentDateTime()\n  );\n  //todo need to set monday to start of day and sunday to end of day\n  const { from = monday, to = sunday } = req.query;\n  let data = await Job.list({ from, to });\n  res.status(200).json({ status: \"success\", data: data });\n}\n\nasync function createJob(req, res) {\n  let job = await Job.create(req.body);\n  //notify()\n  res.status(200).json({\n    status: \"success\",\n    data: job,\n  });\n}\n\nasync function getJob(req, res, next) {\n  const job = await Job.get(req.params.id);\n\n  if (!job) {\n    const error = new AppError(\"No job found with that id\", 404);\n    return next(error);\n  }\n  res.status(200).json({ status: \"success\", data: job });\n}\n\nasync function deleteJob(req, res) {\n  const id = req.params.id;\n  let data = await Job.remove(id);\n  res.status(200).json({ status: \"success\", data: data });\n}\n\nasync function editJob(req, res) {\n  const id = req.params.id;\n  const data = await Job.edit(id, req.body);\n  console.log(req.body);\n  res.status(200).json({ status: \"success\", data: data });\n}\n\nmodule.exports = autoCatch({\n  getJobs,\n  createJob,\n  getJob,\n  deleteJob,\n  editJob,\n});\n"]},"metadata":{},"sourceType":"script"}