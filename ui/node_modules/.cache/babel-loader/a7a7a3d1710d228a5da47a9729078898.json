{"ast":null,"code":"const mongoose = require(\"mongoose\");\n\nconst cuid = require(\"cuid\");\n/*const addGcalEvent = require('./../googleCalendar')*/\n\n\nconst setHours = require(\"date-fns/setHours\");\n\nconst addressSchema = new mongoose.Schema({\n  _id: {\n    type: String,\n    default: cuid\n  },\n  value: {\n    type: String\n  }\n});\nconst operativesSchema = new mongoose.Schema({\n  _id: {\n    type: String,\n    default: cuid\n  },\n  value: {\n    type: String\n  }\n});\nconst chargesObject = {\n  hourlyRate: {\n    type: Number\n  },\n  fuelCharge: {\n    type: Number\n  },\n  travelTime: {\n    type: Number\n  }\n};\nconst chargesSchema = new mongoose.Schema(char);\nconst jobSchema = new mongoose.Schema({\n  _id: {\n    type: String,\n    default: cuid\n  },\n  start: {\n    type: Date,\n    required: true\n  },\n  end: {\n    type: Date,\n    required: true\n  },\n  customer: {\n    name: {\n      type: String,\n      validate: {\n        validator: v => {\n          console.log(\"v\", v);\n          return v.length > 4;\n        },\n        message: `name must have more than 4 characters`\n      }\n    },\n    mobile: {\n      type: String\n    },\n    email: {\n      type: String\n    }\n  },\n  charges: chargesSchema,\n  operatives: [operativesSchema],\n  items: String,\n  addresses: [addressSchema]\n});\nlet Job = mongoose.model(\"Job\", jobSchema, \"jobs\");\n\nasync function list({\n  from,\n  to\n}) {\n  let data = await Job.find({\n    start: {\n      $gte: from\n    },\n    end: {\n      $lte: to\n    }\n  });\n  return data;\n}\n\nasync function create(data) {\n  let job = new Job(data);\n  await job.save(); //TODO add some validation start must be before end\n\n  return job;\n}\n\nasync function get(id) {\n  const job = await Job.findById(id);\n  return job;\n}\n\nasync function remove(id) {\n  let data = await Job.deleteOne({\n    _id: id\n  });\n  return data;\n}\n\nasync function edit(_id, change) {\n  const product = await get(_id);\n  Object.keys(change).forEach(function (key) {\n    product[key] = change[key];\n  });\n  await product.save();\n  return product;\n}\n\nasync function resetData(data) {\n  await Job.deleteMany();\n  console.log(data);\n  await Job.insertMany(data);\n}\n\nmodule.exports = {\n  list,\n  create,\n  get,\n  remove,\n  resetData,\n  edit,\n  jobSchema\n};\nexports.Job = Job;","map":{"version":3,"sources":["/home/gregorian/calendar-ui/api/model/job.js"],"names":["mongoose","require","cuid","setHours","addressSchema","Schema","_id","type","String","default","value","operativesSchema","chargesObject","hourlyRate","Number","fuelCharge","travelTime","chargesSchema","char","jobSchema","start","Date","required","end","customer","name","validate","validator","v","console","log","length","message","mobile","email","charges","operatives","items","addresses","Job","model","list","from","to","data","find","$gte","$lte","create","job","save","get","id","findById","remove","deleteOne","edit","change","product","Object","keys","forEach","key","resetData","deleteMany","insertMany","module","exports"],"mappings":"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","sourcesContent":["const mongoose = require(\"mongoose\");\nconst cuid = require(\"cuid\");\n/*const addGcalEvent = require('./../googleCalendar')*/\n\nconst setHours = require(\"date-fns/setHours\");\n\nconst addressSchema = new mongoose.Schema({\n  _id: {\n    type: String,\n    default: cuid,\n  },\n  value: {\n    type: String,\n  },\n});\n\nconst operativesSchema = new mongoose.Schema({\n  _id: {\n    type: String,\n    default: cuid,\n  },\n  value: {\n    type: String,\n  },\n});\n\n\nconst chargesObject = {\n  hourlyRate: { type: Number },\n  fuelCharge: { type: Number },\n  travelTime: { type: Number },\n}\n\nconst chargesSchema = new mongoose.Schema(char);\n\nconst jobSchema = new mongoose.Schema({\n  _id: {\n    type: String,\n    default: cuid,\n  },\n  start: {\n    type: Date,\n    required: true,\n  },\n  end: {\n    type: Date,\n    required: true,\n  },\n  customer: {\n    name: {\n      type: String,\n      validate: {\n        validator: (v) => {\n          console.log(\"v\", v);\n          return v.length > 4;\n        },\n        message: `name must have more than 4 characters`,\n      },\n    },\n    mobile: { type: String },\n    email: { type: String },\n  },\n  charges: chargesSchema,\n  operatives: [operativesSchema],\n  items: String,\n  addresses: [addressSchema],\n});\n\nlet Job = mongoose.model(\"Job\", jobSchema, \"jobs\");\n\nasync function list({ from, to }) {\n  let data = await Job.find({\n    start: { $gte: from },\n    end: { $lte: to },\n  });\n  return data;\n}\n\nasync function create(data) {\n  let job = new Job(data);\n  await job.save(); //TODO add some validation start must be before end\n  return job;\n}\n\nasync function get(id) {\n  const job = await Job.findById(id);\n  return job;\n}\n\nasync function remove(id) {\n  let data = await Job.deleteOne({ _id: id });\n  return data;\n}\n\nasync function edit(_id, change) {\n  const product = await get(_id);\n  Object.keys(change).forEach(function (key) {\n    product[key] = change[key];\n  });\n  await product.save();\n  return product;\n}\n\nasync function resetData(data) {\n  await Job.deleteMany();\n  console.log(data);\n  await Job.insertMany(data);\n}\n\nmodule.exports = {\n  list,\n  create,\n  get,\n  remove,\n  resetData,\n  edit,\n  jobSchema,\n};\n\nexports.Job = Job;\n"]},"metadata":{},"sourceType":"script"}