{"ast":null,"code":"'use strict';\n\nconst get = require('../get');\n\nconst helperIsObject = require('../isObject');\n/*!\n * Gather all indexes defined in the schema, including single nested,\n * document arrays, and embedded discriminators.\n */\n\n\nmodule.exports = function getIndexes(schema) {\n  let indexes = [];\n  const schemaStack = new WeakMap();\n  const indexTypes = schema.constructor.indexTypes;\n  const indexByName = new Map();\n  collectIndexes(schema);\n  return indexes;\n\n  function collectIndexes(schema, prefix, baseSchema) {\n    // Ignore infinitely nested schemas, if we've already seen this schema\n    // along this path there must be a cycle\n    if (schemaStack.has(schema)) {\n      return;\n    }\n\n    schemaStack.set(schema, true);\n    prefix = prefix || '';\n    const keys = Object.keys(schema.paths);\n\n    for (const key of keys) {\n      const path = schema.paths[key];\n\n      if (baseSchema != null && baseSchema.paths[key]) {\n        // If looking at an embedded discriminator schema, don't look at paths\n        // that the\n        continue;\n      }\n\n      if (path.$isMongooseDocumentArray || path.$isSingleNested) {\n        if (get(path, 'options.excludeIndexes') !== true && get(path, 'schemaOptions.excludeIndexes') !== true && get(path, 'schema.options.excludeIndexes') !== true) {\n          collectIndexes(path.schema, prefix + key + '.');\n        }\n\n        if (path.schema.discriminators != null) {\n          const discriminators = path.schema.discriminators;\n          const discriminatorKeys = Object.keys(discriminators);\n\n          for (const discriminatorKey of discriminatorKeys) {\n            collectIndexes(discriminators[discriminatorKey], prefix + key + '.', path.schema);\n          }\n        } // Retained to minimize risk of backwards breaking changes due to\n        // gh-6113\n\n\n        if (path.$isMongooseDocumentArray) {\n          continue;\n        }\n      }\n\n      const index = path._index || path.caster && path.caster._index;\n\n      if (index !== false && index !== null && index !== undefined) {\n        const field = {};\n        const isObject = helperIsObject(index);\n        const options = isObject ? index : {};\n        const type = typeof index === 'string' ? index : isObject ? index.type : false;\n\n        if (type && indexTypes.indexOf(type) !== -1) {\n          field[prefix + key] = type;\n        } else if (options.text) {\n          field[prefix + key] = 'text';\n          delete options.text;\n        } else {\n          const isDescendingIndex = Number(index) === -1;\n          field[prefix + key] = isDescendingIndex ? -1 : 1;\n        }\n\n        delete options.type;\n\n        if (!('background' in options)) {\n          options.background = true;\n        }\n\n        if (schema.options.autoIndex != null) {\n          options._autoIndex = schema.options.autoIndex;\n        }\n\n        const indexName = options && options.name;\n\n        if (typeof indexName === 'string') {\n          if (indexByName.has(indexName)) {\n            Object.assign(indexByName.get(indexName), field);\n          } else {\n            indexes.push([field, options]);\n            indexByName.set(indexName, field);\n          }\n        } else {\n          indexes.push([field, options]);\n          indexByName.set(indexName, field);\n        }\n      }\n    }\n\n    schemaStack.delete(schema);\n\n    if (prefix) {\n      fixSubIndexPaths(schema, prefix);\n    } else {\n      schema._indexes.forEach(function (index) {\n        if (!('background' in index[1])) {\n          index[1].background = true;\n        }\n      });\n\n      indexes = indexes.concat(schema._indexes);\n    }\n  }\n  /*!\n   * Checks for indexes added to subdocs using Schema.index().\n   * These indexes need their paths prefixed properly.\n   *\n   * schema._indexes = [ [indexObj, options], [indexObj, options] ..]\n   */\n\n\n  function fixSubIndexPaths(schema, prefix) {\n    const subindexes = schema._indexes;\n    const len = subindexes.length;\n\n    for (let i = 0; i < len; ++i) {\n      const indexObj = subindexes[i][0];\n      const indexOptions = subindexes[i][1];\n      const keys = Object.keys(indexObj);\n      const klen = keys.length;\n      const newindex = {}; // use forward iteration, order matters\n\n      for (let j = 0; j < klen; ++j) {\n        const key = keys[j];\n        newindex[prefix + key] = indexObj[key];\n      }\n\n      const newIndexOptions = Object.assign({}, indexOptions);\n\n      if (indexOptions != null && indexOptions.partialFilterExpression != null) {\n        newIndexOptions.partialFilterExpression = {};\n        const partialFilterExpression = indexOptions.partialFilterExpression;\n\n        for (const key of Object.keys(partialFilterExpression)) {\n          newIndexOptions.partialFilterExpression[prefix + key] = partialFilterExpression[key];\n        }\n      }\n\n      indexes.push([newindex, newIndexOptions]);\n    }\n  }\n};","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/helpers/schema/getIndexes.js"],"names":["get","require","helperIsObject","module","exports","getIndexes","schema","indexes","schemaStack","WeakMap","indexTypes","constructor","indexByName","Map","collectIndexes","prefix","baseSchema","has","set","keys","Object","paths","key","path","$isMongooseDocumentArray","$isSingleNested","discriminators","discriminatorKeys","discriminatorKey","index","_index","caster","undefined","field","isObject","options","type","indexOf","text","isDescendingIndex","Number","background","autoIndex","_autoIndex","indexName","name","assign","push","delete","fixSubIndexPaths","_indexes","forEach","concat","subindexes","len","length","i","indexObj","indexOptions","klen","newindex","j","newIndexOptions","partialFilterExpression"],"mappings":"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","sourcesContent":["'use strict';\n\nconst get = require('../get');\nconst helperIsObject = require('../isObject');\n\n/*!\n * Gather all indexes defined in the schema, including single nested,\n * document arrays, and embedded discriminators.\n */\n\nmodule.exports = function getIndexes(schema) {\n  let indexes = [];\n  const schemaStack = new WeakMap();\n  const indexTypes = schema.constructor.indexTypes;\n  const indexByName = new Map();\n\n  collectIndexes(schema);\n  return indexes;\n\n  function collectIndexes(schema, prefix, baseSchema) {\n    // Ignore infinitely nested schemas, if we've already seen this schema\n    // along this path there must be a cycle\n    if (schemaStack.has(schema)) {\n      return;\n    }\n    schemaStack.set(schema, true);\n\n    prefix = prefix || '';\n    const keys = Object.keys(schema.paths);\n\n    for (const key of keys) {\n      const path = schema.paths[key];\n      if (baseSchema != null && baseSchema.paths[key]) {\n        // If looking at an embedded discriminator schema, don't look at paths\n        // that the\n        continue;\n      }\n\n      if (path.$isMongooseDocumentArray || path.$isSingleNested) {\n        if (get(path, 'options.excludeIndexes') !== true &&\n            get(path, 'schemaOptions.excludeIndexes') !== true &&\n            get(path, 'schema.options.excludeIndexes') !== true) {\n          collectIndexes(path.schema, prefix + key + '.');\n        }\n\n        if (path.schema.discriminators != null) {\n          const discriminators = path.schema.discriminators;\n          const discriminatorKeys = Object.keys(discriminators);\n          for (const discriminatorKey of discriminatorKeys) {\n            collectIndexes(discriminators[discriminatorKey],\n              prefix + key + '.', path.schema);\n          }\n        }\n\n        // Retained to minimize risk of backwards breaking changes due to\n        // gh-6113\n        if (path.$isMongooseDocumentArray) {\n          continue;\n        }\n      }\n\n      const index = path._index || (path.caster && path.caster._index);\n\n      if (index !== false && index !== null && index !== undefined) {\n        const field = {};\n        const isObject = helperIsObject(index);\n        const options = isObject ? index : {};\n        const type = typeof index === 'string' ? index :\n          isObject ? index.type :\n            false;\n\n        if (type && indexTypes.indexOf(type) !== -1) {\n          field[prefix + key] = type;\n        } else if (options.text) {\n          field[prefix + key] = 'text';\n          delete options.text;\n        } else {\n          const isDescendingIndex = Number(index) === -1;\n          field[prefix + key] = isDescendingIndex ? -1 : 1;\n        }\n\n        delete options.type;\n        if (!('background' in options)) {\n          options.background = true;\n        }\n        if (schema.options.autoIndex != null) {\n          options._autoIndex = schema.options.autoIndex;\n        }\n\n        const indexName = options && options.name;\n        if (typeof indexName === 'string') {\n          if (indexByName.has(indexName)) {\n            Object.assign(indexByName.get(indexName), field);\n          } else {\n            indexes.push([field, options]);\n            indexByName.set(indexName, field);\n          }\n        } else {\n          indexes.push([field, options]);\n          indexByName.set(indexName, field);\n        }\n      }\n    }\n\n    schemaStack.delete(schema);\n\n    if (prefix) {\n      fixSubIndexPaths(schema, prefix);\n    } else {\n      schema._indexes.forEach(function(index) {\n        if (!('background' in index[1])) {\n          index[1].background = true;\n        }\n      });\n      indexes = indexes.concat(schema._indexes);\n    }\n  }\n\n  /*!\n   * Checks for indexes added to subdocs using Schema.index().\n   * These indexes need their paths prefixed properly.\n   *\n   * schema._indexes = [ [indexObj, options], [indexObj, options] ..]\n   */\n\n  function fixSubIndexPaths(schema, prefix) {\n    const subindexes = schema._indexes;\n    const len = subindexes.length;\n    for (let i = 0; i < len; ++i) {\n      const indexObj = subindexes[i][0];\n      const indexOptions = subindexes[i][1];\n      const keys = Object.keys(indexObj);\n      const klen = keys.length;\n      const newindex = {};\n\n      // use forward iteration, order matters\n      for (let j = 0; j < klen; ++j) {\n        const key = keys[j];\n        newindex[prefix + key] = indexObj[key];\n      }\n\n      const newIndexOptions = Object.assign({}, indexOptions);\n      if (indexOptions != null && indexOptions.partialFilterExpression != null) {\n        newIndexOptions.partialFilterExpression = {};\n        const partialFilterExpression = indexOptions.partialFilterExpression;\n        for (const key of Object.keys(partialFilterExpression)) {\n          newIndexOptions.partialFilterExpression[prefix + key] =\n            partialFilterExpression[key];\n        }\n      }\n\n      indexes.push([newindex, newIndexOptions]);\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}