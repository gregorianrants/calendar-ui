{"ast":null,"code":"const {\n  cloneDeep\n} = require(\"lodash\");\n\nconst {\n  pipe,\n  partialRight,\n  curry,\n  flip\n} = require(\"ramda\");\n\nfunction removeDotPaths(obj) {\n  return Object.keys(obj).reduce((a, b) => {\n    if (b.includes(\".\")) {\n      return a;\n    } else {\n      return { ...a,\n        [b]: cloneDeep(obj[b])\n      };\n    }\n  }, {});\n}\n\nfunction isValidationError(obj) {\n  if (!typeof obj === 'object') return false;\n\n  if (obj.hasOwnProperty('name') && obj['name'] === 'ValdidatiorError') {\n    return true;\n  }\n\n  return false;\n} //TO UNDERSTAND LOOK AT THIS FIRST THE FURHTER CHANGES ARE JUST TO MAKE IMMUTABLE AND FUNCTIONAL - this is a recursive function\n// i realise this is pretty confusing but so are mongoose error objects\n//\n// function process(errorsObj, result) {\n//   if (errorsObj.hasOwnProperty(\"errors\"))\n//     return process(errorsObj[\"errors\"], result);\n//   if (errorsObj.hasOwnProperty(\"properties\"))\n//     return errorsObj[\"properties\"][\"message\"];\n//   let builder = {};\n//   for (const [key, value] of Object.entries(errorsObj)) {\n//     builder[key] = process(value, {});\n//   }\n//   return builder;\n// }\n//we wrap the function purely to clone the errors obj passed to it,\n//because passing oject by reference can cause bugs, this could happen if we modified the object,\n//we dont modify it but i have cloned it anyway so that the object passed is forever protected from modification by this function.\n\n\nfunction processMongooseError(errorsObj) {\n  if (!errorsObj) return null;\n  const pretty = JSON.stringify(errorsObj || {}, null, 2);\n  console.log(pretty);\n\n  function inner(errorsObj, result) {\n    if (errorsObj.hasOwnProperty(\"errors\")) return inner(errorsObj[\"errors\"]);\n    if (errorsObj.hasOwnProperty(\"message\")) return errorsObj[\"message\"];\n    let builder = {};\n    const withoutDuplicates = removeDotPaths(errorsObj); //todo proccess the object outside of function to remove all dot paths first\n\n    for (const [key, value] of Object.entries(withoutDuplicates)) {\n      builder[key] = inner(value);\n    }\n\n    return builder;\n  }\n\n  return inner(cloneDeep(errorsObj));\n}\n\nmodule.exports = processMongooseError; // const errorsObj = {\n//   errors: {\n//     customer: {\n//       errors: {\n//         name: {\n//           name: \"ValidatorError\",\n//           message: \"name must have more than 4 characters\",\n//           properties: {\n//             message: \"name must have more than 4 characters\",\n//             type: \"user defined\",\n//             path: \"name\",\n//             value: \"Al\",\n//           },\n//           kind: \"user defined\",\n//           path: \"name\",\n//           value: \"Al\",\n//         },\n//       },\n//       _message: \"Validation failed\",\n//       name: \"ValidationError\",\n//       message: \"Validation failed: name: name must have more than 4 characters\",\n//     },\n//     operatives: {\n//       errors: {\n//         value: {\n//           name: \"ValidatorError\",\n//           message: \"name must have more than 4 characters\",\n//           properties: {\n//             message: \"name must have more than 4 characters\",\n//             type: \"user defined\",\n//             path: \"value\",\n//             value: \"dave\",\n//           },\n//           kind: \"user defined\",\n//           path: \"value\",\n//           value: \"dave\",\n//         },\n//       },\n//       _message: \"Validation failed\",\n//       name: \"ValidationError\",\n//       message:\n//         \"Validation failed: value: name must have more than 4 characters\",\n//     },\n//   },\n//   _message: \"Validation failed\",\n//   name: \"ValidationError\",\n//   message:\n//     \"Validation failed: customer.name: name must have more than 4 characters, customer: Validation failed: name: name must have more than 4 characters, operatives: Validation failed: value: name must have more than 4 characters\",\n// };\n\nconst errorsObj = {\n  errors: {\n    \"customer.name\": {\n      name: \"ValidatorError\",\n      message: \"name must have more than 4 characters\",\n      properties: {\n        message: \"name must have more than 4 characters\",\n        type: \"user defined\",\n        path: \"name\",\n        value: \"Ald\"\n      },\n      kind: \"user defined\",\n      path: \"name\",\n      value: \"Ald\"\n    },\n    customer: {\n      errors: {\n        name: {\n          name: \"ValidatorError\",\n          message: \"name must have more than 4 characters\",\n          properties: {\n            message: \"name must have more than 4 characters\",\n            type: \"user defined\",\n            path: \"name\",\n            value: \"Ald\"\n          },\n          kind: \"user defined\",\n          path: \"name\",\n          value: \"Ald\"\n        }\n      },\n      _message: \"Validation failed\",\n      name: \"ValidationError\",\n      message: \"Validation failed: name: name must have more than 4 characters\"\n    }\n  },\n  _message: \"Validation failed\",\n  name: \"ValidationError\",\n  message: \"Validation failed: customer.name: name must have more than 4 characters, customer: Validation failed: name: name must have more than 4 characters\"\n};\nlet res = processMongooseError(errorsObj);\nconsole.log(res);","map":{"version":3,"sources":["/home/gregorian/calendar-ui/ui/src/utilities/processMongooseError.js"],"names":["cloneDeep","require","pipe","partialRight","curry","flip","removeDotPaths","obj","Object","keys","reduce","a","b","includes","isValidationError","hasOwnProperty","processMongooseError","errorsObj","pretty","JSON","stringify","console","log","inner","result","builder","withoutDuplicates","key","value","entries","module","exports","errors","name","message","properties","type","path","kind","customer","_message","res"],"mappings":"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","sourcesContent":["const { cloneDeep } = require(\"lodash\");\nconst { pipe, partialRight, curry, flip } = require(\"ramda\");\n\nfunction removeDotPaths(obj) {\n  return Object.keys(obj).reduce((a, b) => {\n    if (b.includes(\".\")) {\n      return a;\n    } else {\n      return { ...a, [b]: cloneDeep(obj[b]) };\n    }\n  }, {});\n}\n\nfunction isValidationError(obj){\n  if (!typeof obj === 'object') return false\n\n  if(obj.hasOwnProperty('name') && obj['name']==='ValdidatiorError'){\n    return true\n\n  }\n\n  return false\n}\n\n//TO UNDERSTAND LOOK AT THIS FIRST THE FURHTER CHANGES ARE JUST TO MAKE IMMUTABLE AND FUNCTIONAL - this is a recursive function\n// i realise this is pretty confusing but so are mongoose error objects\n//\n// function process(errorsObj, result) {\n//   if (errorsObj.hasOwnProperty(\"errors\"))\n//     return process(errorsObj[\"errors\"], result);\n\n//   if (errorsObj.hasOwnProperty(\"properties\"))\n//     return errorsObj[\"properties\"][\"message\"];\n\n//   let builder = {};\n//   for (const [key, value] of Object.entries(errorsObj)) {\n//     builder[key] = process(value, {});\n//   }\n//   return builder;\n// }\n\n//we wrap the function purely to clone the errors obj passed to it,\n//because passing oject by reference can cause bugs, this could happen if we modified the object,\n//we dont modify it but i have cloned it anyway so that the object passed is forever protected from modification by this function.\n\nfunction processMongooseError(errorsObj) {\n  if (!errorsObj) return null;\n  const pretty = JSON.stringify(errorsObj || {}, null, 2);\n  console.log(pretty);\n  function inner(errorsObj, result) {\n    if (errorsObj.hasOwnProperty(\"errors\")) return inner(errorsObj[\"errors\"]);\n\n    if (errorsObj.hasOwnProperty(\"message\")) return errorsObj[\"message\"];\n\n    let builder = {};\n    const withoutDuplicates = removeDotPaths(errorsObj); //todo proccess the object outside of function to remove all dot paths first\n    for (const [key, value] of Object.entries(withoutDuplicates)) {\n      builder[key] = inner(value);\n    }\n\n    return builder;\n  }\n  return inner(cloneDeep(errorsObj));\n}\n\nmodule.exports = processMongooseError;\n\n// const errorsObj = {\n//   errors: {\n//     customer: {\n//       errors: {\n//         name: {\n//           name: \"ValidatorError\",\n//           message: \"name must have more than 4 characters\",\n//           properties: {\n//             message: \"name must have more than 4 characters\",\n//             type: \"user defined\",\n//             path: \"name\",\n//             value: \"Al\",\n//           },\n//           kind: \"user defined\",\n//           path: \"name\",\n//           value: \"Al\",\n//         },\n//       },\n//       _message: \"Validation failed\",\n//       name: \"ValidationError\",\n//       message: \"Validation failed: name: name must have more than 4 characters\",\n//     },\n//     operatives: {\n//       errors: {\n//         value: {\n//           name: \"ValidatorError\",\n//           message: \"name must have more than 4 characters\",\n//           properties: {\n//             message: \"name must have more than 4 characters\",\n//             type: \"user defined\",\n//             path: \"value\",\n//             value: \"dave\",\n//           },\n//           kind: \"user defined\",\n//           path: \"value\",\n//           value: \"dave\",\n//         },\n//       },\n//       _message: \"Validation failed\",\n//       name: \"ValidationError\",\n//       message:\n//         \"Validation failed: value: name must have more than 4 characters\",\n//     },\n//   },\n//   _message: \"Validation failed\",\n//   name: \"ValidationError\",\n//   message:\n//     \"Validation failed: customer.name: name must have more than 4 characters, customer: Validation failed: name: name must have more than 4 characters, operatives: Validation failed: value: name must have more than 4 characters\",\n// };\n\nconst errorsObj = {\n  errors: {\n    \"customer.name\": {\n      name: \"ValidatorError\",\n      message: \"name must have more than 4 characters\",\n      properties: {\n        message: \"name must have more than 4 characters\",\n        type: \"user defined\",\n        path: \"name\",\n        value: \"Ald\",\n      },\n      kind: \"user defined\",\n      path: \"name\",\n      value: \"Ald\",\n    },\n    customer: {\n      errors: {\n        name: {\n          name: \"ValidatorError\",\n          message: \"name must have more than 4 characters\",\n          properties: {\n            message: \"name must have more than 4 characters\",\n            type: \"user defined\",\n            path: \"name\",\n            value: \"Ald\",\n          },\n          kind: \"user defined\",\n          path: \"name\",\n          value: \"Ald\",\n        },\n      },\n      _message: \"Validation failed\",\n      name: \"ValidationError\",\n      message: \"Validation failed: name: name must have more than 4 characters\",\n    },\n  },\n  _message: \"Validation failed\",\n  name: \"ValidationError\",\n  message:\n    \"Validation failed: customer.name: name must have more than 4 characters, customer: Validation failed: name: name must have more than 4 characters\",\n};\nlet res = processMongooseError(errorsObj);\n\nconsole.log(res);\n"]},"metadata":{},"sourceType":"module"}