{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst Kareem = require('kareem');\n\nconst MongooseError = require('./error/mongooseError');\n\nconst SchemaType = require('./schematype');\n\nconst SchemaTypeOptions = require('./options/SchemaTypeOptions');\n\nconst VirtualOptions = require('./options/VirtualOptions');\n\nconst VirtualType = require('./virtualtype');\n\nconst addAutoId = require('./helpers/schema/addAutoId');\n\nconst get = require('./helpers/get');\n\nconst getConstructorName = require('./helpers/getConstructorName');\n\nconst getIndexes = require('./helpers/schema/getIndexes');\n\nconst idGetter = require('./helpers/schema/idGetter');\n\nconst merge = require('./helpers/schema/merge');\n\nconst mpath = require('mpath');\n\nconst readPref = require('./driver').get().ReadPreference;\n\nconst setupTimestamps = require('./helpers/timestamps/setupTimestamps');\n\nconst utils = require('./utils');\n\nconst validateRef = require('./helpers/populate/validateRef');\n\nlet MongooseTypes;\n\nconst queryHooks = require('./helpers/query/applyQueryMiddleware').middlewareFunctions;\n\nconst documentHooks = require('./helpers/model/applyHooks').middlewareFunctions;\n\nconst hookNames = queryHooks.concat(documentHooks).reduce((s, hook) => s.add(hook), new Set());\nlet id = 0;\n/**\n * Schema constructor.\n *\n * ####Example:\n *\n *     const child = new Schema({ name: String });\n *     const schema = new Schema({ name: String, age: Number, children: [child] });\n *     const Tree = mongoose.model('Tree', schema);\n *\n *     // setting schema options\n *     new Schema({ name: String }, { _id: false, autoIndex: false })\n *\n * ####Options:\n *\n * - [autoIndex](/docs/guide.html#autoIndex): bool - defaults to null (which means use the connection's autoIndex option)\n * - [autoCreate](/docs/guide.html#autoCreate): bool - defaults to null (which means use the connection's autoCreate option)\n * - [bufferCommands](/docs/guide.html#bufferCommands): bool - defaults to true\n * - [bufferTimeoutMS](/docs/guide.html#bufferTimeoutMS): number - defaults to 10000 (10 seconds). If `bufferCommands` is enabled, the amount of time Mongoose will wait for connectivity to be restablished before erroring out.\n * - [capped](/docs/guide.html#capped): bool - defaults to false\n * - [collection](/docs/guide.html#collection): string - no default\n * - [discriminatorKey](/docs/guide.html#discriminatorKey): string - defaults to `__t`\n * - [id](/docs/guide.html#id): bool - defaults to true\n * - [_id](/docs/guide.html#_id): bool - defaults to true\n * - [minimize](/docs/guide.html#minimize): bool - controls [document#toObject](#document_Document-toObject) behavior when called manually - defaults to true\n * - [read](/docs/guide.html#read): string\n * - [writeConcern](/docs/guide.html#writeConcern): object - defaults to null, use to override [the MongoDB server's default write concern settings](https://docs.mongodb.com/manual/reference/write-concern/)\n * - [shardKey](/docs/guide.html#shardKey): object - defaults to `null`\n * - [strict](/docs/guide.html#strict): bool - defaults to true\n * - [toJSON](/docs/guide.html#toJSON) - object - no default\n * - [toObject](/docs/guide.html#toObject) - object - no default\n * - [typeKey](/docs/guide.html#typeKey) - string - defaults to 'type'\n * - [validateBeforeSave](/docs/guide.html#validateBeforeSave) - bool - defaults to `true`\n * - [versionKey](/docs/guide.html#versionKey): string or object - defaults to \"__v\"\n * - [optimisticConcurrency](/docs/guide.html#optimisticConcurrency): bool - defaults to false. Set to true to enable [optimistic concurrency](https://thecodebarbarian.com/whats-new-in-mongoose-5-10-optimistic-concurrency.html).\n * - [collation](/docs/guide.html#collation): object - defaults to null (which means use no collation)\n * - [selectPopulatedPaths](/docs/guide.html#selectPopulatedPaths): boolean - defaults to `true`\n * - [skipVersioning](/docs/guide.html#skipVersioning): object - paths to exclude from versioning\n * - [timestamps](/docs/guide.html#timestamps): object or boolean - defaults to `false`. If true, Mongoose adds `createdAt` and `updatedAt` properties to your schema and manages those properties for you.\n *\n * ####Options for Nested Schemas:\n * - `excludeIndexes`: bool - defaults to `false`. If `true`, skip building indexes on this schema's paths.\n *\n * ####Note:\n *\n * _When nesting schemas, (`children` in the example above), always declare the child schema first before passing it into its parent._\n *\n * @param {Object|Schema|Array} [definition] Can be one of: object describing schema paths, or schema to copy, or array of objects and schemas\n * @param {Object} [options]\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted after the schema is compiled into a `Model`.\n * @api public\n */\n\nfunction Schema(obj, options) {\n  if (!(this instanceof Schema)) {\n    return new Schema(obj, options);\n  }\n\n  this.obj = obj;\n  this.paths = {};\n  this.aliases = {};\n  this.subpaths = {};\n  this.virtuals = {};\n  this.singleNestedPaths = {};\n  this.nested = {};\n  this.inherits = {};\n  this.callQueue = [];\n  this._indexes = [];\n  this.methods = {};\n  this.methodOptions = {};\n  this.statics = {};\n  this.tree = {};\n  this.query = {};\n  this.childSchemas = [];\n  this.plugins = []; // For internal debugging. Do not use this to try to save a schema in MDB.\n\n  this.$id = ++id;\n  this.mapPaths = [];\n  this.s = {\n    hooks: new Kareem()\n  };\n  this.options = this.defaultOptions(options); // build paths\n\n  if (Array.isArray(obj)) {\n    for (const definition of obj) {\n      this.add(definition);\n    }\n  } else if (obj) {\n    this.add(obj);\n  } // check if _id's value is a subdocument (gh-2276)\n\n\n  const _idSubDoc = obj && obj._id && utils.isObject(obj._id); // ensure the documents get an auto _id unless disabled\n\n\n  const auto_id = !this.paths['_id'] && this.options._id && !_idSubDoc;\n\n  if (auto_id) {\n    addAutoId(this);\n  }\n\n  this.setupTimestamp(this.options.timestamps);\n}\n/*!\n * Create virtual properties with alias field\n */\n\n\nfunction aliasFields(schema, paths) {\n  paths = paths || Object.keys(schema.paths);\n\n  for (const path of paths) {\n    const options = get(schema.paths[path], 'options');\n\n    if (options == null) {\n      continue;\n    }\n\n    const prop = schema.paths[path].path;\n    const alias = options.alias;\n\n    if (!alias) {\n      continue;\n    }\n\n    if (typeof alias !== 'string') {\n      throw new Error('Invalid value for alias option on ' + prop + ', got ' + alias);\n    }\n\n    schema.aliases[alias] = prop;\n    schema.virtual(alias).get(function (p) {\n      return function () {\n        if (typeof this.get === 'function') {\n          return this.get(p);\n        }\n\n        return this[p];\n      };\n    }(prop)).set(function (p) {\n      return function (v) {\n        return this.$set(p, v);\n      };\n    }(prop));\n  }\n}\n/*!\n * Inherit from EventEmitter.\n */\n\n\nSchema.prototype = Object.create(EventEmitter.prototype);\nSchema.prototype.constructor = Schema;\nSchema.prototype.instanceOfSchema = true;\n/*!\n * ignore\n */\n\nObject.defineProperty(Schema.prototype, '$schemaType', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n/**\n * Array of child schemas (from document arrays and single nested subdocs)\n * and their corresponding compiled models. Each element of the array is\n * an object with 2 properties: `schema` and `model`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * @api public\n * @property childSchemas\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'childSchemas', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n/**\n * The original object passed to the schema constructor\n *\n * ####Example:\n *\n *     const schema = new Schema({ a: String }).add({ b: String });\n *     schema.obj; // { a: String }\n *\n * @api public\n * @property obj\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.obj;\n/**\n * The paths defined on this schema. The keys are the top-level paths\n * in this schema, and the values are instances of the SchemaType class.\n *\n * ####Example:\n *     const schema = new Schema({ name: String }, { _id: false });\n *     schema.paths; // { name: SchemaString { ... } }\n *\n *     schema.add({ age: Number });\n *     schema.paths; // { name: SchemaString { ... }, age: SchemaNumber { ... } }\n *\n * @api public\n * @property paths\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.paths;\n/**\n * Schema as a tree\n *\n * ####Example:\n *     {\n *         '_id'     : ObjectId\n *       , 'nested'  : {\n *             'key' : String\n *         }\n *     }\n *\n * @api private\n * @property tree\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.tree;\n/**\n * Returns a deep copy of the schema\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String });\n *     const clone = schema.clone();\n *     clone === schema; // false\n *     clone.path('name'); // SchemaString { ... }\n *\n * @return {Schema} the cloned schema\n * @api public\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.clone = function () {\n  const Constructor = this.base == null ? Schema : this.base.Schema;\n  const s = new Constructor({}, this._userProvidedOptions);\n  s.base = this.base;\n  s.obj = this.obj;\n  s.options = utils.clone(this.options);\n  s.callQueue = this.callQueue.map(function (f) {\n    return f;\n  });\n  s.methods = utils.clone(this.methods);\n  s.methodOptions = utils.clone(this.methodOptions);\n  s.statics = utils.clone(this.statics);\n  s.query = utils.clone(this.query);\n  s.plugins = Array.prototype.slice.call(this.plugins);\n  s._indexes = utils.clone(this._indexes);\n  s.s.hooks = this.s.hooks.clone();\n  s.tree = utils.clone(this.tree);\n  s.paths = utils.clone(this.paths);\n  s.nested = utils.clone(this.nested);\n  s.subpaths = utils.clone(this.subpaths);\n  s.singleNestedPaths = utils.clone(this.singleNestedPaths);\n  s.childSchemas = gatherChildSchemas(s);\n  s.virtuals = utils.clone(this.virtuals);\n  s.$globalPluginsApplied = this.$globalPluginsApplied;\n  s.$isRootDiscriminator = this.$isRootDiscriminator;\n  s.$implicitlyCreated = this.$implicitlyCreated;\n  s.$id = ++id;\n  s.$originalSchemaId = this.$id;\n  s.mapPaths = [].concat(this.mapPaths);\n\n  if (this.discriminatorMapping != null) {\n    s.discriminatorMapping = Object.assign({}, this.discriminatorMapping);\n  }\n\n  if (this.discriminators != null) {\n    s.discriminators = Object.assign({}, this.discriminators);\n  }\n\n  s.aliases = Object.assign({}, this.aliases); // Bubble up `init` for backwards compat\n\n  s.on('init', v => this.emit('init', v));\n  return s;\n};\n/**\n * Returns a new schema that has the picked `paths` from this schema.\n *\n * This method is analagous to [Lodash's `pick()` function](https://lodash.com/docs/4.17.15#pick) for Mongoose schemas.\n *\n * ####Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema with the same `name` path as `schema`,\n *     // but no `age` path.\n *     const newSchema = schema.pick(['name']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {Array} paths list of paths to pick\n * @param {Object} [options] options to pass to the schema constructor. Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\n\nSchema.prototype.pick = function (paths, options) {\n  const newSchema = new Schema({}, options || this.options);\n\n  if (!Array.isArray(paths)) {\n    throw new MongooseError('Schema#pick() only accepts an array argument, ' + 'got \"' + typeof paths + '\"');\n  }\n\n  for (const path of paths) {\n    if (this.nested[path]) {\n      newSchema.add({\n        [path]: get(this.tree, path)\n      });\n    } else {\n      const schematype = this.path(path);\n\n      if (schematype == null) {\n        throw new MongooseError('Path `' + path + '` is not in the schema');\n      }\n\n      newSchema.add({\n        [path]: schematype\n      });\n    }\n  }\n\n  return newSchema;\n};\n/**\n * Returns default options for this schema, merged with `options`.\n *\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\n\nSchema.prototype.defaultOptions = function (options) {\n  this._userProvidedOptions = options == null ? {} : utils.clone(options);\n  const baseOptions = get(this, 'base.options', {});\n  options = utils.options({\n    strict: 'strict' in baseOptions ? baseOptions.strict : true,\n    bufferCommands: true,\n    capped: false,\n    // { size, max, autoIndexId }\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    // the following are only applied at construction time\n    _id: true,\n    id: true,\n    typeKey: 'type'\n  }, utils.clone(options));\n\n  if (options.read) {\n    options.read = readPref(options.read);\n  }\n\n  if (options.versionKey && typeof options.versionKey !== 'string') {\n    throw new MongooseError('`versionKey` must be falsy or string, got `' + typeof options.versionKey + '`');\n  }\n\n  if (options.optimisticConcurrency && !options.versionKey) {\n    throw new MongooseError('Must set `versionKey` if using `optimisticConcurrency`');\n  }\n\n  return options;\n};\n/**\n * Adds key path / schema type pairs to this schema.\n *\n * ####Example:\n *\n *     const ToySchema = new Schema();\n *     ToySchema.add({ name: 'string', color: 'string', price: 'number' });\n *\n *     const TurboManSchema = new Schema();\n *     // You can also `add()` another schema and copy over all paths, virtuals,\n *     // getters, setters, indexes, methods, and statics.\n *     TurboManSchema.add(ToySchema).add({ year: Number });\n *\n * @param {Object|Schema} obj plain object with paths to add, or another schema\n * @param {String} [prefix] path to prefix the newly added paths with\n * @return {Schema} the Schema instance\n * @api public\n */\n\n\nSchema.prototype.add = function add(obj, prefix) {\n  if (obj instanceof Schema || obj != null && obj.instanceOfSchema) {\n    merge(this, obj);\n    return this;\n  } // Special case: setting top-level `_id` to false should convert to disabling\n  // the `_id` option. This behavior never worked before 5.4.11 but numerous\n  // codebases use it (see gh-7516, gh-7512).\n\n\n  if (obj._id === false && prefix == null) {\n    this.options._id = false;\n  }\n\n  prefix = prefix || ''; // avoid prototype pollution\n\n  if (prefix === '__proto__.' || prefix === 'constructor.' || prefix === 'prototype.') {\n    return this;\n  }\n\n  const keys = Object.keys(obj);\n\n  for (const key of keys) {\n    const fullPath = prefix + key;\n\n    if (obj[key] == null) {\n      throw new TypeError('Invalid value for schema path `' + fullPath + '`, got value \"' + obj[key] + '\"');\n    } // Retain `_id: false` but don't set it as a path, re: gh-8274.\n\n\n    if (key === '_id' && obj[key] === false) {\n      continue;\n    }\n\n    if (obj[key] instanceof VirtualType || get(obj[key], 'constructor.name', null) === 'VirtualType') {\n      this.virtual(obj[key]);\n      continue;\n    }\n\n    if (Array.isArray(obj[key]) && obj[key].length === 1 && obj[key][0] == null) {\n      throw new TypeError('Invalid value for schema Array path `' + fullPath + '`, got value \"' + obj[key][0] + '\"');\n    }\n\n    if (!(utils.isPOJO(obj[key]) || obj[key] instanceof SchemaTypeOptions)) {\n      // Special-case: Non-options definitely a path so leaf at this node\n      // Examples: Schema instances, SchemaType instances\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n\n      this.path(prefix + key, obj[key]);\n    } else if (Object.keys(obj[key]).length < 1) {\n      // Special-case: {} always interpreted as Mixed path so leaf at this node\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n\n      this.path(fullPath, obj[key]); // mixed type\n    } else if (!obj[key][this.options.typeKey] || this.options.typeKey === 'type' && obj[key].type.type) {\n      // Special-case: POJO with no bona-fide type key - interpret as tree of deep paths so recurse\n      // nested object { last: { name: String }}\n      this.nested[fullPath] = true;\n      this.add(obj[key], fullPath + '.');\n    } else {\n      // There IS a bona-fide type key that may also be a POJO\n      const _typeDef = obj[key][this.options.typeKey];\n\n      if (utils.isPOJO(_typeDef) && Object.keys(_typeDef).length > 0) {\n        // If a POJO is the value of a type key, make it a subdocument\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        }\n\n        const _schema = new Schema(_typeDef);\n\n        const schemaWrappedPath = Object.assign({}, obj[key], {\n          type: _schema\n        });\n        this.path(prefix + key, schemaWrappedPath);\n      } else {\n        // Either the type is non-POJO or we interpret it as Mixed anyway\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        }\n\n        this.path(prefix + key, obj[key]);\n      }\n    }\n  }\n\n  const addedKeys = Object.keys(obj).map(key => prefix ? prefix + key : key);\n  aliasFields(this, addedKeys);\n  return this;\n};\n/**\n * Reserved document keys.\n *\n * Keys in this object are names that are warned in schema declarations\n * because they have the potential to break Mongoose/ Mongoose plugins functionality. If you create a schema\n * using `new Schema()` with one of these property names, Mongoose will log a warning.\n *\n * - _posts\n * - _pres\n * - collection\n  * - emit\n * - errors\n * - get\n * - init\n * - isModified\n * - isNew\n * - listeners\n * - modelName\n * - on\n * - once\n * - populated\n * - prototype\n * - remove\n * - removeListener\n * - save\n * - schema\n * - toObject\n * - validate\n *\n * _NOTE:_ Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.\n *\n *      const schema = new Schema(..);\n *      schema.methods.init = function () {} // potentially breaking\n */\n\n\nSchema.reserved = Object.create(null);\nSchema.prototype.reserved = Schema.reserved;\nconst reserved = Schema.reserved; // Core object\n\nreserved['prototype'] = // EventEmitter\nreserved.emit = reserved.listeners = reserved.on = reserved.removeListener = // document properties and functions\nreserved.collection = reserved.errors = reserved.get = reserved.init = reserved.isModified = reserved.isNew = reserved.populated = reserved.remove = reserved.save = reserved.toObject = reserved.validate = 1;\nreserved.collection = 1;\n/**\n * Gets/sets schema paths.\n *\n * Sets a path (if arity 2)\n * Gets a path (if arity 1)\n *\n * ####Example\n *\n *     schema.path('name') // returns a SchemaType\n *     schema.path('name', Number) // changes the schemaType of `name` to Number\n *\n * @param {String} path\n * @param {Object} constructor\n * @api public\n */\n\nSchema.prototype.path = function (path, obj) {\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n\n  if (obj === undefined) {\n    let schematype = _getPath(this, path, cleanPath);\n\n    if (schematype != null) {\n      return schematype;\n    } // Look for maps\n\n\n    const mapPath = getMapPath(this, path);\n\n    if (mapPath != null) {\n      return mapPath;\n    } // Look if a parent of this path is mixed\n\n\n    schematype = this.hasMixedParent(cleanPath);\n\n    if (schematype != null) {\n      return schematype;\n    } // subpaths?\n\n\n    return /\\.\\d+\\.?.*$/.test(path) ? getPositionalPath(this, path) : undefined;\n  } // some path names conflict with document methods\n\n\n  const firstPieceOfPath = path.split('.')[0];\n\n  if (reserved[firstPieceOfPath] && !this.options.supressReservedKeysWarning) {\n    const errorMessage = `\\`${firstPieceOfPath}\\` is a reserved schema pathname and may break some functionality. ` + 'You are allowed to use it, but use at your own risk. ' + 'To disable this warning pass `supressReservedKeysWarning` as a schema option.';\n    console.warn(errorMessage);\n  }\n\n  if (typeof obj === 'object' && utils.hasUserDefinedProperty(obj, 'ref')) {\n    validateRef(obj.ref, path);\n  } // update the tree\n\n\n  const subpaths = path.split(/\\./);\n  const last = subpaths.pop();\n  let branch = this.tree;\n  let fullPath = '';\n\n  for (const sub of subpaths) {\n    fullPath = fullPath += (fullPath.length > 0 ? '.' : '') + sub;\n\n    if (!branch[sub]) {\n      this.nested[fullPath] = true;\n      branch[sub] = {};\n    }\n\n    if (typeof branch[sub] !== 'object') {\n      const msg = 'Cannot set nested path `' + path + '`. ' + 'Parent path `' + fullPath + '` already set to type ' + branch[sub].name + '.';\n      throw new Error(msg);\n    }\n\n    branch = branch[sub];\n  }\n\n  branch[last] = utils.clone(obj);\n  this.paths[path] = this.interpretAsType(path, obj, this.options);\n  const schemaType = this.paths[path];\n\n  if (schemaType.$isSchemaMap) {\n    // Maps can have arbitrary keys, so `$*` is internal shorthand for \"any key\"\n    // The '$' is to imply this path should never be stored in MongoDB so we\n    // can easily build a regexp out of this path, and '*' to imply \"any key.\"\n    const mapPath = path + '.$*';\n    this.paths[mapPath] = schemaType.$__schemaType;\n    this.mapPaths.push(this.paths[mapPath]);\n  }\n\n  if (schemaType.$isSingleNested) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n    }\n\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.singleNestedPaths[key];\n    }\n\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.subpaths[key];\n    }\n\n    for (const key of Object.keys(schemaType.schema.nested)) {\n      this.singleNestedPaths[path + '.' + key] = 'nested';\n    }\n\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n    schemaType.caster.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.caster\n    });\n  } else if (schemaType.$isMongooseDocumentArray) {\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n    schemaType.casterConstructor.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.casterConstructor\n    });\n  }\n\n  if (schemaType.$isMongooseArray && schemaType.caster instanceof SchemaType) {\n    let arrayPath = path;\n    let _schemaType = schemaType;\n    const toAdd = [];\n\n    while (_schemaType.$isMongooseArray) {\n      arrayPath = arrayPath + '.$'; // Skip arrays of document arrays\n\n      if (_schemaType.$isMongooseDocumentArray) {\n        _schemaType.$embeddedSchemaType._arrayPath = arrayPath;\n        _schemaType.$embeddedSchemaType._arrayParentPath = path;\n        _schemaType = _schemaType.$embeddedSchemaType.clone();\n      } else {\n        _schemaType.caster._arrayPath = arrayPath;\n        _schemaType.caster._arrayParentPath = path;\n        _schemaType = _schemaType.caster.clone();\n      }\n\n      _schemaType.path = arrayPath;\n      toAdd.push(_schemaType);\n    }\n\n    for (const _schemaType of toAdd) {\n      this.subpaths[_schemaType.path] = _schemaType;\n    }\n  }\n\n  if (schemaType.$isMongooseDocumentArray) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      const _schemaType = schemaType.schema.paths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n\n      if (typeof _schemaType === 'object' && _schemaType != null) {\n        _schemaType.$isUnderneathDocArray = true;\n      }\n    }\n\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      const _schemaType = schemaType.schema.subpaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n\n      if (typeof _schemaType === 'object' && _schemaType != null) {\n        _schemaType.$isUnderneathDocArray = true;\n      }\n    }\n\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      const _schemaType = schemaType.schema.singleNestedPaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n\n      if (typeof _schemaType === 'object' && _schemaType != null) {\n        _schemaType.$isUnderneathDocArray = true;\n      }\n    }\n  }\n\n  return this;\n};\n/*!\n * ignore\n */\n\n\nfunction gatherChildSchemas(schema) {\n  const childSchemas = [];\n\n  for (const path of Object.keys(schema.paths)) {\n    const schematype = schema.paths[path];\n\n    if (schematype.$isMongooseDocumentArray || schematype.$isSingleNested) {\n      childSchemas.push({\n        schema: schematype.schema,\n        model: schematype.caster\n      });\n    }\n  }\n\n  return childSchemas;\n}\n/*!\n * ignore\n */\n\n\nfunction _getPath(schema, path, cleanPath) {\n  if (schema.paths.hasOwnProperty(path)) {\n    return schema.paths[path];\n  }\n\n  if (schema.subpaths.hasOwnProperty(cleanPath)) {\n    return schema.subpaths[cleanPath];\n  }\n\n  if (schema.singleNestedPaths.hasOwnProperty(cleanPath) && typeof schema.singleNestedPaths[cleanPath] === 'object') {\n    return schema.singleNestedPaths[cleanPath];\n  }\n\n  return null;\n}\n/*!\n * ignore\n */\n\n\nfunction _pathToPositionalSyntax(path) {\n  if (!/\\.\\d+/.test(path)) {\n    return path;\n  }\n\n  return path.replace(/\\.\\d+\\./g, '.$.').replace(/\\.\\d+$/, '.$');\n}\n/*!\n * ignore\n */\n\n\nfunction getMapPath(schema, path) {\n  if (schema.mapPaths.length === 0) {\n    return null;\n  }\n\n  for (const val of schema.mapPaths) {\n    const _path = val.path;\n    const re = new RegExp('^' + _path.replace(/\\.\\$\\*/g, '\\\\.[^.]+') + '$');\n\n    if (re.test(path)) {\n      return schema.paths[_path];\n    }\n  }\n\n  return null;\n}\n/**\n * The Mongoose instance this schema is associated with\n *\n * @property base\n * @api private\n */\n\n\nObject.defineProperty(Schema.prototype, 'base', {\n  configurable: true,\n  enumerable: false,\n  writable: true,\n  value: null\n});\n/**\n * Converts type arguments into Mongoose Types.\n *\n * @param {String} path\n * @param {Object} obj constructor\n * @api private\n */\n\nSchema.prototype.interpretAsType = function (path, obj, options) {\n  if (obj instanceof SchemaType) {\n    if (obj.path === path) {\n      return obj;\n    }\n\n    const clone = obj.clone();\n    clone.path = path;\n    return clone;\n  } // If this schema has an associated Mongoose object, use the Mongoose object's\n  // copy of SchemaTypes re: gh-7158 gh-6933\n\n\n  const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n\n  if (!utils.isPOJO(obj) && !(obj instanceof SchemaTypeOptions)) {\n    const constructorName = utils.getFunctionName(obj.constructor);\n\n    if (constructorName !== 'Object') {\n      const oldObj = obj;\n      obj = {};\n      obj[options.typeKey] = oldObj;\n    }\n  } // Get the type making sure to allow keys named \"type\"\n  // and default to mixed if not specified.\n  // { type: { type: String, default: 'freshcut' } }\n\n\n  let type = obj[options.typeKey] && (options.typeKey !== 'type' || !obj.type.type) ? obj[options.typeKey] : {};\n  let name;\n\n  if (utils.isPOJO(type) || type === 'mixed') {\n    return new MongooseTypes.Mixed(path, obj);\n  }\n\n  if (Array.isArray(type) || type === Array || type === 'array' || type === MongooseTypes.Array) {\n    // if it was specified through { type } look for `cast`\n    let cast = type === Array || type === 'array' ? obj.cast || obj.of : type[0];\n\n    if (cast && cast.instanceOfSchema) {\n      if (!(cast instanceof Schema)) {\n        throw new TypeError('Schema for array path `' + path + '` is from a different copy of the Mongoose module. Please make sure you\\'re using the same version ' + 'of Mongoose everywhere with `npm list mongoose`.');\n      }\n\n      return new MongooseTypes.DocumentArray(path, cast, obj);\n    }\n\n    if (cast && cast[options.typeKey] && cast[options.typeKey].instanceOfSchema) {\n      if (!(cast[options.typeKey] instanceof Schema)) {\n        throw new TypeError('Schema for array path `' + path + '` is from a different copy of the Mongoose module. Please make sure you\\'re using the same version ' + 'of Mongoose everywhere with `npm list mongoose`.');\n      }\n\n      return new MongooseTypes.DocumentArray(path, cast[options.typeKey], obj, cast);\n    }\n\n    if (Array.isArray(cast)) {\n      return new MongooseTypes.Array(path, this.interpretAsType(path, cast, options), obj);\n    }\n\n    if (typeof cast === 'string') {\n      cast = MongooseTypes[cast.charAt(0).toUpperCase() + cast.substring(1)];\n    } else if (cast && (!cast[options.typeKey] || options.typeKey === 'type' && cast.type.type) && utils.isPOJO(cast)) {\n      if (Object.keys(cast).length) {\n        // The `minimize` and `typeKey` options propagate to child schemas\n        // declared inline, like `{ arr: [{ val: { $type: String } }] }`.\n        // See gh-3560\n        const childSchemaOptions = {\n          minimize: options.minimize\n        };\n\n        if (options.typeKey) {\n          childSchemaOptions.typeKey = options.typeKey;\n        } // propagate 'strict' option to child schema\n\n\n        if (options.hasOwnProperty('strict')) {\n          childSchemaOptions.strict = options.strict;\n        }\n\n        if (this._userProvidedOptions.hasOwnProperty('_id')) {\n          childSchemaOptions._id = this._userProvidedOptions._id;\n        } else if (Schema.Types.DocumentArray.defaultOptions._id != null) {\n          childSchemaOptions._id = Schema.Types.DocumentArray.defaultOptions._id;\n        }\n\n        const childSchema = new Schema(cast, childSchemaOptions);\n        childSchema.$implicitlyCreated = true;\n        return new MongooseTypes.DocumentArray(path, childSchema, obj);\n      } else {\n        // Special case: empty object becomes mixed\n        return new MongooseTypes.Array(path, MongooseTypes.Mixed, obj);\n      }\n    }\n\n    if (cast) {\n      type = cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type) ? cast[options.typeKey] : cast;\n      name = typeof type === 'string' ? type : type.schemaName || utils.getFunctionName(type); // For Jest 26+, see #10296\n\n      if (name === 'ClockDate') {\n        name = 'Date';\n      }\n\n      if (!MongooseTypes.hasOwnProperty(name)) {\n        throw new TypeError('Invalid schema configuration: ' + `\\`${name}\\` is not a valid type within the array \\`${path}\\`.` + 'See http://bit.ly/mongoose-schematypes for a list of valid schema types.');\n      }\n    }\n\n    return new MongooseTypes.Array(path, cast || MongooseTypes.Mixed, obj, options);\n  }\n\n  if (type && type.instanceOfSchema) {\n    return new MongooseTypes.Subdocument(type, path, obj);\n  }\n\n  if (Buffer.isBuffer(type)) {\n    name = 'Buffer';\n  } else if (typeof type === 'function' || typeof type === 'object') {\n    name = type.schemaName || utils.getFunctionName(type);\n  } else {\n    name = type == null ? '' + type : type.toString();\n  }\n\n  if (name) {\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n  } // Special case re: gh-7049 because the bson `ObjectID` class' capitalization\n  // doesn't line up with Mongoose's.\n\n\n  if (name === 'ObjectID') {\n    name = 'ObjectId';\n  } // For Jest 26+, see #10296\n\n\n  if (name === 'ClockDate') {\n    name = 'Date';\n  }\n\n  if (MongooseTypes[name] == null) {\n    throw new TypeError(`Invalid schema configuration: \\`${name}\\` is not ` + `a valid type at path \\`${path}\\`. See ` + 'http://bit.ly/mongoose-schematypes for a list of valid schema types.');\n  }\n\n  const schemaType = new MongooseTypes[name](path, obj);\n\n  if (schemaType.$isSchemaMap) {\n    createMapNestedSchemaType(this, schemaType, path, obj, options);\n  }\n\n  return schemaType;\n};\n/*!\n * ignore\n */\n\n\nfunction createMapNestedSchemaType(schema, schemaType, path, obj, options) {\n  const mapPath = path + '.$*';\n  let _mapType = {\n    type: {}\n  };\n\n  if (utils.hasUserDefinedProperty(obj, 'of')) {\n    const isInlineSchema = utils.isPOJO(obj.of) && Object.keys(obj.of).length > 0 && !utils.hasUserDefinedProperty(obj.of, schema.options.typeKey);\n\n    if (isInlineSchema) {\n      _mapType = {\n        [schema.options.typeKey]: new Schema(obj.of)\n      };\n    } else if (utils.isPOJO(obj.of)) {\n      _mapType = Object.assign({}, obj.of);\n    } else {\n      _mapType = {\n        [schema.options.typeKey]: obj.of\n      };\n    }\n\n    if (utils.hasUserDefinedProperty(obj, 'ref')) {\n      _mapType.ref = obj.ref;\n    }\n  }\n\n  schemaType.$__schemaType = schema.interpretAsType(mapPath, _mapType, options);\n}\n/**\n * Iterates the schemas paths similar to Array#forEach.\n *\n * The callback is passed the pathname and the schemaType instance.\n *\n * ####Example:\n *\n *     const userSchema = new Schema({ name: String, registeredAt: Date });\n *     userSchema.eachPath((pathname, schematype) => {\n *       // Prints twice:\n *       // name SchemaString { ... }\n *       // registeredAt SchemaDate { ... }\n *       console.log(pathname, schematype);\n *     });\n *\n * @param {Function} fn callback function\n * @return {Schema} this\n * @api public\n */\n\n\nSchema.prototype.eachPath = function (fn) {\n  const keys = Object.keys(this.paths);\n  const len = keys.length;\n\n  for (let i = 0; i < len; ++i) {\n    fn(keys[i], this.paths[keys[i]]);\n  }\n\n  return this;\n};\n/**\n * Returns an Array of path strings that are required by this schema.\n *\n * ####Example:\n *     const s = new Schema({\n *       name: { type: String, required: true },\n *       age: { type: String, required: true },\n *       notes: String\n *     });\n *     s.requiredPaths(); // [ 'age', 'name' ]\n *\n * @api public\n * @param {Boolean} invalidate refresh the cache\n * @return {Array}\n */\n\n\nSchema.prototype.requiredPaths = function requiredPaths(invalidate) {\n  if (this._requiredpaths && !invalidate) {\n    return this._requiredpaths;\n  }\n\n  const paths = Object.keys(this.paths);\n  let i = paths.length;\n  const ret = [];\n\n  while (i--) {\n    const path = paths[i];\n\n    if (this.paths[path].isRequired) {\n      ret.push(path);\n    }\n  }\n\n  this._requiredpaths = ret;\n  return this._requiredpaths;\n};\n/**\n * Returns indexes from fields and schema-level indexes (cached).\n *\n * @api private\n * @return {Array}\n */\n\n\nSchema.prototype.indexedPaths = function indexedPaths() {\n  if (this._indexedpaths) {\n    return this._indexedpaths;\n  }\n\n  this._indexedpaths = this.indexes();\n  return this._indexedpaths;\n};\n/**\n * Returns the pathType of `path` for this schema.\n *\n * Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.\n *\n * ####Example:\n *     const s = new Schema({ name: String, nested: { foo: String } });\n *     s.virtual('foo').get(() => 42);\n *     s.pathType('name'); // \"real\"\n *     s.pathType('nested'); // \"nested\"\n *     s.pathType('foo'); // \"virtual\"\n *     s.pathType('fail'); // \"adhocOrUndefined\"\n *\n * @param {String} path\n * @return {String}\n * @api public\n */\n\n\nSchema.prototype.pathType = function (path) {\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n\n  if (this.paths.hasOwnProperty(path)) {\n    return 'real';\n  }\n\n  if (this.virtuals.hasOwnProperty(path)) {\n    return 'virtual';\n  }\n\n  if (this.nested.hasOwnProperty(path)) {\n    return 'nested';\n  }\n\n  if (this.subpaths.hasOwnProperty(cleanPath) || this.subpaths.hasOwnProperty(path)) {\n    return 'real';\n  }\n\n  const singleNestedPath = this.singleNestedPaths.hasOwnProperty(cleanPath) || this.singleNestedPaths.hasOwnProperty(path);\n\n  if (singleNestedPath) {\n    return singleNestedPath === 'nested' ? 'nested' : 'real';\n  } // Look for maps\n\n\n  const mapPath = getMapPath(this, path);\n\n  if (mapPath != null) {\n    return 'real';\n  }\n\n  if (/\\.\\d+\\.|\\.\\d+$/.test(path)) {\n    return getPositionalPathType(this, path);\n  }\n\n  return 'adhocOrUndefined';\n};\n/**\n * Returns true iff this path is a child of a mixed schema.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\n\nSchema.prototype.hasMixedParent = function (path) {\n  const subpaths = path.split(/\\./g);\n  path = '';\n\n  for (let i = 0; i < subpaths.length; ++i) {\n    path = i > 0 ? path + '.' + subpaths[i] : subpaths[i];\n\n    if (this.paths.hasOwnProperty(path) && this.paths[path] instanceof MongooseTypes.Mixed) {\n      return this.paths[path];\n    }\n  }\n\n  return null;\n};\n/**\n * Setup updatedAt and createdAt timestamps to documents if enabled\n *\n * @param {Boolean|Object} timestamps timestamps options\n * @api private\n */\n\n\nSchema.prototype.setupTimestamp = function (timestamps) {\n  return setupTimestamps(this, timestamps);\n};\n/*!\n * ignore. Deprecated re: #6405\n */\n\n\nfunction getPositionalPathType(self, path) {\n  const subpaths = path.split(/\\.(\\d+)\\.|\\.(\\d+)$/).filter(Boolean);\n\n  if (subpaths.length < 2) {\n    return self.paths.hasOwnProperty(subpaths[0]) ? self.paths[subpaths[0]] : 'adhocOrUndefined';\n  }\n\n  let val = self.path(subpaths[0]);\n  let isNested = false;\n\n  if (!val) {\n    return 'adhocOrUndefined';\n  }\n\n  const last = subpaths.length - 1;\n\n  for (let i = 1; i < subpaths.length; ++i) {\n    isNested = false;\n    const subpath = subpaths[i];\n\n    if (i === last && val && !/\\D/.test(subpath)) {\n      if (val.$isMongooseDocumentArray) {\n        val = val.$embeddedSchemaType;\n      } else if (val instanceof MongooseTypes.Array) {\n        // StringSchema, NumberSchema, etc\n        val = val.caster;\n      } else {\n        val = undefined;\n      }\n\n      break;\n    } // ignore if its just a position segment: path.0.subpath\n\n\n    if (!/\\D/.test(subpath)) {\n      // Nested array\n      if (val instanceof MongooseTypes.Array && i !== last) {\n        val = val.caster;\n      }\n\n      continue;\n    }\n\n    if (!(val && val.schema)) {\n      val = undefined;\n      break;\n    }\n\n    const type = val.schema.pathType(subpath);\n    isNested = type === 'nested';\n    val = val.schema.path(subpath);\n  }\n\n  self.subpaths[path] = val;\n\n  if (val) {\n    return 'real';\n  }\n\n  if (isNested) {\n    return 'nested';\n  }\n\n  return 'adhocOrUndefined';\n}\n/*!\n * ignore\n */\n\n\nfunction getPositionalPath(self, path) {\n  getPositionalPathType(self, path);\n  return self.subpaths[path];\n}\n/**\n * Adds a method call to the queue.\n *\n * ####Example:\n *\n *     schema.methods.print = function() { console.log(this); };\n *     schema.queue('print', []); // Print the doc every one is instantiated\n *\n *     const Model = mongoose.model('Test', schema);\n *     new Model({ name: 'test' }); // Prints '{\"_id\": ..., \"name\": \"test\" }'\n *\n * @param {String} name name of the document method to call later\n * @param {Array} args arguments to pass to the method\n * @api public\n */\n\n\nSchema.prototype.queue = function (name, args) {\n  this.callQueue.push([name, args]);\n  return this;\n};\n/**\n * Defines a pre hook for the model.\n *\n * ####Example\n *\n *     const toySchema = new Schema({ name: String, created: Date });\n *\n *     toySchema.pre('save', function(next) {\n *       if (!this.created) this.created = new Date;\n *       next();\n *     });\n *\n *     toySchema.pre('validate', function(next) {\n *       if (this.name !== 'Woody') this.name = 'Woody';\n *       next();\n *     });\n *\n *     // Equivalent to calling `pre()` on `find`, `findOne`, `findOneAndUpdate`.\n *     toySchema.pre(/^find/, function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     // Equivalent to calling `pre()` on `updateOne`, `findOneAndUpdate`.\n *     toySchema.pre(['updateOne', 'findOneAndUpdate'], function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     toySchema.pre('deleteOne', function() {\n *       // Runs when you call `Toy.deleteOne()`\n *     });\n *\n *     toySchema.pre('deleteOne', { document: true }, function() {\n *       // Runs when you call `doc.deleteOne()`\n *     });\n *\n * @param {String|RegExp} The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware. For example, set `options.document` to `true` to apply this hook to `Document#deleteOne()` rather than `Query#deleteOne()`.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} callback\n * @api public\n */\n\n\nSchema.prototype.pre = function (name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.pre.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n\n    return this;\n  }\n\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n\n    for (const el of name) {\n      this.pre.apply(this, [el].concat(remainingArgs));\n    }\n\n    return this;\n  }\n\n  this.s.hooks.pre.apply(this.s.hooks, arguments);\n  return this;\n};\n/**\n * Defines a post hook for the document\n *\n *     const schema = new Schema(..);\n *     schema.post('save', function (doc) {\n *       console.log('this fired after a document was saved');\n *     });\n *\n *     schema.post('find', function(docs) {\n *       console.log('this fired after you ran a find query');\n *     });\n *\n *     schema.post(/Many$/, function(res) {\n *       console.log('this fired after you ran `updateMany()` or `deleteMany()`);\n *     });\n *\n *     const Model = mongoose.model('Model', schema);\n *\n *     const m = new Model(..);\n *     m.save(function(err) {\n *       console.log('this fires after the `post` hook');\n *     });\n *\n *     m.find(function(err, docs) {\n *       console.log('this fires after the post find hook');\n *     });\n *\n * @param {String|RegExp} The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} fn callback\n * @see middleware http://mongoosejs.com/docs/middleware.html\n * @see kareem http://npmjs.org/package/kareem\n * @api public\n */\n\n\nSchema.prototype.post = function (name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.post.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n\n    return this;\n  }\n\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n\n    for (const el of name) {\n      this.post.apply(this, [el].concat(remainingArgs));\n    }\n\n    return this;\n  }\n\n  this.s.hooks.post.apply(this.s.hooks, arguments);\n  return this;\n};\n/**\n * Registers a plugin for this schema.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin(schema => console.log(schema.path('name').path));\n *     mongoose.model('Test', s); // Prints 'name'\n *\n * @param {Function} plugin callback\n * @param {Object} [opts]\n * @see plugins\n * @api public\n */\n\n\nSchema.prototype.plugin = function (fn, opts) {\n  if (typeof fn !== 'function') {\n    throw new Error('First param to `schema.plugin()` must be a function, ' + 'got \"' + typeof fn + '\"');\n  }\n\n  if (opts && opts.deduplicate) {\n    for (const plugin of this.plugins) {\n      if (plugin.fn === fn) {\n        return this;\n      }\n    }\n  }\n\n  this.plugins.push({\n    fn: fn,\n    opts: opts\n  });\n  fn(this, opts);\n  return this;\n};\n/**\n * Adds an instance method to documents constructed from Models compiled from this schema.\n *\n * ####Example\n *\n *     const schema = kittySchema = new Schema(..);\n *\n *     schema.method('meow', function () {\n *       console.log('meeeeeoooooooooooow');\n *     })\n *\n *     const Kitty = mongoose.model('Kitty', schema);\n *\n *     const fizz = new Kitty;\n *     fizz.meow(); // meeeeeooooooooooooow\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.method({\n *         purr: function () {}\n *       , scratch: function () {}\n *     });\n *\n *     // later\n *     fizz.purr();\n *     fizz.scratch();\n *\n * NOTE: `Schema.method()` adds instance methods to the `Schema.methods` object. You can also add instance methods directly to the `Schema.methods` object as seen in the [guide](/docs/guide.html#methods)\n *\n * @param {String|Object} method name\n * @param {Function} [fn]\n * @api public\n */\n\n\nSchema.prototype.method = function (name, fn, options) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.methods[i] = name[i];\n      this.methodOptions[i] = utils.clone(options);\n    }\n  } else {\n    this.methods[name] = fn;\n    this.methodOptions[name] = utils.clone(options);\n  }\n\n  return this;\n};\n/**\n * Adds static \"class\" methods to Models compiled from this schema.\n *\n * ####Example\n *\n *     const schema = new Schema(..);\n *     // Equivalent to `schema.statics.findByName = function(name) {}`;\n *     schema.static('findByName', function(name) {\n *       return this.find({ name: name });\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.\n *\n * @param {String|Object} name\n * @param {Function} [fn]\n * @api public\n * @see Statics /docs/guide.html#statics\n */\n\n\nSchema.prototype.static = function (name, fn) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.statics[i] = name[i];\n    }\n  } else {\n    this.statics[name] = fn;\n  }\n\n  return this;\n};\n/**\n * Defines an index (most likely compound) for this schema.\n *\n * ####Example\n *\n *     schema.index({ first: 1, last: -1 })\n *\n * @param {Object} fields\n * @param {Object} [options] Options to pass to [MongoDB driver's `createIndex()` function](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#createIndex)\n * @param {String | number} [options.expires=null] Mongoose-specific syntactic sugar, uses [ms](https://www.npmjs.com/package/ms) to convert `expires` option into seconds for the `expireAfterSeconds` in the above link.\n * @api public\n */\n\n\nSchema.prototype.index = function (fields, options) {\n  fields || (fields = {});\n  options || (options = {});\n\n  if (options.expires) {\n    utils.expires(options);\n  }\n\n  this._indexes.push([fields, options]);\n\n  return this;\n};\n/**\n * Sets a schema option.\n *\n * ####Example\n *\n *     schema.set('strict'); // 'true' by default\n *     schema.set('strict', false); // Sets 'strict' to false\n *     schema.set('strict'); // 'false'\n *\n * @param {String} key option name\n * @param {Object} [value] if not passed, the current option value is returned\n * @see Schema ./\n * @api public\n */\n\n\nSchema.prototype.set = function (key, value, _tags) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n\n  switch (key) {\n    case 'read':\n      this.options[key] = readPref(value, _tags);\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n\n    case 'timestamps':\n      this.setupTimestamp(value);\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n\n    case '_id':\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n\n      if (value && !this.paths['_id']) {\n        addAutoId(this);\n      } else if (!value && this.paths['_id'] != null && this.paths['_id'].auto) {\n        this.remove('_id');\n      }\n\n      break;\n\n    default:\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n  }\n\n  return this;\n};\n/**\n * Gets a schema option.\n *\n * ####Example:\n *\n *     schema.get('strict'); // true\n *     schema.set('strict', false);\n *     schema.get('strict'); // false\n *\n * @param {String} key option name\n * @api public\n * @return {Any} the option's value\n */\n\n\nSchema.prototype.get = function (key) {\n  return this.options[key];\n};\n/**\n * The allowed index types\n *\n * @receiver Schema\n * @static indexTypes\n * @api public\n */\n\n\nconst indexTypes = '2d 2dsphere hashed text'.split(' ');\nObject.defineProperty(Schema, 'indexTypes', {\n  get: function () {\n    return indexTypes;\n  },\n  set: function () {\n    throw new Error('Cannot overwrite Schema.indexTypes');\n  }\n});\n/**\n * Returns a list of indexes that this schema declares, via `schema.index()` or by `index: true` in a path's options.\n * Indexes are expressed as an array `[spec, options]`.\n *\n * ####Example:\n *\n *     const userSchema = new Schema({\n *       email: { type: String, required: true, unique: true },\n *       registeredAt: { type: Date, index: true }\n *     });\n *\n *     // [ [ { email: 1 }, { unique: true, background: true } ],\n *     //   [ { registeredAt: 1 }, { background: true } ] ]\n *     userSchema.indexes();\n *\n * [Plugins](/docs/plugins.html) can use the return value of this function to modify a schema's indexes.\n * For example, the below plugin makes every index unique by default.\n *\n *     function myPlugin(schema) {\n *       for (const index of schema.indexes()) {\n *         if (index[1].unique === undefined) {\n *           index[1].unique = true;\n *         }\n *       }\n *     }\n *\n * @api public\n * @return {Array} list of indexes defined in the schema\n */\n\nSchema.prototype.indexes = function () {\n  return getIndexes(this);\n};\n/**\n * Creates a virtual type with the given name.\n *\n * @param {String} name\n * @param {Object} [options]\n * @param {String|Model} [options.ref] model name or model instance. Marks this as a [populate virtual](populate.html#populate-virtuals).\n * @param {String|Function} [options.localField] Required for populate virtuals. See [populate virtual docs](populate.html#populate-virtuals) for more information.\n * @param {String|Function} [options.foreignField] Required for populate virtuals. See [populate virtual docs](populate.html#populate-virtuals) for more information.\n * @param {Boolean|Function} [options.justOne=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), will be a single doc or `null`. Otherwise, the populate virtual will be an array.\n * @param {Boolean} [options.count=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), this populate virtual will contain the number of documents rather than the documents themselves when you `populate()`.\n * @param {Function|null} [options.get=null] Adds a [getter](/docs/tutorials/getters-setters.html) to this virtual to transform the populated doc.\n * @return {VirtualType}\n */\n\n\nSchema.prototype.virtual = function (name, options) {\n  if (name instanceof VirtualType || getConstructorName(name) === 'VirtualType') {\n    return this.virtual(name.path, name.options);\n  }\n\n  options = new VirtualOptions(options);\n\n  if (utils.hasUserDefinedProperty(options, ['ref', 'refPath'])) {\n    if (options.localField == null) {\n      throw new Error('Reference virtuals require `localField` option');\n    }\n\n    if (options.foreignField == null) {\n      throw new Error('Reference virtuals require `foreignField` option');\n    }\n\n    this.pre('init', function (obj) {\n      if (mpath.has(name, obj)) {\n        const _v = mpath.get(name, obj);\n\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v[0] : _v;\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v : _v == null ? [] : [_v];\n        }\n\n        mpath.unset(name, obj);\n      }\n    });\n    const virtual = this.virtual(name);\n    virtual.options = options;\n    virtual.set(function (_v) {\n      if (!this.$$populatedVirtuals) {\n        this.$$populatedVirtuals = {};\n      }\n\n      if (options.justOne || options.count) {\n        this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v[0] : _v;\n\n        if (typeof this.$$populatedVirtuals[name] !== 'object') {\n          this.$$populatedVirtuals[name] = options.count ? _v : null;\n        }\n      } else {\n        this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v : _v == null ? [] : [_v];\n        this.$$populatedVirtuals[name] = this.$$populatedVirtuals[name].filter(function (doc) {\n          return doc && typeof doc === 'object';\n        });\n      }\n    });\n\n    if (typeof options.get === 'function') {\n      virtual.get(options.get);\n    } // Workaround for gh-8198: if virtual is under document array, make a fake\n    // virtual. See gh-8210\n\n\n    const parts = name.split('.');\n    let cur = parts[0];\n\n    for (let i = 0; i < parts.length - 1; ++i) {\n      if (this.paths[cur] != null && this.paths[cur].$isMongooseDocumentArray) {\n        const remnant = parts.slice(i + 1).join('.');\n        this.paths[cur].schema.virtual(remnant, options);\n        break;\n      }\n\n      cur += '.' + parts[i + 1];\n    }\n\n    return virtual;\n  }\n\n  const virtuals = this.virtuals;\n  const parts = name.split('.');\n\n  if (this.pathType(name) === 'real') {\n    throw new Error('Virtual path \"' + name + '\"' + ' conflicts with a real path in the schema');\n  }\n\n  virtuals[name] = parts.reduce(function (mem, part, i) {\n    mem[part] || (mem[part] = i === parts.length - 1 ? new VirtualType(options, name) : {});\n    return mem[part];\n  }, this.tree);\n  return virtuals[name];\n};\n/**\n * Returns the virtual type with the given `name`.\n *\n * @param {String} name\n * @return {VirtualType}\n */\n\n\nSchema.prototype.virtualpath = function (name) {\n  return this.virtuals.hasOwnProperty(name) ? this.virtuals[name] : null;\n};\n/**\n * Removes the given `path` (or [`paths`]).\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String, age: Number });\n *     schema.remove('name');\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // SchemaNumber { ... }\n *\n * @param {String|Array} path\n * @return {Schema} the Schema instance\n * @api public\n */\n\n\nSchema.prototype.remove = function (path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n\n  if (Array.isArray(path)) {\n    path.forEach(function (name) {\n      if (this.path(name) == null && !this.nested[name]) {\n        return;\n      }\n\n      if (this.nested[name]) {\n        const allKeys = Object.keys(this.paths).concat(Object.keys(this.nested));\n\n        for (const path of allKeys) {\n          if (path.startsWith(name + '.')) {\n            delete this.paths[path];\n            delete this.nested[path];\n\n            _deletePath(this, path);\n          }\n        }\n\n        delete this.nested[name];\n\n        _deletePath(this, name);\n\n        return;\n      }\n\n      delete this.paths[name];\n\n      _deletePath(this, name);\n    }, this);\n  }\n\n  return this;\n};\n/*!\n * ignore\n */\n\n\nfunction _deletePath(schema, name) {\n  const pieces = name.split('.');\n  const last = pieces.pop();\n  let branch = schema.tree;\n\n  for (const piece of pieces) {\n    branch = branch[piece];\n  }\n\n  delete branch[last];\n}\n/**\n * Loads an ES6 class into a schema. Maps [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) + [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), [static methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static),\n * and [instance methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_body_and_method_definitions)\n * to schema [virtuals](/docs/guide.html#virtuals),\n * [statics](/docs/guide.html#statics), and\n * [methods](/docs/guide.html#methods).\n *\n * ####Example:\n *\n * ```javascript\n * const md5 = require('md5');\n * const userSchema = new Schema({ email: String });\n * class UserClass {\n *   // `gravatarImage` becomes a virtual\n *   get gravatarImage() {\n *     const hash = md5(this.email.toLowerCase());\n *     return `https://www.gravatar.com/avatar/${hash}`;\n *   }\n *\n *   // `getProfileUrl()` becomes a document method\n *   getProfileUrl() {\n *     return `https://mysite.com/${this.email}`;\n *   }\n *\n *   // `findByEmail()` becomes a static\n *   static findByEmail(email) {\n *     return this.findOne({ email });\n *   }\n * }\n *\n * // `schema` will now have a `gravatarImage` virtual, a `getProfileUrl()` method,\n * // and a `findByEmail()` static\n * userSchema.loadClass(UserClass);\n * ```\n *\n * @param {Function} model\n * @param {Boolean} [virtualsOnly] if truthy, only pulls virtuals from the class, not methods or statics\n */\n\n\nSchema.prototype.loadClass = function (model, virtualsOnly) {\n  if (model === Object.prototype || model === Function.prototype || model.prototype.hasOwnProperty('$isMongooseModelPrototype')) {\n    return this;\n  }\n\n  this.loadClass(Object.getPrototypeOf(model), virtualsOnly); // Add static methods\n\n  if (!virtualsOnly) {\n    Object.getOwnPropertyNames(model).forEach(function (name) {\n      if (name.match(/^(length|name|prototype|constructor|__proto__)$/)) {\n        return;\n      }\n\n      const prop = Object.getOwnPropertyDescriptor(model, name);\n\n      if (prop.hasOwnProperty('value')) {\n        this.static(name, prop.value);\n      }\n    }, this);\n  } // Add methods and virtuals\n\n\n  Object.getOwnPropertyNames(model.prototype).forEach(function (name) {\n    if (name.match(/^(constructor)$/)) {\n      return;\n    }\n\n    const method = Object.getOwnPropertyDescriptor(model.prototype, name);\n\n    if (!virtualsOnly) {\n      if (typeof method.value === 'function') {\n        this.method(name, method.value);\n      }\n    }\n\n    if (typeof method.get === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].getters = [];\n      }\n\n      this.virtual(name).get(method.get);\n    }\n\n    if (typeof method.set === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].setters = [];\n      }\n\n      this.virtual(name).set(method.set);\n    }\n  }, this);\n  return this;\n};\n/*!\n * ignore\n */\n\n\nSchema.prototype._getSchema = function (path) {\n  const _this = this;\n\n  const pathschema = _this.path(path);\n\n  const resultPath = [];\n\n  if (pathschema) {\n    pathschema.$fullPath = path;\n    return pathschema;\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1;\n    let foundschema;\n    let trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n\n      if (foundschema) {\n        resultPath.push(trypath);\n\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            foundschema.caster.$fullPath = resultPath.join('.');\n            return foundschema.caster;\n          } // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n\n\n          if (p !== parts.length) {\n            if (foundschema.schema) {\n              let ret;\n\n              if (parts[p] === '$' || isArrayFilter(parts[p])) {\n                if (p + 1 === parts.length) {\n                  // comments.$\n                  return foundschema;\n                } // comments.$.comments.$.title\n\n\n                ret = search(parts.slice(p + 1), foundschema.schema);\n\n                if (ret) {\n                  ret.$isUnderneathDocArray = ret.$isUnderneathDocArray || !foundschema.schema.$isSingleNested;\n                }\n\n                return ret;\n              } // this is the last path of the selector\n\n\n              ret = search(parts.slice(p), foundschema.schema);\n\n              if (ret) {\n                ret.$isUnderneathDocArray = ret.$isUnderneathDocArray || !foundschema.schema.$isSingleNested;\n              }\n\n              return ret;\n            }\n          }\n        } else if (foundschema.$isSchemaMap) {\n          if (p + 1 >= parts.length) {\n            return foundschema;\n          }\n\n          const ret = search(parts.slice(p + 1), foundschema.$__schemaType.schema);\n          return ret;\n        }\n\n        foundschema.$fullPath = resultPath.join('.');\n        return foundschema;\n      }\n    }\n  } // look for arrays\n\n\n  const parts = path.split('.');\n\n  for (let i = 0; i < parts.length; ++i) {\n    if (parts[i] === '$' || isArrayFilter(parts[i])) {\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\n      parts[i] = '0';\n    }\n  }\n\n  return search(parts, _this);\n};\n/*!\n * ignore\n */\n\n\nSchema.prototype._getPathType = function (path) {\n  const _this = this;\n\n  const pathschema = _this.path(path);\n\n  if (pathschema) {\n    return 'real';\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1,\n        foundschema,\n        trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n\n      if (foundschema) {\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            return {\n              schema: foundschema,\n              pathType: 'mixed'\n            };\n          } // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n\n\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$' || isArrayFilter(parts[p])) {\n              if (p === parts.length - 1) {\n                return {\n                  schema: foundschema,\n                  pathType: 'nested'\n                };\n              } // comments.$.comments.$.title\n\n\n              return search(parts.slice(p + 1), foundschema.schema);\n            } // this is the last path of the selector\n\n\n            return search(parts.slice(p), foundschema.schema);\n          }\n\n          return {\n            schema: foundschema,\n            pathType: foundschema.$isSingleNested ? 'nested' : 'array'\n          };\n        }\n\n        return {\n          schema: foundschema,\n          pathType: 'real'\n        };\n      } else if (p === parts.length && schema.nested[trypath]) {\n        return {\n          schema: schema,\n          pathType: 'nested'\n        };\n      }\n    }\n\n    return {\n      schema: foundschema || schema,\n      pathType: 'undefined'\n    };\n  } // look for arrays\n\n\n  return search(path.split('.'), _this);\n};\n/*!\n * ignore\n */\n\n\nfunction isArrayFilter(piece) {\n  return piece.startsWith('$[') && piece.endsWith(']');\n}\n/*!\n * Called by `compile()` _right before_ compiling. Good for making any changes to\n * the schema that should respect options set by plugins, like `id`\n */\n\n\nSchema.prototype._preCompile = function _preCompile() {\n  idGetter(this);\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = exports = Schema; // require down here because of reference issues\n\n/**\n * The various built-in Mongoose Schema Types.\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *     const ObjectId = mongoose.Schema.Types.ObjectId;\n *\n * ####Types:\n *\n * - [String](/docs/schematypes.html#strings)\n * - [Number](/docs/schematypes.html#numbers)\n * - [Boolean](/docs/schematypes.html#booleans) | Bool\n * - [Array](/docs/schematypes.html#arrays)\n * - [Buffer](/docs/schematypes.html#buffers)\n * - [Date](/docs/schematypes.html#dates)\n * - [ObjectId](/docs/schematypes.html#objectids) | Oid\n * - [Mixed](/docs/schematypes.html#mixed)\n *\n * Using this exposed access to the `Mixed` SchemaType, we can use them in our schema.\n *\n *     const Mixed = mongoose.Schema.Types.Mixed;\n *     new mongoose.Schema({ _user: Mixed })\n *\n * @api public\n */\n\nSchema.Types = MongooseTypes = require('./schema/index');\n/*!\n * ignore\n */\n\nexports.ObjectId = MongooseTypes.ObjectId;","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/schema.js"],"names":["EventEmitter","require","Kareem","MongooseError","SchemaType","SchemaTypeOptions","VirtualOptions","VirtualType","addAutoId","get","getConstructorName","getIndexes","idGetter","merge","mpath","readPref","ReadPreference","setupTimestamps","utils","validateRef","MongooseTypes","queryHooks","middlewareFunctions","documentHooks","hookNames","concat","reduce","s","hook","add","Set","id","Schema","obj","options","paths","aliases","subpaths","virtuals","singleNestedPaths","nested","inherits","callQueue","_indexes","methods","methodOptions","statics","tree","query","childSchemas","plugins","$id","mapPaths","hooks","defaultOptions","Array","isArray","definition","_idSubDoc","_id","isObject","auto_id","setupTimestamp","timestamps","aliasFields","schema","Object","keys","path","prop","alias","Error","virtual","p","set","v","$set","prototype","create","constructor","instanceOfSchema","defineProperty","configurable","enumerable","writable","clone","Constructor","base","_userProvidedOptions","map","f","slice","call","gatherChildSchemas","$globalPluginsApplied","$isRootDiscriminator","$implicitlyCreated","$originalSchemaId","discriminatorMapping","assign","discriminators","on","emit","pick","newSchema","schematype","baseOptions","strict","bufferCommands","capped","versionKey","optimisticConcurrency","minimize","autoIndex","discriminatorKey","shardKey","read","validateBeforeSave","typeKey","prefix","key","fullPath","TypeError","length","isPOJO","substr","type","_typeDef","_schema","schemaWrappedPath","addedKeys","reserved","listeners","removeListener","collection","errors","init","isModified","isNew","populated","remove","save","toObject","validate","cleanPath","_pathToPositionalSyntax","undefined","_getPath","mapPath","getMapPath","hasMixedParent","test","getPositionalPath","firstPieceOfPath","split","supressReservedKeysWarning","errorMessage","console","warn","hasUserDefinedProperty","ref","last","pop","branch","sub","msg","name","interpretAsType","schemaType","$isSchemaMap","$__schemaType","push","$isSingleNested","value","caster","model","$isMongooseDocumentArray","casterConstructor","$isMongooseArray","arrayPath","_schemaType","toAdd","$embeddedSchemaType","_arrayPath","_arrayParentPath","$isUnderneathDocArray","hasOwnProperty","replace","val","_path","re","RegExp","Types","constructorName","getFunctionName","oldObj","Mixed","cast","of","DocumentArray","charAt","toUpperCase","substring","childSchemaOptions","childSchema","schemaName","Subdocument","Buffer","isBuffer","toString","createMapNestedSchemaType","_mapType","isInlineSchema","eachPath","fn","len","i","requiredPaths","invalidate","_requiredpaths","ret","isRequired","indexedPaths","_indexedpaths","indexes","pathType","singleNestedPath","getPositionalPathType","self","filter","Boolean","isNested","subpath","queue","args","pre","remainingArgs","arguments","apply","el","post","plugin","opts","deduplicate","method","static","index","fields","expires","_tags","auto","indexTypes","localField","foreignField","has","_v","$$populatedVirtuals","justOne","count","unset","doc","parts","cur","remnant","join","mem","part","virtualpath","forEach","allKeys","startsWith","_deletePath","pieces","piece","loadClass","virtualsOnly","Function","getPrototypeOf","getOwnPropertyNames","match","getOwnPropertyDescriptor","getters","setters","_getSchema","_this","pathschema","resultPath","$fullPath","search","foundschema","trypath","isArrayFilter","_getPathType","endsWith","_preCompile","module","exports","ObjectId"],"mappings":"AAAA;AAEA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAAvC;;AACA,MAAME,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,uBAAD,CAA7B;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAMK,cAAc,GAAGL,OAAO,CAAC,0BAAD,CAA9B;;AACA,MAAMM,WAAW,GAAGN,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMO,SAAS,GAAGP,OAAO,CAAC,4BAAD,CAAzB;;AACA,MAAMQ,GAAG,GAAGR,OAAO,CAAC,eAAD,CAAnB;;AACA,MAAMS,kBAAkB,GAAGT,OAAO,CAAC,8BAAD,CAAlC;;AACA,MAAMU,UAAU,GAAGV,OAAO,CAAC,6BAAD,CAA1B;;AACA,MAAMW,QAAQ,GAAGX,OAAO,CAAC,2BAAD,CAAxB;;AACA,MAAMY,KAAK,GAAGZ,OAAO,CAAC,wBAAD,CAArB;;AACA,MAAMa,KAAK,GAAGb,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMc,QAAQ,GAAGd,OAAO,CAAC,UAAD,CAAP,CAAoBQ,GAApB,GAA0BO,cAA3C;;AACA,MAAMC,eAAe,GAAGhB,OAAO,CAAC,sCAAD,CAA/B;;AACA,MAAMiB,KAAK,GAAGjB,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMkB,WAAW,GAAGlB,OAAO,CAAC,gCAAD,CAA3B;;AAEA,IAAImB,aAAJ;;AAEA,MAAMC,UAAU,GAAGpB,OAAO,CAAC,sCAAD,CAAP,CACjBqB,mBADF;;AAEA,MAAMC,aAAa,GAAGtB,OAAO,CAAC,4BAAD,CAAP,CAAsCqB,mBAA5D;;AACA,MAAME,SAAS,GAAGH,UAAU,CAACI,MAAX,CAAkBF,aAAlB,EAChBG,MADgB,CACT,CAACC,CAAD,EAAIC,IAAJ,KAAaD,CAAC,CAACE,GAAF,CAAMD,IAAN,CADJ,EACiB,IAAIE,GAAJ,EADjB,CAAlB;AAGA,IAAIC,EAAE,GAAG,CAAT;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,OAArB,EAA8B;AAC5B,MAAI,EAAE,gBAAgBF,MAAlB,CAAJ,EAA+B;AAC7B,WAAO,IAAIA,MAAJ,CAAWC,GAAX,EAAgBC,OAAhB,CAAP;AACD;;AAED,OAAKD,GAAL,GAAWA,GAAX;AACA,OAAKE,KAAL,GAAa,EAAb;AACA,OAAKC,OAAL,GAAe,EAAf;AACA,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,iBAAL,GAAyB,EAAzB;AACA,OAAKC,MAAL,GAAc,EAAd;AACA,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,SAAL,GAAiB,EAAjB;AACA,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,OAAL,GAAe,EAAf;AACA,OAAKC,aAAL,GAAqB,EAArB;AACA,OAAKC,OAAL,GAAe,EAAf;AACA,OAAKC,IAAL,GAAY,EAAZ;AACA,OAAKC,KAAL,GAAa,EAAb;AACA,OAAKC,YAAL,GAAoB,EAApB;AACA,OAAKC,OAAL,GAAe,EAAf,CArB4B,CAsB5B;;AACA,OAAKC,GAAL,GAAW,EAAEpB,EAAb;AACA,OAAKqB,QAAL,GAAgB,EAAhB;AAEA,OAAKzB,CAAL,GAAS;AACP0B,IAAAA,KAAK,EAAE,IAAInD,MAAJ;AADA,GAAT;AAIA,OAAKgC,OAAL,GAAe,KAAKoB,cAAL,CAAoBpB,OAApB,CAAf,CA9B4B,CAgC5B;;AACA,MAAIqB,KAAK,CAACC,OAAN,CAAcvB,GAAd,CAAJ,EAAwB;AACtB,SAAK,MAAMwB,UAAX,IAAyBxB,GAAzB,EAA8B;AAC5B,WAAKJ,GAAL,CAAS4B,UAAT;AACD;AACF,GAJD,MAIO,IAAIxB,GAAJ,EAAS;AACd,SAAKJ,GAAL,CAASI,GAAT;AACD,GAvC2B,CAyC5B;;;AACA,QAAMyB,SAAS,GAAGzB,GAAG,IAAIA,GAAG,CAAC0B,GAAX,IAAkBzC,KAAK,CAAC0C,QAAN,CAAe3B,GAAG,CAAC0B,GAAnB,CAApC,CA1C4B,CA4C5B;;;AACA,QAAME,OAAO,GAAG,CAAC,KAAK1B,KAAL,CAAW,KAAX,CAAD,IACX,KAAKD,OAAL,CAAayB,GADF,IACU,CAACD,SAD3B;;AAGA,MAAIG,OAAJ,EAAa;AACXrD,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AAED,OAAKsD,cAAL,CAAoB,KAAK5B,OAAL,CAAa6B,UAAjC;AACD;AAED;AACA;AACA;;;AACA,SAASC,WAAT,CAAqBC,MAArB,EAA6B9B,KAA7B,EAAoC;AAClCA,EAAAA,KAAK,GAAGA,KAAK,IAAI+B,MAAM,CAACC,IAAP,CAAYF,MAAM,CAAC9B,KAAnB,CAAjB;;AACA,OAAK,MAAMiC,IAAX,IAAmBjC,KAAnB,EAA0B;AACxB,UAAMD,OAAO,GAAGzB,GAAG,CAACwD,MAAM,CAAC9B,KAAP,CAAaiC,IAAb,CAAD,EAAqB,SAArB,CAAnB;;AACA,QAAIlC,OAAO,IAAI,IAAf,EAAqB;AACnB;AACD;;AAED,UAAMmC,IAAI,GAAGJ,MAAM,CAAC9B,KAAP,CAAaiC,IAAb,EAAmBA,IAAhC;AACA,UAAME,KAAK,GAAGpC,OAAO,CAACoC,KAAtB;;AAEA,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AAED,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,uCAAuCF,IAAvC,GAA8C,QAA9C,GAAyDC,KAAnE,CAAN;AACD;;AAEDL,IAAAA,MAAM,CAAC7B,OAAP,CAAekC,KAAf,IAAwBD,IAAxB;AAEAJ,IAAAA,MAAM,CACJO,OADF,CACUF,KADV,EAEE7D,GAFF,CAEO,UAASgE,CAAT,EAAY;AACf,aAAO,YAAW;AAChB,YAAI,OAAO,KAAKhE,GAAZ,KAAoB,UAAxB,EAAoC;AAClC,iBAAO,KAAKA,GAAL,CAASgE,CAAT,CAAP;AACD;;AACD,eAAO,KAAKA,CAAL,CAAP;AACD,OALD;AAMD,KAPG,CAODJ,IAPC,CAFN,EAUEK,GAVF,CAUO,UAASD,CAAT,EAAY;AACf,aAAO,UAASE,CAAT,EAAY;AACjB,eAAO,KAAKC,IAAL,CAAUH,CAAV,EAAaE,CAAb,CAAP;AACD,OAFD;AAGD,KAJG,CAIDN,IAJC,CAVN;AAeD;AACF;AAED;AACA;AACA;;;AACArC,MAAM,CAAC6C,SAAP,GAAmBX,MAAM,CAACY,MAAP,CAAc9E,YAAY,CAAC6E,SAA3B,CAAnB;AACA7C,MAAM,CAAC6C,SAAP,CAAiBE,WAAjB,GAA+B/C,MAA/B;AACAA,MAAM,CAAC6C,SAAP,CAAiBG,gBAAjB,GAAoC,IAApC;AAEA;AACA;AACA;;AAEAd,MAAM,CAACe,cAAP,CAAsBjD,MAAM,CAAC6C,SAA7B,EAAwC,aAAxC,EAAuD;AACrDK,EAAAA,YAAY,EAAE,KADuC;AAErDC,EAAAA,UAAU,EAAE,KAFyC;AAGrDC,EAAAA,QAAQ,EAAE;AAH2C,CAAvD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAlB,MAAM,CAACe,cAAP,CAAsBjD,MAAM,CAAC6C,SAA7B,EAAwC,cAAxC,EAAwD;AACtDK,EAAAA,YAAY,EAAE,KADwC;AAEtDC,EAAAA,UAAU,EAAE,IAF0C;AAGtDC,EAAAA,QAAQ,EAAE;AAH4C,CAAxD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEApD,MAAM,CAAC6C,SAAP,CAAiB5C,GAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,MAAM,CAAC6C,SAAP,CAAiB1C,KAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAH,MAAM,CAAC6C,SAAP,CAAiB9B,IAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAf,MAAM,CAAC6C,SAAP,CAAiBQ,KAAjB,GAAyB,YAAW;AAClC,QAAMC,WAAW,GAAG,KAAKC,IAAL,IAAa,IAAb,GAAoBvD,MAApB,GAA6B,KAAKuD,IAAL,CAAUvD,MAA3D;AAEA,QAAML,CAAC,GAAG,IAAI2D,WAAJ,CAAgB,EAAhB,EAAoB,KAAKE,oBAAzB,CAAV;AACA7D,EAAAA,CAAC,CAAC4D,IAAF,GAAS,KAAKA,IAAd;AACA5D,EAAAA,CAAC,CAACM,GAAF,GAAQ,KAAKA,GAAb;AACAN,EAAAA,CAAC,CAACO,OAAF,GAAYhB,KAAK,CAACmE,KAAN,CAAY,KAAKnD,OAAjB,CAAZ;AACAP,EAAAA,CAAC,CAACe,SAAF,GAAc,KAAKA,SAAL,CAAe+C,GAAf,CAAmB,UAASC,CAAT,EAAY;AAAE,WAAOA,CAAP;AAAW,GAA5C,CAAd;AACA/D,EAAAA,CAAC,CAACiB,OAAF,GAAY1B,KAAK,CAACmE,KAAN,CAAY,KAAKzC,OAAjB,CAAZ;AACAjB,EAAAA,CAAC,CAACkB,aAAF,GAAkB3B,KAAK,CAACmE,KAAN,CAAY,KAAKxC,aAAjB,CAAlB;AACAlB,EAAAA,CAAC,CAACmB,OAAF,GAAY5B,KAAK,CAACmE,KAAN,CAAY,KAAKvC,OAAjB,CAAZ;AACAnB,EAAAA,CAAC,CAACqB,KAAF,GAAU9B,KAAK,CAACmE,KAAN,CAAY,KAAKrC,KAAjB,CAAV;AACArB,EAAAA,CAAC,CAACuB,OAAF,GAAYK,KAAK,CAACsB,SAAN,CAAgBc,KAAhB,CAAsBC,IAAtB,CAA2B,KAAK1C,OAAhC,CAAZ;AACAvB,EAAAA,CAAC,CAACgB,QAAF,GAAazB,KAAK,CAACmE,KAAN,CAAY,KAAK1C,QAAjB,CAAb;AACAhB,EAAAA,CAAC,CAACA,CAAF,CAAI0B,KAAJ,GAAY,KAAK1B,CAAL,CAAO0B,KAAP,CAAagC,KAAb,EAAZ;AAEA1D,EAAAA,CAAC,CAACoB,IAAF,GAAS7B,KAAK,CAACmE,KAAN,CAAY,KAAKtC,IAAjB,CAAT;AACApB,EAAAA,CAAC,CAACQ,KAAF,GAAUjB,KAAK,CAACmE,KAAN,CAAY,KAAKlD,KAAjB,CAAV;AACAR,EAAAA,CAAC,CAACa,MAAF,GAAWtB,KAAK,CAACmE,KAAN,CAAY,KAAK7C,MAAjB,CAAX;AACAb,EAAAA,CAAC,CAACU,QAAF,GAAanB,KAAK,CAACmE,KAAN,CAAY,KAAKhD,QAAjB,CAAb;AACAV,EAAAA,CAAC,CAACY,iBAAF,GAAsBrB,KAAK,CAACmE,KAAN,CAAY,KAAK9C,iBAAjB,CAAtB;AACAZ,EAAAA,CAAC,CAACsB,YAAF,GAAiB4C,kBAAkB,CAAClE,CAAD,CAAnC;AAEAA,EAAAA,CAAC,CAACW,QAAF,GAAapB,KAAK,CAACmE,KAAN,CAAY,KAAK/C,QAAjB,CAAb;AACAX,EAAAA,CAAC,CAACmE,qBAAF,GAA0B,KAAKA,qBAA/B;AACAnE,EAAAA,CAAC,CAACoE,oBAAF,GAAyB,KAAKA,oBAA9B;AACApE,EAAAA,CAAC,CAACqE,kBAAF,GAAuB,KAAKA,kBAA5B;AACArE,EAAAA,CAAC,CAACwB,GAAF,GAAQ,EAAEpB,EAAV;AACAJ,EAAAA,CAAC,CAACsE,iBAAF,GAAsB,KAAK9C,GAA3B;AACAxB,EAAAA,CAAC,CAACyB,QAAF,GAAa,GAAG3B,MAAH,CAAU,KAAK2B,QAAf,CAAb;;AAEA,MAAI,KAAK8C,oBAAL,IAA6B,IAAjC,EAAuC;AACrCvE,IAAAA,CAAC,CAACuE,oBAAF,GAAyBhC,MAAM,CAACiC,MAAP,CAAc,EAAd,EAAkB,KAAKD,oBAAvB,CAAzB;AACD;;AACD,MAAI,KAAKE,cAAL,IAAuB,IAA3B,EAAiC;AAC/BzE,IAAAA,CAAC,CAACyE,cAAF,GAAmBlC,MAAM,CAACiC,MAAP,CAAc,EAAd,EAAkB,KAAKC,cAAvB,CAAnB;AACD;;AAEDzE,EAAAA,CAAC,CAACS,OAAF,GAAY8B,MAAM,CAACiC,MAAP,CAAc,EAAd,EAAkB,KAAK/D,OAAvB,CAAZ,CAtCkC,CAwClC;;AACAT,EAAAA,CAAC,CAAC0E,EAAF,CAAK,MAAL,EAAa1B,CAAC,IAAI,KAAK2B,IAAL,CAAU,MAAV,EAAkB3B,CAAlB,CAAlB;AAEA,SAAOhD,CAAP;AACD,CA5CD;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAK,MAAM,CAAC6C,SAAP,CAAiB0B,IAAjB,GAAwB,UAASpE,KAAT,EAAgBD,OAAhB,EAAyB;AAC/C,QAAMsE,SAAS,GAAG,IAAIxE,MAAJ,CAAW,EAAX,EAAeE,OAAO,IAAI,KAAKA,OAA/B,CAAlB;;AACA,MAAI,CAACqB,KAAK,CAACC,OAAN,CAAcrB,KAAd,CAAL,EAA2B;AACzB,UAAM,IAAIhC,aAAJ,CAAkB,mDACtB,OADsB,GACZ,OAAOgC,KADK,GACG,GADrB,CAAN;AAED;;AAED,OAAK,MAAMiC,IAAX,IAAmBjC,KAAnB,EAA0B;AACxB,QAAI,KAAKK,MAAL,CAAY4B,IAAZ,CAAJ,EAAuB;AACrBoC,MAAAA,SAAS,CAAC3E,GAAV,CAAc;AAAE,SAACuC,IAAD,GAAQ3D,GAAG,CAAC,KAAKsC,IAAN,EAAYqB,IAAZ;AAAb,OAAd;AACD,KAFD,MAEO;AACL,YAAMqC,UAAU,GAAG,KAAKrC,IAAL,CAAUA,IAAV,CAAnB;;AACA,UAAIqC,UAAU,IAAI,IAAlB,EAAwB;AACtB,cAAM,IAAItG,aAAJ,CAAkB,WAAWiE,IAAX,GAAkB,wBAApC,CAAN;AACD;;AACDoC,MAAAA,SAAS,CAAC3E,GAAV,CAAc;AAAE,SAACuC,IAAD,GAAQqC;AAAV,OAAd;AACD;AACF;;AAED,SAAOD,SAAP;AACD,CApBD;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAxE,MAAM,CAAC6C,SAAP,CAAiBvB,cAAjB,GAAkC,UAASpB,OAAT,EAAkB;AAClD,OAAKsD,oBAAL,GAA4BtD,OAAO,IAAI,IAAX,GAAkB,EAAlB,GAAuBhB,KAAK,CAACmE,KAAN,CAAYnD,OAAZ,CAAnD;AAEA,QAAMwE,WAAW,GAAGjG,GAAG,CAAC,IAAD,EAAO,cAAP,EAAuB,EAAvB,CAAvB;AACAyB,EAAAA,OAAO,GAAGhB,KAAK,CAACgB,OAAN,CAAc;AACtByE,IAAAA,MAAM,EAAE,YAAYD,WAAZ,GAA0BA,WAAW,CAACC,MAAtC,GAA+C,IADjC;AAEtBC,IAAAA,cAAc,EAAE,IAFM;AAGtBC,IAAAA,MAAM,EAAE,KAHc;AAGP;AACfC,IAAAA,UAAU,EAAE,KAJU;AAKtBC,IAAAA,qBAAqB,EAAE,KALD;AAMtBC,IAAAA,QAAQ,EAAE,IANY;AAOtBC,IAAAA,SAAS,EAAE,IAPW;AAQtBC,IAAAA,gBAAgB,EAAE,KARI;AAStBC,IAAAA,QAAQ,EAAE,IATY;AAUtBC,IAAAA,IAAI,EAAE,IAVgB;AAWtBC,IAAAA,kBAAkB,EAAE,IAXE;AAYtB;AACA1D,IAAAA,GAAG,EAAE,IAbiB;AActB5B,IAAAA,EAAE,EAAE,IAdkB;AAetBuF,IAAAA,OAAO,EAAE;AAfa,GAAd,EAgBPpG,KAAK,CAACmE,KAAN,CAAYnD,OAAZ,CAhBO,CAAV;;AAkBA,MAAIA,OAAO,CAACkF,IAAZ,EAAkB;AAChBlF,IAAAA,OAAO,CAACkF,IAAR,GAAerG,QAAQ,CAACmB,OAAO,CAACkF,IAAT,CAAvB;AACD;;AAED,MAAIlF,OAAO,CAAC4E,UAAR,IAAsB,OAAO5E,OAAO,CAAC4E,UAAf,KAA8B,QAAxD,EAAkE;AAChE,UAAM,IAAI3G,aAAJ,CAAkB,gDAAiD,OAAO+B,OAAO,CAAC4E,UAAhE,GAA8E,GAAhG,CAAN;AACD;;AAED,MAAI5E,OAAO,CAAC6E,qBAAR,IAAiC,CAAC7E,OAAO,CAAC4E,UAA9C,EAA0D;AACxD,UAAM,IAAI3G,aAAJ,CAAkB,wDAAlB,CAAN;AACD;;AAED,SAAO+B,OAAP;AACD,CAnCD;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAF,MAAM,CAAC6C,SAAP,CAAiBhD,GAAjB,GAAuB,SAASA,GAAT,CAAaI,GAAb,EAAkBsF,MAAlB,EAA0B;AAC/C,MAAItF,GAAG,YAAYD,MAAf,IAA0BC,GAAG,IAAI,IAAP,IAAeA,GAAG,CAAC+C,gBAAjD,EAAoE;AAClEnE,IAAAA,KAAK,CAAC,IAAD,EAAOoB,GAAP,CAAL;AAEA,WAAO,IAAP;AACD,GAL8C,CAO/C;AACA;AACA;;;AACA,MAAIA,GAAG,CAAC0B,GAAJ,KAAY,KAAZ,IAAqB4D,MAAM,IAAI,IAAnC,EAAyC;AACvC,SAAKrF,OAAL,CAAayB,GAAb,GAAmB,KAAnB;AACD;;AAED4D,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB,CAd+C,CAe/C;;AACA,MAAIA,MAAM,KAAK,YAAX,IAA2BA,MAAM,KAAK,cAAtC,IAAwDA,MAAM,KAAK,YAAvE,EAAqF;AACnF,WAAO,IAAP;AACD;;AAED,QAAMpD,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAYlC,GAAZ,CAAb;;AAEA,OAAK,MAAMuF,GAAX,IAAkBrD,IAAlB,EAAwB;AACtB,UAAMsD,QAAQ,GAAGF,MAAM,GAAGC,GAA1B;;AAEA,QAAIvF,GAAG,CAACuF,GAAD,CAAH,IAAY,IAAhB,EAAsB;AACpB,YAAM,IAAIE,SAAJ,CAAc,oCAAoCD,QAApC,GAClB,gBADkB,GACCxF,GAAG,CAACuF,GAAD,CADJ,GACY,GAD1B,CAAN;AAED,KANqB,CAOtB;;;AACA,QAAIA,GAAG,KAAK,KAAR,IAAiBvF,GAAG,CAACuF,GAAD,CAAH,KAAa,KAAlC,EAAyC;AACvC;AACD;;AACD,QAAIvF,GAAG,CAACuF,GAAD,CAAH,YAAoBjH,WAApB,IAAmCE,GAAG,CAACwB,GAAG,CAACuF,GAAD,CAAJ,EAAW,kBAAX,EAA+B,IAA/B,CAAH,KAA4C,aAAnF,EAAkG;AAChG,WAAKhD,OAAL,CAAavC,GAAG,CAACuF,GAAD,CAAhB;AACA;AACD;;AAED,QAAIjE,KAAK,CAACC,OAAN,CAAcvB,GAAG,CAACuF,GAAD,CAAjB,KAA2BvF,GAAG,CAACuF,GAAD,CAAH,CAASG,MAAT,KAAoB,CAA/C,IAAoD1F,GAAG,CAACuF,GAAD,CAAH,CAAS,CAAT,KAAe,IAAvE,EAA6E;AAC3E,YAAM,IAAIE,SAAJ,CAAc,0CAA0CD,QAA1C,GAClB,gBADkB,GACCxF,GAAG,CAACuF,GAAD,CAAH,CAAS,CAAT,CADD,GACe,GAD7B,CAAN;AAED;;AAED,QAAI,EAAEtG,KAAK,CAAC0G,MAAN,CAAa3F,GAAG,CAACuF,GAAD,CAAhB,KAA0BvF,GAAG,CAACuF,GAAD,CAAH,YAAoBnH,iBAAhD,CAAJ,EAAwE;AACtE;AACA;AACA,UAAIkH,MAAJ,EAAY;AACV,aAAK/E,MAAL,CAAY+E,MAAM,CAACM,MAAP,CAAc,CAAd,EAAiBN,MAAM,CAACI,MAAP,GAAgB,CAAjC,CAAZ,IAAmD,IAAnD;AACD;;AACD,WAAKvD,IAAL,CAAUmD,MAAM,GAAGC,GAAnB,EAAwBvF,GAAG,CAACuF,GAAD,CAA3B;AACD,KAPD,MAOO,IAAItD,MAAM,CAACC,IAAP,CAAYlC,GAAG,CAACuF,GAAD,CAAf,EAAsBG,MAAtB,GAA+B,CAAnC,EAAsC;AAC3C;AACA,UAAIJ,MAAJ,EAAY;AACV,aAAK/E,MAAL,CAAY+E,MAAM,CAACM,MAAP,CAAc,CAAd,EAAiBN,MAAM,CAACI,MAAP,GAAgB,CAAjC,CAAZ,IAAmD,IAAnD;AACD;;AACD,WAAKvD,IAAL,CAAUqD,QAAV,EAAoBxF,GAAG,CAACuF,GAAD,CAAvB,EAL2C,CAKZ;AAChC,KANM,MAMA,IAAI,CAACvF,GAAG,CAACuF,GAAD,CAAH,CAAS,KAAKtF,OAAL,CAAaoF,OAAtB,CAAD,IAAoC,KAAKpF,OAAL,CAAaoF,OAAb,KAAyB,MAAzB,IAAmCrF,GAAG,CAACuF,GAAD,CAAH,CAASM,IAAT,CAAcA,IAAzF,EAAgG;AACrG;AACA;AACA,WAAKtF,MAAL,CAAYiF,QAAZ,IAAwB,IAAxB;AACA,WAAK5F,GAAL,CAASI,GAAG,CAACuF,GAAD,CAAZ,EAAmBC,QAAQ,GAAG,GAA9B;AACD,KALM,MAKA;AACL;AACA,YAAMM,QAAQ,GAAG9F,GAAG,CAACuF,GAAD,CAAH,CAAS,KAAKtF,OAAL,CAAaoF,OAAtB,CAAjB;;AACA,UAAIpG,KAAK,CAAC0G,MAAN,CAAaG,QAAb,KAA0B7D,MAAM,CAACC,IAAP,CAAY4D,QAAZ,EAAsBJ,MAAtB,GAA+B,CAA7D,EAAgE;AAC9D;AACA,YAAIJ,MAAJ,EAAY;AACV,eAAK/E,MAAL,CAAY+E,MAAM,CAACM,MAAP,CAAc,CAAd,EAAiBN,MAAM,CAACI,MAAP,GAAgB,CAAjC,CAAZ,IAAmD,IAAnD;AACD;;AACD,cAAMK,OAAO,GAAG,IAAIhG,MAAJ,CAAW+F,QAAX,CAAhB;;AACA,cAAME,iBAAiB,GAAG/D,MAAM,CAACiC,MAAP,CAAc,EAAd,EAAkBlE,GAAG,CAACuF,GAAD,CAArB,EAA4B;AAAEM,UAAAA,IAAI,EAAEE;AAAR,SAA5B,CAA1B;AACA,aAAK5D,IAAL,CAAUmD,MAAM,GAAGC,GAAnB,EAAwBS,iBAAxB;AACD,OARD,MAQO;AACL;AACA,YAAIV,MAAJ,EAAY;AACV,eAAK/E,MAAL,CAAY+E,MAAM,CAACM,MAAP,CAAc,CAAd,EAAiBN,MAAM,CAACI,MAAP,GAAgB,CAAjC,CAAZ,IAAmD,IAAnD;AACD;;AACD,aAAKvD,IAAL,CAAUmD,MAAM,GAAGC,GAAnB,EAAwBvF,GAAG,CAACuF,GAAD,CAA3B;AACD;AACF;AACF;;AAED,QAAMU,SAAS,GAAGhE,MAAM,CAACC,IAAP,CAAYlC,GAAZ,EAChBwD,GADgB,CACZ+B,GAAG,IAAID,MAAM,GAAGA,MAAM,GAAGC,GAAZ,GAAkBA,GADnB,CAAlB;AAEAxD,EAAAA,WAAW,CAAC,IAAD,EAAOkE,SAAP,CAAX;AACA,SAAO,IAAP;AACD,CAtFD;AAwFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAlG,MAAM,CAACmG,QAAP,GAAkBjE,MAAM,CAACY,MAAP,CAAc,IAAd,CAAlB;AACA9C,MAAM,CAAC6C,SAAP,CAAiBsD,QAAjB,GAA4BnG,MAAM,CAACmG,QAAnC;AAEA,MAAMA,QAAQ,GAAGnG,MAAM,CAACmG,QAAxB,C,CACA;;AACAA,QAAQ,CAAC,WAAD,CAAR,GACA;AACAA,QAAQ,CAAC7B,IAAT,GACA6B,QAAQ,CAACC,SAAT,GACAD,QAAQ,CAAC9B,EAAT,GACA8B,QAAQ,CAACE,cAAT,GAEA;AACAF,QAAQ,CAACG,UAAT,GACAH,QAAQ,CAACI,MAAT,GACAJ,QAAQ,CAAC1H,GAAT,GACA0H,QAAQ,CAACK,IAAT,GACAL,QAAQ,CAACM,UAAT,GACAN,QAAQ,CAACO,KAAT,GACAP,QAAQ,CAACQ,SAAT,GACAR,QAAQ,CAACS,MAAT,GACAT,QAAQ,CAACU,IAAT,GACAV,QAAQ,CAACW,QAAT,GACAX,QAAQ,CAACY,QAAT,GAAoB,CAlBpB;AAmBAZ,QAAQ,CAACG,UAAT,GAAsB,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAtG,MAAM,CAAC6C,SAAP,CAAiBT,IAAjB,GAAwB,UAASA,IAAT,EAAenC,GAAf,EAAoB;AAC1C;AACA,QAAM+G,SAAS,GAAGC,uBAAuB,CAAC7E,IAAD,CAAzC;;AACA,MAAInC,GAAG,KAAKiH,SAAZ,EAAuB;AACrB,QAAIzC,UAAU,GAAG0C,QAAQ,CAAC,IAAD,EAAO/E,IAAP,EAAa4E,SAAb,CAAzB;;AACA,QAAIvC,UAAU,IAAI,IAAlB,EAAwB;AACtB,aAAOA,UAAP;AACD,KAJoB,CAMrB;;;AACA,UAAM2C,OAAO,GAAGC,UAAU,CAAC,IAAD,EAAOjF,IAAP,CAA1B;;AACA,QAAIgF,OAAO,IAAI,IAAf,EAAqB;AACnB,aAAOA,OAAP;AACD,KAVoB,CAYrB;;;AACA3C,IAAAA,UAAU,GAAG,KAAK6C,cAAL,CAAoBN,SAApB,CAAb;;AACA,QAAIvC,UAAU,IAAI,IAAlB,EAAwB;AACtB,aAAOA,UAAP;AACD,KAhBoB,CAkBrB;;;AACA,WAAO,cAAc8C,IAAd,CAAmBnF,IAAnB,IACHoF,iBAAiB,CAAC,IAAD,EAAOpF,IAAP,CADd,GAEH8E,SAFJ;AAGD,GAzByC,CA2B1C;;;AACA,QAAMO,gBAAgB,GAAGrF,IAAI,CAACsF,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAzB;;AACA,MAAIvB,QAAQ,CAACsB,gBAAD,CAAR,IAA8B,CAAC,KAAKvH,OAAL,CAAayH,0BAAhD,EAA4E;AAC1E,UAAMC,YAAY,GAAI,KAAIH,gBAAiB,qEAAtB,GACnB,uDADmB,GAEnB,+EAFF;AAIAI,IAAAA,OAAO,CAACC,IAAR,CAAaF,YAAb;AACD;;AAED,MAAI,OAAO3H,GAAP,KAAe,QAAf,IAA2Bf,KAAK,CAAC6I,sBAAN,CAA6B9H,GAA7B,EAAkC,KAAlC,CAA/B,EAAyE;AACvEd,IAAAA,WAAW,CAACc,GAAG,CAAC+H,GAAL,EAAU5F,IAAV,CAAX;AACD,GAvCyC,CAyC1C;;;AACA,QAAM/B,QAAQ,GAAG+B,IAAI,CAACsF,KAAL,CAAW,IAAX,CAAjB;AACA,QAAMO,IAAI,GAAG5H,QAAQ,CAAC6H,GAAT,EAAb;AACA,MAAIC,MAAM,GAAG,KAAKpH,IAAlB;AACA,MAAI0E,QAAQ,GAAG,EAAf;;AAEA,OAAK,MAAM2C,GAAX,IAAkB/H,QAAlB,EAA4B;AAC1BoF,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,CAACA,QAAQ,CAACE,MAAT,GAAkB,CAAlB,GAAsB,GAAtB,GAA4B,EAA7B,IAAmCyC,GAA1D;;AACA,QAAI,CAACD,MAAM,CAACC,GAAD,CAAX,EAAkB;AAChB,WAAK5H,MAAL,CAAYiF,QAAZ,IAAwB,IAAxB;AACA0C,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAc,EAAd;AACD;;AACD,QAAI,OAAOD,MAAM,CAACC,GAAD,CAAb,KAAuB,QAA3B,EAAqC;AACnC,YAAMC,GAAG,GAAG,6BAA6BjG,IAA7B,GAAoC,KAApC,GACN,eADM,GAENqD,QAFM,GAGN,wBAHM,GAGqB0C,MAAM,CAACC,GAAD,CAAN,CAAYE,IAHjC,GAIN,GAJN;AAKA,YAAM,IAAI/F,KAAJ,CAAU8F,GAAV,CAAN;AACD;;AACDF,IAAAA,MAAM,GAAGA,MAAM,CAACC,GAAD,CAAf;AACD;;AAEDD,EAAAA,MAAM,CAACF,IAAD,CAAN,GAAe/I,KAAK,CAACmE,KAAN,CAAYpD,GAAZ,CAAf;AAEA,OAAKE,KAAL,CAAWiC,IAAX,IAAmB,KAAKmG,eAAL,CAAqBnG,IAArB,EAA2BnC,GAA3B,EAAgC,KAAKC,OAArC,CAAnB;AACA,QAAMsI,UAAU,GAAG,KAAKrI,KAAL,CAAWiC,IAAX,CAAnB;;AAEA,MAAIoG,UAAU,CAACC,YAAf,EAA6B;AAC3B;AACA;AACA;AACA,UAAMrB,OAAO,GAAGhF,IAAI,GAAG,KAAvB;AAEA,SAAKjC,KAAL,CAAWiH,OAAX,IAAsBoB,UAAU,CAACE,aAAjC;AACA,SAAKtH,QAAL,CAAcuH,IAAd,CAAmB,KAAKxI,KAAL,CAAWiH,OAAX,CAAnB;AACD;;AAED,MAAIoB,UAAU,CAACI,eAAf,EAAgC;AAC9B,SAAK,MAAMpD,GAAX,IAAkBtD,MAAM,CAACC,IAAP,CAAYqG,UAAU,CAACvG,MAAX,CAAkB9B,KAA9B,CAAlB,EAAwD;AACtD,WAAKI,iBAAL,CAAuB6B,IAAI,GAAG,GAAP,GAAaoD,GAApC,IAA2CgD,UAAU,CAACvG,MAAX,CAAkB9B,KAAlB,CAAwBqF,GAAxB,CAA3C;AACD;;AACD,SAAK,MAAMA,GAAX,IAAkBtD,MAAM,CAACC,IAAP,CAAYqG,UAAU,CAACvG,MAAX,CAAkB1B,iBAA9B,CAAlB,EAAoE;AAClE,WAAKA,iBAAL,CAAuB6B,IAAI,GAAG,GAAP,GAAaoD,GAApC,IACEgD,UAAU,CAACvG,MAAX,CAAkB1B,iBAAlB,CAAoCiF,GAApC,CADF;AAED;;AACD,SAAK,MAAMA,GAAX,IAAkBtD,MAAM,CAACC,IAAP,CAAYqG,UAAU,CAACvG,MAAX,CAAkB5B,QAA9B,CAAlB,EAA2D;AACzD,WAAKE,iBAAL,CAAuB6B,IAAI,GAAG,GAAP,GAAaoD,GAApC,IACEgD,UAAU,CAACvG,MAAX,CAAkB5B,QAAlB,CAA2BmF,GAA3B,CADF;AAED;;AACD,SAAK,MAAMA,GAAX,IAAkBtD,MAAM,CAACC,IAAP,CAAYqG,UAAU,CAACvG,MAAX,CAAkBzB,MAA9B,CAAlB,EAAyD;AACvD,WAAKD,iBAAL,CAAuB6B,IAAI,GAAG,GAAP,GAAaoD,GAApC,IAA2C,QAA3C;AACD;;AAEDtD,IAAAA,MAAM,CAACe,cAAP,CAAsBuF,UAAU,CAACvG,MAAjC,EAAyC,MAAzC,EAAiD;AAC/CiB,MAAAA,YAAY,EAAE,IADiC;AAE/CC,MAAAA,UAAU,EAAE,KAFmC;AAG/CC,MAAAA,QAAQ,EAAE,KAHqC;AAI/CyF,MAAAA,KAAK,EAAE,KAAKtF;AAJmC,KAAjD;AAOAiF,IAAAA,UAAU,CAACM,MAAX,CAAkBvF,IAAlB,GAAyB,KAAKA,IAA9B;AACA,SAAKtC,YAAL,CAAkB0H,IAAlB,CAAuB;AACrB1G,MAAAA,MAAM,EAAEuG,UAAU,CAACvG,MADE;AAErB8G,MAAAA,KAAK,EAAEP,UAAU,CAACM;AAFG,KAAvB;AAID,GA5BD,MA4BO,IAAIN,UAAU,CAACQ,wBAAf,EAAyC;AAC9C9G,IAAAA,MAAM,CAACe,cAAP,CAAsBuF,UAAU,CAACvG,MAAjC,EAAyC,MAAzC,EAAiD;AAC/CiB,MAAAA,YAAY,EAAE,IADiC;AAE/CC,MAAAA,UAAU,EAAE,KAFmC;AAG/CC,MAAAA,QAAQ,EAAE,KAHqC;AAI/CyF,MAAAA,KAAK,EAAE,KAAKtF;AAJmC,KAAjD;AAOAiF,IAAAA,UAAU,CAACS,iBAAX,CAA6B1F,IAA7B,GAAoC,KAAKA,IAAzC;AACA,SAAKtC,YAAL,CAAkB0H,IAAlB,CAAuB;AACrB1G,MAAAA,MAAM,EAAEuG,UAAU,CAACvG,MADE;AAErB8G,MAAAA,KAAK,EAAEP,UAAU,CAACS;AAFG,KAAvB;AAID;;AAED,MAAIT,UAAU,CAACU,gBAAX,IAA+BV,UAAU,CAACM,MAAX,YAA6B1K,UAAhE,EAA4E;AAC1E,QAAI+K,SAAS,GAAG/G,IAAhB;AACA,QAAIgH,WAAW,GAAGZ,UAAlB;AAEA,UAAMa,KAAK,GAAG,EAAd;;AACA,WAAOD,WAAW,CAACF,gBAAnB,EAAqC;AACnCC,MAAAA,SAAS,GAAGA,SAAS,GAAG,IAAxB,CADmC,CAGnC;;AACA,UAAIC,WAAW,CAACJ,wBAAhB,EAA0C;AACxCI,QAAAA,WAAW,CAACE,mBAAZ,CAAgCC,UAAhC,GAA6CJ,SAA7C;AACAC,QAAAA,WAAW,CAACE,mBAAZ,CAAgCE,gBAAhC,GAAmDpH,IAAnD;AACAgH,QAAAA,WAAW,GAAGA,WAAW,CAACE,mBAAZ,CAAgCjG,KAAhC,EAAd;AACD,OAJD,MAIO;AACL+F,QAAAA,WAAW,CAACN,MAAZ,CAAmBS,UAAnB,GAAgCJ,SAAhC;AACAC,QAAAA,WAAW,CAACN,MAAZ,CAAmBU,gBAAnB,GAAsCpH,IAAtC;AACAgH,QAAAA,WAAW,GAAGA,WAAW,CAACN,MAAZ,CAAmBzF,KAAnB,EAAd;AACD;;AAED+F,MAAAA,WAAW,CAAChH,IAAZ,GAAmB+G,SAAnB;AACAE,MAAAA,KAAK,CAACV,IAAN,CAAWS,WAAX;AACD;;AAED,SAAK,MAAMA,WAAX,IAA0BC,KAA1B,EAAiC;AAC/B,WAAKhJ,QAAL,CAAc+I,WAAW,CAAChH,IAA1B,IAAkCgH,WAAlC;AACD;AACF;;AAED,MAAIZ,UAAU,CAACQ,wBAAf,EAAyC;AACvC,SAAK,MAAMxD,GAAX,IAAkBtD,MAAM,CAACC,IAAP,CAAYqG,UAAU,CAACvG,MAAX,CAAkB9B,KAA9B,CAAlB,EAAwD;AACtD,YAAMiJ,WAAW,GAAGZ,UAAU,CAACvG,MAAX,CAAkB9B,KAAlB,CAAwBqF,GAAxB,CAApB;AACA,WAAKnF,QAAL,CAAc+B,IAAI,GAAG,GAAP,GAAaoD,GAA3B,IAAkC4D,WAAlC;;AACA,UAAI,OAAOA,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,IAAI,IAAtD,EAA4D;AAC1DA,QAAAA,WAAW,CAACK,qBAAZ,GAAoC,IAApC;AACD;AACF;;AACD,SAAK,MAAMjE,GAAX,IAAkBtD,MAAM,CAACC,IAAP,CAAYqG,UAAU,CAACvG,MAAX,CAAkB5B,QAA9B,CAAlB,EAA2D;AACzD,YAAM+I,WAAW,GAAGZ,UAAU,CAACvG,MAAX,CAAkB5B,QAAlB,CAA2BmF,GAA3B,CAApB;AACA,WAAKnF,QAAL,CAAc+B,IAAI,GAAG,GAAP,GAAaoD,GAA3B,IAAkC4D,WAAlC;;AACA,UAAI,OAAOA,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,IAAI,IAAtD,EAA4D;AAC1DA,QAAAA,WAAW,CAACK,qBAAZ,GAAoC,IAApC;AACD;AACF;;AACD,SAAK,MAAMjE,GAAX,IAAkBtD,MAAM,CAACC,IAAP,CAAYqG,UAAU,CAACvG,MAAX,CAAkB1B,iBAA9B,CAAlB,EAAoE;AAClE,YAAM6I,WAAW,GAAGZ,UAAU,CAACvG,MAAX,CAAkB1B,iBAAlB,CAAoCiF,GAApC,CAApB;AACA,WAAKnF,QAAL,CAAc+B,IAAI,GAAG,GAAP,GAAaoD,GAA3B,IAAkC4D,WAAlC;;AACA,UAAI,OAAOA,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,IAAI,IAAtD,EAA4D;AAC1DA,QAAAA,WAAW,CAACK,qBAAZ,GAAoC,IAApC;AACD;AACF;AACF;;AAED,SAAO,IAAP;AACD,CA/KD;AAiLA;AACA;AACA;;;AAEA,SAAS5F,kBAAT,CAA4B5B,MAA5B,EAAoC;AAClC,QAAMhB,YAAY,GAAG,EAArB;;AAEA,OAAK,MAAMmB,IAAX,IAAmBF,MAAM,CAACC,IAAP,CAAYF,MAAM,CAAC9B,KAAnB,CAAnB,EAA8C;AAC5C,UAAMsE,UAAU,GAAGxC,MAAM,CAAC9B,KAAP,CAAaiC,IAAb,CAAnB;;AACA,QAAIqC,UAAU,CAACuE,wBAAX,IAAuCvE,UAAU,CAACmE,eAAtD,EAAuE;AACrE3H,MAAAA,YAAY,CAAC0H,IAAb,CAAkB;AAAE1G,QAAAA,MAAM,EAAEwC,UAAU,CAACxC,MAArB;AAA6B8G,QAAAA,KAAK,EAAEtE,UAAU,CAACqE;AAA/C,OAAlB;AACD;AACF;;AAED,SAAO7H,YAAP;AACD;AAED;AACA;AACA;;;AAEA,SAASkG,QAAT,CAAkBlF,MAAlB,EAA0BG,IAA1B,EAAgC4E,SAAhC,EAA2C;AACzC,MAAI/E,MAAM,CAAC9B,KAAP,CAAauJ,cAAb,CAA4BtH,IAA5B,CAAJ,EAAuC;AACrC,WAAOH,MAAM,CAAC9B,KAAP,CAAaiC,IAAb,CAAP;AACD;;AACD,MAAIH,MAAM,CAAC5B,QAAP,CAAgBqJ,cAAhB,CAA+B1C,SAA/B,CAAJ,EAA+C;AAC7C,WAAO/E,MAAM,CAAC5B,QAAP,CAAgB2G,SAAhB,CAAP;AACD;;AACD,MAAI/E,MAAM,CAAC1B,iBAAP,CAAyBmJ,cAAzB,CAAwC1C,SAAxC,KAAsD,OAAO/E,MAAM,CAAC1B,iBAAP,CAAyByG,SAAzB,CAAP,KAA+C,QAAzG,EAAmH;AACjH,WAAO/E,MAAM,CAAC1B,iBAAP,CAAyByG,SAAzB,CAAP;AACD;;AAED,SAAO,IAAP;AACD;AAED;AACA;AACA;;;AAEA,SAASC,uBAAT,CAAiC7E,IAAjC,EAAuC;AACrC,MAAI,CAAC,QAAQmF,IAAR,CAAanF,IAAb,CAAL,EAAyB;AACvB,WAAOA,IAAP;AACD;;AACD,SAAOA,IAAI,CAACuH,OAAL,CAAa,UAAb,EAAyB,KAAzB,EAAgCA,OAAhC,CAAwC,QAAxC,EAAkD,IAAlD,CAAP;AACD;AAED;AACA;AACA;;;AAEA,SAAStC,UAAT,CAAoBpF,MAApB,EAA4BG,IAA5B,EAAkC;AAChC,MAAIH,MAAM,CAACb,QAAP,CAAgBuE,MAAhB,KAA2B,CAA/B,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,OAAK,MAAMiE,GAAX,IAAkB3H,MAAM,CAACb,QAAzB,EAAmC;AACjC,UAAMyI,KAAK,GAAGD,GAAG,CAACxH,IAAlB;AACA,UAAM0H,EAAE,GAAG,IAAIC,MAAJ,CAAW,MAAMF,KAAK,CAACF,OAAN,CAAc,SAAd,EAAyB,UAAzB,CAAN,GAA6C,GAAxD,CAAX;;AACA,QAAIG,EAAE,CAACvC,IAAH,CAAQnF,IAAR,CAAJ,EAAmB;AACjB,aAAOH,MAAM,CAAC9B,KAAP,CAAa0J,KAAb,CAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AAEA3H,MAAM,CAACe,cAAP,CAAsBjD,MAAM,CAAC6C,SAA7B,EAAwC,MAAxC,EAAgD;AAC9CK,EAAAA,YAAY,EAAE,IADgC;AAE9CC,EAAAA,UAAU,EAAE,KAFkC;AAG9CC,EAAAA,QAAQ,EAAE,IAHoC;AAI9CyF,EAAAA,KAAK,EAAE;AAJuC,CAAhD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA7I,MAAM,CAAC6C,SAAP,CAAiB0F,eAAjB,GAAmC,UAASnG,IAAT,EAAenC,GAAf,EAAoBC,OAApB,EAA6B;AAC9D,MAAID,GAAG,YAAY7B,UAAnB,EAA+B;AAC7B,QAAI6B,GAAG,CAACmC,IAAJ,KAAaA,IAAjB,EAAuB;AACrB,aAAOnC,GAAP;AACD;;AACD,UAAMoD,KAAK,GAAGpD,GAAG,CAACoD,KAAJ,EAAd;AACAA,IAAAA,KAAK,CAACjB,IAAN,GAAaA,IAAb;AACA,WAAOiB,KAAP;AACD,GAR6D,CAU9D;AACA;;;AACA,QAAMjE,aAAa,GAAG,KAAKmE,IAAL,IAAa,IAAb,GAAoB,KAAKA,IAAL,CAAUvD,MAAV,CAAiBgK,KAArC,GAA6ChK,MAAM,CAACgK,KAA1E;;AAEA,MAAI,CAAC9K,KAAK,CAAC0G,MAAN,CAAa3F,GAAb,CAAD,IAAsB,EAAEA,GAAG,YAAY5B,iBAAjB,CAA1B,EAA+D;AAC7D,UAAM4L,eAAe,GAAG/K,KAAK,CAACgL,eAAN,CAAsBjK,GAAG,CAAC8C,WAA1B,CAAxB;;AACA,QAAIkH,eAAe,KAAK,QAAxB,EAAkC;AAChC,YAAME,MAAM,GAAGlK,GAAf;AACAA,MAAAA,GAAG,GAAG,EAAN;AACAA,MAAAA,GAAG,CAACC,OAAO,CAACoF,OAAT,CAAH,GAAuB6E,MAAvB;AACD;AACF,GArB6D,CAuB9D;AACA;AACA;;;AACA,MAAIrE,IAAI,GAAG7F,GAAG,CAACC,OAAO,CAACoF,OAAT,CAAH,KAAyBpF,OAAO,CAACoF,OAAR,KAAoB,MAApB,IAA8B,CAACrF,GAAG,CAAC6F,IAAJ,CAASA,IAAjE,IACP7F,GAAG,CAACC,OAAO,CAACoF,OAAT,CADI,GAEP,EAFJ;AAGA,MAAIgD,IAAJ;;AAEA,MAAIpJ,KAAK,CAAC0G,MAAN,CAAaE,IAAb,KAAsBA,IAAI,KAAK,OAAnC,EAA4C;AAC1C,WAAO,IAAI1G,aAAa,CAACgL,KAAlB,CAAwBhI,IAAxB,EAA8BnC,GAA9B,CAAP;AACD;;AAED,MAAIsB,KAAK,CAACC,OAAN,CAAcsE,IAAd,KAAuBA,IAAI,KAAKvE,KAAhC,IAAyCuE,IAAI,KAAK,OAAlD,IAA6DA,IAAI,KAAK1G,aAAa,CAACmC,KAAxF,EAA+F;AAC7F;AACA,QAAI8I,IAAI,GAAIvE,IAAI,KAAKvE,KAAT,IAAkBuE,IAAI,KAAK,OAA5B,GACP7F,GAAG,CAACoK,IAAJ,IAAYpK,GAAG,CAACqK,EADT,GAEPxE,IAAI,CAAC,CAAD,CAFR;;AAIA,QAAIuE,IAAI,IAAIA,IAAI,CAACrH,gBAAjB,EAAmC;AACjC,UAAI,EAAEqH,IAAI,YAAYrK,MAAlB,CAAJ,EAA+B;AAC7B,cAAM,IAAI0F,SAAJ,CAAc,4BAA4BtD,IAA5B,GAClB,qGADkB,GAElB,kDAFI,CAAN;AAGD;;AACD,aAAO,IAAIhD,aAAa,CAACmL,aAAlB,CAAgCnI,IAAhC,EAAsCiI,IAAtC,EAA4CpK,GAA5C,CAAP;AACD;;AACD,QAAIoK,IAAI,IACJA,IAAI,CAACnK,OAAO,CAACoF,OAAT,CADJ,IAEA+E,IAAI,CAACnK,OAAO,CAACoF,OAAT,CAAJ,CAAsBtC,gBAF1B,EAE4C;AAC1C,UAAI,EAAEqH,IAAI,CAACnK,OAAO,CAACoF,OAAT,CAAJ,YAAiCtF,MAAnC,CAAJ,EAAgD;AAC9C,cAAM,IAAI0F,SAAJ,CAAc,4BAA4BtD,IAA5B,GAClB,qGADkB,GAElB,kDAFI,CAAN;AAGD;;AACD,aAAO,IAAIhD,aAAa,CAACmL,aAAlB,CAAgCnI,IAAhC,EAAsCiI,IAAI,CAACnK,OAAO,CAACoF,OAAT,CAA1C,EAA6DrF,GAA7D,EAAkEoK,IAAlE,CAAP;AACD;;AAED,QAAI9I,KAAK,CAACC,OAAN,CAAc6I,IAAd,CAAJ,EAAyB;AACvB,aAAO,IAAIjL,aAAa,CAACmC,KAAlB,CAAwBa,IAAxB,EAA8B,KAAKmG,eAAL,CAAqBnG,IAArB,EAA2BiI,IAA3B,EAAiCnK,OAAjC,CAA9B,EAAyED,GAAzE,CAAP;AACD;;AAED,QAAI,OAAOoK,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,MAAAA,IAAI,GAAGjL,aAAa,CAACiL,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BJ,IAAI,CAACK,SAAL,CAAe,CAAf,CAAhC,CAApB;AACD,KAFD,MAEO,IAAIL,IAAI,KAAK,CAACA,IAAI,CAACnK,OAAO,CAACoF,OAAT,CAAL,IAA2BpF,OAAO,CAACoF,OAAR,KAAoB,MAApB,IAA8B+E,IAAI,CAACvE,IAAL,CAAUA,IAAxE,CAAJ,IACJ5G,KAAK,CAAC0G,MAAN,CAAayE,IAAb,CADA,EACoB;AACzB,UAAInI,MAAM,CAACC,IAAP,CAAYkI,IAAZ,EAAkB1E,MAAtB,EAA8B;AAC5B;AACA;AACA;AACA,cAAMgF,kBAAkB,GAAG;AAAE3F,UAAAA,QAAQ,EAAE9E,OAAO,CAAC8E;AAApB,SAA3B;;AACA,YAAI9E,OAAO,CAACoF,OAAZ,EAAqB;AACnBqF,UAAAA,kBAAkB,CAACrF,OAAnB,GAA6BpF,OAAO,CAACoF,OAArC;AACD,SAP2B,CAQ5B;;;AACA,YAAIpF,OAAO,CAACwJ,cAAR,CAAuB,QAAvB,CAAJ,EAAsC;AACpCiB,UAAAA,kBAAkB,CAAChG,MAAnB,GAA4BzE,OAAO,CAACyE,MAApC;AACD;;AACD,YAAI,KAAKnB,oBAAL,CAA0BkG,cAA1B,CAAyC,KAAzC,CAAJ,EAAqD;AACnDiB,UAAAA,kBAAkB,CAAChJ,GAAnB,GAAyB,KAAK6B,oBAAL,CAA0B7B,GAAnD;AACD,SAFD,MAEO,IAAI3B,MAAM,CAACgK,KAAP,CAAaO,aAAb,CAA2BjJ,cAA3B,CAA0CK,GAA1C,IAAiD,IAArD,EAA2D;AAChEgJ,UAAAA,kBAAkB,CAAChJ,GAAnB,GAAyB3B,MAAM,CAACgK,KAAP,CAAaO,aAAb,CAA2BjJ,cAA3B,CAA0CK,GAAnE;AACD;;AACD,cAAMiJ,WAAW,GAAG,IAAI5K,MAAJ,CAAWqK,IAAX,EAAiBM,kBAAjB,CAApB;AACAC,QAAAA,WAAW,CAAC5G,kBAAZ,GAAiC,IAAjC;AACA,eAAO,IAAI5E,aAAa,CAACmL,aAAlB,CAAgCnI,IAAhC,EAAsCwI,WAAtC,EAAmD3K,GAAnD,CAAP;AACD,OApBD,MAoBO;AACL;AACA,eAAO,IAAIb,aAAa,CAACmC,KAAlB,CAAwBa,IAAxB,EAA8BhD,aAAa,CAACgL,KAA5C,EAAmDnK,GAAnD,CAAP;AACD;AACF;;AAED,QAAIoK,IAAJ,EAAU;AACRvE,MAAAA,IAAI,GAAGuE,IAAI,CAACnK,OAAO,CAACoF,OAAT,CAAJ,KAA0BpF,OAAO,CAACoF,OAAR,KAAoB,MAApB,IAA8B,CAAC+E,IAAI,CAACvE,IAAL,CAAUA,IAAnE,IACHuE,IAAI,CAACnK,OAAO,CAACoF,OAAT,CADD,GAEH+E,IAFJ;AAIA/B,MAAAA,IAAI,GAAG,OAAOxC,IAAP,KAAgB,QAAhB,GACHA,IADG,GAEHA,IAAI,CAAC+E,UAAL,IAAmB3L,KAAK,CAACgL,eAAN,CAAsBpE,IAAtB,CAFvB,CALQ,CASR;;AACA,UAAIwC,IAAI,KAAK,WAAb,EAA0B;AACxBA,QAAAA,IAAI,GAAG,MAAP;AACD;;AAED,UAAI,CAAClJ,aAAa,CAACsK,cAAd,CAA6BpB,IAA7B,CAAL,EAAyC;AACvC,cAAM,IAAI5C,SAAJ,CAAc,mCACjB,KAAI4C,IAAK,6CAA4ClG,IAAK,KADzC,GAElB,0EAFI,CAAN;AAGD;AACF;;AAED,WAAO,IAAIhD,aAAa,CAACmC,KAAlB,CAAwBa,IAAxB,EAA8BiI,IAAI,IAAIjL,aAAa,CAACgL,KAApD,EAA2DnK,GAA3D,EAAgEC,OAAhE,CAAP;AACD;;AAED,MAAI4F,IAAI,IAAIA,IAAI,CAAC9C,gBAAjB,EAAmC;AACjC,WAAO,IAAI5D,aAAa,CAAC0L,WAAlB,CAA8BhF,IAA9B,EAAoC1D,IAApC,EAA0CnC,GAA1C,CAAP;AACD;;AAED,MAAI8K,MAAM,CAACC,QAAP,CAAgBlF,IAAhB,CAAJ,EAA2B;AACzBwC,IAAAA,IAAI,GAAG,QAAP;AACD,GAFD,MAEO,IAAI,OAAOxC,IAAP,KAAgB,UAAhB,IAA8B,OAAOA,IAAP,KAAgB,QAAlD,EAA4D;AACjEwC,IAAAA,IAAI,GAAGxC,IAAI,CAAC+E,UAAL,IAAmB3L,KAAK,CAACgL,eAAN,CAAsBpE,IAAtB,CAA1B;AACD,GAFM,MAEA;AACLwC,IAAAA,IAAI,GAAGxC,IAAI,IAAI,IAAR,GAAe,KAAKA,IAApB,GAA2BA,IAAI,CAACmF,QAAL,EAAlC;AACD;;AAED,MAAI3C,IAAJ,EAAU;AACRA,IAAAA,IAAI,GAAGA,IAAI,CAACkC,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BnC,IAAI,CAACoC,SAAL,CAAe,CAAf,CAAtC;AACD,GApI6D,CAqI9D;AACA;;;AACA,MAAIpC,IAAI,KAAK,UAAb,EAAyB;AACvBA,IAAAA,IAAI,GAAG,UAAP;AACD,GAzI6D,CA0I9D;;;AACA,MAAIA,IAAI,KAAK,WAAb,EAA0B;AACxBA,IAAAA,IAAI,GAAG,MAAP;AACD;;AAED,MAAIlJ,aAAa,CAACkJ,IAAD,CAAb,IAAuB,IAA3B,EAAiC;AAC/B,UAAM,IAAI5C,SAAJ,CAAe,mCAAkC4C,IAAK,YAAxC,GACjB,0BAAyBlG,IAAK,UADb,GAElB,sEAFI,CAAN;AAGD;;AAED,QAAMoG,UAAU,GAAG,IAAIpJ,aAAa,CAACkJ,IAAD,CAAjB,CAAwBlG,IAAxB,EAA8BnC,GAA9B,CAAnB;;AAEA,MAAIuI,UAAU,CAACC,YAAf,EAA6B;AAC3ByC,IAAAA,yBAAyB,CAAC,IAAD,EAAO1C,UAAP,EAAmBpG,IAAnB,EAAyBnC,GAAzB,EAA8BC,OAA9B,CAAzB;AACD;;AAED,SAAOsI,UAAP;AACD,CA5JD;AA8JA;AACA;AACA;;;AAEA,SAAS0C,yBAAT,CAAmCjJ,MAAnC,EAA2CuG,UAA3C,EAAuDpG,IAAvD,EAA6DnC,GAA7D,EAAkEC,OAAlE,EAA2E;AACzE,QAAMkH,OAAO,GAAGhF,IAAI,GAAG,KAAvB;AACA,MAAI+I,QAAQ,GAAG;AAAErF,IAAAA,IAAI,EAAE;AAAR,GAAf;;AACA,MAAI5G,KAAK,CAAC6I,sBAAN,CAA6B9H,GAA7B,EAAkC,IAAlC,CAAJ,EAA6C;AAC3C,UAAMmL,cAAc,GAAGlM,KAAK,CAAC0G,MAAN,CAAa3F,GAAG,CAACqK,EAAjB,KACrBpI,MAAM,CAACC,IAAP,CAAYlC,GAAG,CAACqK,EAAhB,EAAoB3E,MAApB,GAA6B,CADR,IAErB,CAACzG,KAAK,CAAC6I,sBAAN,CAA6B9H,GAAG,CAACqK,EAAjC,EAAqCrI,MAAM,CAAC/B,OAAP,CAAeoF,OAApD,CAFH;;AAGA,QAAI8F,cAAJ,EAAoB;AAClBD,MAAAA,QAAQ,GAAG;AAAE,SAAClJ,MAAM,CAAC/B,OAAP,CAAeoF,OAAhB,GAA0B,IAAItF,MAAJ,CAAWC,GAAG,CAACqK,EAAf;AAA5B,OAAX;AACD,KAFD,MAEO,IAAIpL,KAAK,CAAC0G,MAAN,CAAa3F,GAAG,CAACqK,EAAjB,CAAJ,EAA0B;AAC/Ba,MAAAA,QAAQ,GAAGjJ,MAAM,CAACiC,MAAP,CAAc,EAAd,EAAkBlE,GAAG,CAACqK,EAAtB,CAAX;AACD,KAFM,MAEA;AACLa,MAAAA,QAAQ,GAAG;AAAE,SAAClJ,MAAM,CAAC/B,OAAP,CAAeoF,OAAhB,GAA0BrF,GAAG,CAACqK;AAAhC,OAAX;AACD;;AAED,QAAIpL,KAAK,CAAC6I,sBAAN,CAA6B9H,GAA7B,EAAkC,KAAlC,CAAJ,EAA8C;AAC5CkL,MAAAA,QAAQ,CAACnD,GAAT,GAAe/H,GAAG,CAAC+H,GAAnB;AACD;AACF;;AACDQ,EAAAA,UAAU,CAACE,aAAX,GAA2BzG,MAAM,CAACsG,eAAP,CAAuBnB,OAAvB,EAAgC+D,QAAhC,EAA0CjL,OAA1C,CAA3B;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAF,MAAM,CAAC6C,SAAP,CAAiBwI,QAAjB,GAA4B,UAASC,EAAT,EAAa;AACvC,QAAMnJ,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAY,KAAKhC,KAAjB,CAAb;AACA,QAAMoL,GAAG,GAAGpJ,IAAI,CAACwD,MAAjB;;AAEA,OAAK,IAAI6F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAApB,EAAyB,EAAEC,CAA3B,EAA8B;AAC5BF,IAAAA,EAAE,CAACnJ,IAAI,CAACqJ,CAAD,CAAL,EAAU,KAAKrL,KAAL,CAAWgC,IAAI,CAACqJ,CAAD,CAAf,CAAV,CAAF;AACD;;AAED,SAAO,IAAP;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAxL,MAAM,CAAC6C,SAAP,CAAiB4I,aAAjB,GAAiC,SAASA,aAAT,CAAuBC,UAAvB,EAAmC;AAClE,MAAI,KAAKC,cAAL,IAAuB,CAACD,UAA5B,EAAwC;AACtC,WAAO,KAAKC,cAAZ;AACD;;AAED,QAAMxL,KAAK,GAAG+B,MAAM,CAACC,IAAP,CAAY,KAAKhC,KAAjB,CAAd;AACA,MAAIqL,CAAC,GAAGrL,KAAK,CAACwF,MAAd;AACA,QAAMiG,GAAG,GAAG,EAAZ;;AAEA,SAAOJ,CAAC,EAAR,EAAY;AACV,UAAMpJ,IAAI,GAAGjC,KAAK,CAACqL,CAAD,CAAlB;;AACA,QAAI,KAAKrL,KAAL,CAAWiC,IAAX,EAAiByJ,UAArB,EAAiC;AAC/BD,MAAAA,GAAG,CAACjD,IAAJ,CAASvG,IAAT;AACD;AACF;;AACD,OAAKuJ,cAAL,GAAsBC,GAAtB;AACA,SAAO,KAAKD,cAAZ;AACD,CAjBD;AAmBA;AACA;AACA;AACA;AACA;AACA;;;AAEA3L,MAAM,CAAC6C,SAAP,CAAiBiJ,YAAjB,GAAgC,SAASA,YAAT,GAAwB;AACtD,MAAI,KAAKC,aAAT,EAAwB;AACtB,WAAO,KAAKA,aAAZ;AACD;;AACD,OAAKA,aAAL,GAAqB,KAAKC,OAAL,EAArB;AACA,SAAO,KAAKD,aAAZ;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA/L,MAAM,CAAC6C,SAAP,CAAiBoJ,QAAjB,GAA4B,UAAS7J,IAAT,EAAe;AACzC;AACA,QAAM4E,SAAS,GAAGC,uBAAuB,CAAC7E,IAAD,CAAzC;;AAEA,MAAI,KAAKjC,KAAL,CAAWuJ,cAAX,CAA0BtH,IAA1B,CAAJ,EAAqC;AACnC,WAAO,MAAP;AACD;;AACD,MAAI,KAAK9B,QAAL,CAAcoJ,cAAd,CAA6BtH,IAA7B,CAAJ,EAAwC;AACtC,WAAO,SAAP;AACD;;AACD,MAAI,KAAK5B,MAAL,CAAYkJ,cAAZ,CAA2BtH,IAA3B,CAAJ,EAAsC;AACpC,WAAO,QAAP;AACD;;AACD,MAAI,KAAK/B,QAAL,CAAcqJ,cAAd,CAA6B1C,SAA7B,KAA2C,KAAK3G,QAAL,CAAcqJ,cAAd,CAA6BtH,IAA7B,CAA/C,EAAmF;AACjF,WAAO,MAAP;AACD;;AAED,QAAM8J,gBAAgB,GAAG,KAAK3L,iBAAL,CAAuBmJ,cAAvB,CAAsC1C,SAAtC,KAAoD,KAAKzG,iBAAL,CAAuBmJ,cAAvB,CAAsCtH,IAAtC,CAA7E;;AACA,MAAI8J,gBAAJ,EAAsB;AACpB,WAAOA,gBAAgB,KAAK,QAArB,GAAgC,QAAhC,GAA2C,MAAlD;AACD,GApBwC,CAsBzC;;;AACA,QAAM9E,OAAO,GAAGC,UAAU,CAAC,IAAD,EAAOjF,IAAP,CAA1B;;AACA,MAAIgF,OAAO,IAAI,IAAf,EAAqB;AACnB,WAAO,MAAP;AACD;;AAED,MAAI,iBAAiBG,IAAjB,CAAsBnF,IAAtB,CAAJ,EAAiC;AAC/B,WAAO+J,qBAAqB,CAAC,IAAD,EAAO/J,IAAP,CAA5B;AACD;;AACD,SAAO,kBAAP;AACD,CAhCD;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEApC,MAAM,CAAC6C,SAAP,CAAiByE,cAAjB,GAAkC,UAASlF,IAAT,EAAe;AAC/C,QAAM/B,QAAQ,GAAG+B,IAAI,CAACsF,KAAL,CAAW,KAAX,CAAjB;AACAtF,EAAAA,IAAI,GAAG,EAAP;;AACA,OAAK,IAAIoJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnL,QAAQ,CAACsF,MAA7B,EAAqC,EAAE6F,CAAvC,EAA0C;AACxCpJ,IAAAA,IAAI,GAAGoJ,CAAC,GAAG,CAAJ,GAAQpJ,IAAI,GAAG,GAAP,GAAa/B,QAAQ,CAACmL,CAAD,CAA7B,GAAmCnL,QAAQ,CAACmL,CAAD,CAAlD;;AACA,QAAI,KAAKrL,KAAL,CAAWuJ,cAAX,CAA0BtH,IAA1B,KACA,KAAKjC,KAAL,CAAWiC,IAAX,aAA4BhD,aAAa,CAACgL,KAD9C,EACqD;AACnD,aAAO,KAAKjK,KAAL,CAAWiC,IAAX,CAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD,CAZD;AAcA;AACA;AACA;AACA;AACA;AACA;;;AACApC,MAAM,CAAC6C,SAAP,CAAiBf,cAAjB,GAAkC,UAASC,UAAT,EAAqB;AACrD,SAAO9C,eAAe,CAAC,IAAD,EAAO8C,UAAP,CAAtB;AACD,CAFD;AAIA;AACA;AACA;;;AAEA,SAASoK,qBAAT,CAA+BC,IAA/B,EAAqChK,IAArC,EAA2C;AACzC,QAAM/B,QAAQ,GAAG+B,IAAI,CAACsF,KAAL,CAAW,oBAAX,EAAiC2E,MAAjC,CAAwCC,OAAxC,CAAjB;;AACA,MAAIjM,QAAQ,CAACsF,MAAT,GAAkB,CAAtB,EAAyB;AACvB,WAAOyG,IAAI,CAACjM,KAAL,CAAWuJ,cAAX,CAA0BrJ,QAAQ,CAAC,CAAD,CAAlC,IACL+L,IAAI,CAACjM,KAAL,CAAWE,QAAQ,CAAC,CAAD,CAAnB,CADK,GAEL,kBAFF;AAGD;;AAED,MAAIuJ,GAAG,GAAGwC,IAAI,CAAChK,IAAL,CAAU/B,QAAQ,CAAC,CAAD,CAAlB,CAAV;AACA,MAAIkM,QAAQ,GAAG,KAAf;;AACA,MAAI,CAAC3C,GAAL,EAAU;AACR,WAAO,kBAAP;AACD;;AAED,QAAM3B,IAAI,GAAG5H,QAAQ,CAACsF,MAAT,GAAkB,CAA/B;;AAEA,OAAK,IAAI6F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnL,QAAQ,CAACsF,MAA7B,EAAqC,EAAE6F,CAAvC,EAA0C;AACxCe,IAAAA,QAAQ,GAAG,KAAX;AACA,UAAMC,OAAO,GAAGnM,QAAQ,CAACmL,CAAD,CAAxB;;AAEA,QAAIA,CAAC,KAAKvD,IAAN,IAAc2B,GAAd,IAAqB,CAAC,KAAKrC,IAAL,CAAUiF,OAAV,CAA1B,EAA8C;AAC5C,UAAI5C,GAAG,CAACZ,wBAAR,EAAkC;AAChCY,QAAAA,GAAG,GAAGA,GAAG,CAACN,mBAAV;AACD,OAFD,MAEO,IAAIM,GAAG,YAAYxK,aAAa,CAACmC,KAAjC,EAAwC;AAC7C;AACAqI,QAAAA,GAAG,GAAGA,GAAG,CAACd,MAAV;AACD,OAHM,MAGA;AACLc,QAAAA,GAAG,GAAG1C,SAAN;AACD;;AACD;AACD,KAduC,CAgBxC;;;AACA,QAAI,CAAC,KAAKK,IAAL,CAAUiF,OAAV,CAAL,EAAyB;AACvB;AACA,UAAI5C,GAAG,YAAYxK,aAAa,CAACmC,KAA7B,IAAsCiK,CAAC,KAAKvD,IAAhD,EAAsD;AACpD2B,QAAAA,GAAG,GAAGA,GAAG,CAACd,MAAV;AACD;;AACD;AACD;;AAED,QAAI,EAAEc,GAAG,IAAIA,GAAG,CAAC3H,MAAb,CAAJ,EAA0B;AACxB2H,MAAAA,GAAG,GAAG1C,SAAN;AACA;AACD;;AAED,UAAMpB,IAAI,GAAG8D,GAAG,CAAC3H,MAAJ,CAAWgK,QAAX,CAAoBO,OAApB,CAAb;AACAD,IAAAA,QAAQ,GAAIzG,IAAI,KAAK,QAArB;AACA8D,IAAAA,GAAG,GAAGA,GAAG,CAAC3H,MAAJ,CAAWG,IAAX,CAAgBoK,OAAhB,CAAN;AACD;;AAEDJ,EAAAA,IAAI,CAAC/L,QAAL,CAAc+B,IAAd,IAAsBwH,GAAtB;;AACA,MAAIA,GAAJ,EAAS;AACP,WAAO,MAAP;AACD;;AACD,MAAI2C,QAAJ,EAAc;AACZ,WAAO,QAAP;AACD;;AACD,SAAO,kBAAP;AACD;AAGD;AACA;AACA;;;AAEA,SAAS/E,iBAAT,CAA2B4E,IAA3B,EAAiChK,IAAjC,EAAuC;AACrC+J,EAAAA,qBAAqB,CAACC,IAAD,EAAOhK,IAAP,CAArB;AACA,SAAOgK,IAAI,CAAC/L,QAAL,CAAc+B,IAAd,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEApC,MAAM,CAAC6C,SAAP,CAAiB4J,KAAjB,GAAyB,UAASnE,IAAT,EAAeoE,IAAf,EAAqB;AAC5C,OAAKhM,SAAL,CAAeiI,IAAf,CAAoB,CAACL,IAAD,EAAOoE,IAAP,CAApB;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA1M,MAAM,CAAC6C,SAAP,CAAiB8J,GAAjB,GAAuB,UAASrE,IAAT,EAAe;AACpC,MAAIA,IAAI,YAAYyB,MAApB,EAA4B;AAC1B,UAAM6C,aAAa,GAAGrL,KAAK,CAACsB,SAAN,CAAgBc,KAAhB,CAAsBC,IAAtB,CAA2BiJ,SAA3B,EAAsC,CAAtC,CAAtB;;AACA,SAAK,MAAMvB,EAAX,IAAiB9L,SAAjB,EAA4B;AAC1B,UAAI8I,IAAI,CAACf,IAAL,CAAU+D,EAAV,CAAJ,EAAmB;AACjB,aAAKqB,GAAL,CAASG,KAAT,CAAe,IAAf,EAAqB,CAACxB,EAAD,EAAK7L,MAAL,CAAYmN,aAAZ,CAArB;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AACD,MAAIrL,KAAK,CAACC,OAAN,CAAc8G,IAAd,CAAJ,EAAyB;AACvB,UAAMsE,aAAa,GAAGrL,KAAK,CAACsB,SAAN,CAAgBc,KAAhB,CAAsBC,IAAtB,CAA2BiJ,SAA3B,EAAsC,CAAtC,CAAtB;;AACA,SAAK,MAAME,EAAX,IAAiBzE,IAAjB,EAAuB;AACrB,WAAKqE,GAAL,CAASG,KAAT,CAAe,IAAf,EAAqB,CAACC,EAAD,EAAKtN,MAAL,CAAYmN,aAAZ,CAArB;AACD;;AACD,WAAO,IAAP;AACD;;AACD,OAAKjN,CAAL,CAAO0B,KAAP,CAAasL,GAAb,CAAiBG,KAAjB,CAAuB,KAAKnN,CAAL,CAAO0B,KAA9B,EAAqCwL,SAArC;AACA,SAAO,IAAP;AACD,CAnBD;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA7M,MAAM,CAAC6C,SAAP,CAAiBmK,IAAjB,GAAwB,UAAS1E,IAAT,EAAe;AACrC,MAAIA,IAAI,YAAYyB,MAApB,EAA4B;AAC1B,UAAM6C,aAAa,GAAGrL,KAAK,CAACsB,SAAN,CAAgBc,KAAhB,CAAsBC,IAAtB,CAA2BiJ,SAA3B,EAAsC,CAAtC,CAAtB;;AACA,SAAK,MAAMvB,EAAX,IAAiB9L,SAAjB,EAA4B;AAC1B,UAAI8I,IAAI,CAACf,IAAL,CAAU+D,EAAV,CAAJ,EAAmB;AACjB,aAAK0B,IAAL,CAAUF,KAAV,CAAgB,IAAhB,EAAsB,CAACxB,EAAD,EAAK7L,MAAL,CAAYmN,aAAZ,CAAtB;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AACD,MAAIrL,KAAK,CAACC,OAAN,CAAc8G,IAAd,CAAJ,EAAyB;AACvB,UAAMsE,aAAa,GAAGrL,KAAK,CAACsB,SAAN,CAAgBc,KAAhB,CAAsBC,IAAtB,CAA2BiJ,SAA3B,EAAsC,CAAtC,CAAtB;;AACA,SAAK,MAAME,EAAX,IAAiBzE,IAAjB,EAAuB;AACrB,WAAK0E,IAAL,CAAUF,KAAV,CAAgB,IAAhB,EAAsB,CAACC,EAAD,EAAKtN,MAAL,CAAYmN,aAAZ,CAAtB;AACD;;AACD,WAAO,IAAP;AACD;;AACD,OAAKjN,CAAL,CAAO0B,KAAP,CAAa2L,IAAb,CAAkBF,KAAlB,CAAwB,KAAKnN,CAAL,CAAO0B,KAA/B,EAAsCwL,SAAtC;AACA,SAAO,IAAP;AACD,CAnBD;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA7M,MAAM,CAAC6C,SAAP,CAAiBoK,MAAjB,GAA0B,UAAS3B,EAAT,EAAa4B,IAAb,EAAmB;AAC3C,MAAI,OAAO5B,EAAP,KAAc,UAAlB,EAA8B;AAC5B,UAAM,IAAI/I,KAAJ,CAAU,0DACd,OADc,GACH,OAAO+I,EADJ,GACU,GADpB,CAAN;AAED;;AAED,MAAI4B,IAAI,IAAIA,IAAI,CAACC,WAAjB,EAA8B;AAC5B,SAAK,MAAMF,MAAX,IAAqB,KAAK/L,OAA1B,EAAmC;AACjC,UAAI+L,MAAM,CAAC3B,EAAP,KAAcA,EAAlB,EAAsB;AACpB,eAAO,IAAP;AACD;AACF;AACF;;AACD,OAAKpK,OAAL,CAAayH,IAAb,CAAkB;AAAE2C,IAAAA,EAAE,EAAEA,EAAN;AAAU4B,IAAAA,IAAI,EAAEA;AAAhB,GAAlB;AAEA5B,EAAAA,EAAE,CAAC,IAAD,EAAO4B,IAAP,CAAF;AACA,SAAO,IAAP;AACD,CAjBD;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAlN,MAAM,CAAC6C,SAAP,CAAiBuK,MAAjB,GAA0B,UAAS9E,IAAT,EAAegD,EAAf,EAAmBpL,OAAnB,EAA4B;AACpD,MAAI,OAAOoI,IAAP,KAAgB,QAApB,EAA8B;AAC5B,SAAK,MAAMkD,CAAX,IAAgBlD,IAAhB,EAAsB;AACpB,WAAK1H,OAAL,CAAa4K,CAAb,IAAkBlD,IAAI,CAACkD,CAAD,CAAtB;AACA,WAAK3K,aAAL,CAAmB2K,CAAnB,IAAwBtM,KAAK,CAACmE,KAAN,CAAYnD,OAAZ,CAAxB;AACD;AACF,GALD,MAKO;AACL,SAAKU,OAAL,CAAa0H,IAAb,IAAqBgD,EAArB;AACA,SAAKzK,aAAL,CAAmByH,IAAnB,IAA2BpJ,KAAK,CAACmE,KAAN,CAAYnD,OAAZ,CAA3B;AACD;;AACD,SAAO,IAAP;AACD,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAF,MAAM,CAAC6C,SAAP,CAAiBwK,MAAjB,GAA0B,UAAS/E,IAAT,EAAegD,EAAf,EAAmB;AAC3C,MAAI,OAAOhD,IAAP,KAAgB,QAApB,EAA8B;AAC5B,SAAK,MAAMkD,CAAX,IAAgBlD,IAAhB,EAAsB;AACpB,WAAKxH,OAAL,CAAa0K,CAAb,IAAkBlD,IAAI,CAACkD,CAAD,CAAtB;AACD;AACF,GAJD,MAIO;AACL,SAAK1K,OAAL,CAAawH,IAAb,IAAqBgD,EAArB;AACD;;AACD,SAAO,IAAP;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAtL,MAAM,CAAC6C,SAAP,CAAiByK,KAAjB,GAAyB,UAASC,MAAT,EAAiBrN,OAAjB,EAA0B;AACjDqN,EAAAA,MAAM,KAAKA,MAAM,GAAG,EAAd,CAAN;AACArN,EAAAA,OAAO,KAAKA,OAAO,GAAG,EAAf,CAAP;;AAEA,MAAIA,OAAO,CAACsN,OAAZ,EAAqB;AACnBtO,IAAAA,KAAK,CAACsO,OAAN,CAActN,OAAd;AACD;;AAED,OAAKS,QAAL,CAAcgI,IAAd,CAAmB,CAAC4E,MAAD,EAASrN,OAAT,CAAnB;;AACA,SAAO,IAAP;AACD,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAF,MAAM,CAAC6C,SAAP,CAAiBH,GAAjB,GAAuB,UAAS8C,GAAT,EAAcqD,KAAd,EAAqB4E,KAArB,EAA4B;AACjD,MAAIZ,SAAS,CAAClH,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,WAAO,KAAKzF,OAAL,CAAasF,GAAb,CAAP;AACD;;AAED,UAAQA,GAAR;AACE,SAAK,MAAL;AACE,WAAKtF,OAAL,CAAasF,GAAb,IAAoBzG,QAAQ,CAAC8J,KAAD,EAAQ4E,KAAR,CAA5B;AACA,WAAKjK,oBAAL,CAA0BgC,GAA1B,IAAiC,KAAKtF,OAAL,CAAasF,GAAb,CAAjC;AACA;;AACF,SAAK,YAAL;AACE,WAAK1D,cAAL,CAAoB+G,KAApB;AACA,WAAK3I,OAAL,CAAasF,GAAb,IAAoBqD,KAApB;AACA,WAAKrF,oBAAL,CAA0BgC,GAA1B,IAAiC,KAAKtF,OAAL,CAAasF,GAAb,CAAjC;AACA;;AACF,SAAK,KAAL;AACE,WAAKtF,OAAL,CAAasF,GAAb,IAAoBqD,KAApB;AACA,WAAKrF,oBAAL,CAA0BgC,GAA1B,IAAiC,KAAKtF,OAAL,CAAasF,GAAb,CAAjC;;AAEA,UAAIqD,KAAK,IAAI,CAAC,KAAK1I,KAAL,CAAW,KAAX,CAAd,EAAiC;AAC/B3B,QAAAA,SAAS,CAAC,IAAD,CAAT;AACD,OAFD,MAEO,IAAI,CAACqK,KAAD,IAAU,KAAK1I,KAAL,CAAW,KAAX,KAAqB,IAA/B,IAAuC,KAAKA,KAAL,CAAW,KAAX,EAAkBuN,IAA7D,EAAmE;AACxE,aAAK9G,MAAL,CAAY,KAAZ;AACD;;AACD;;AACF;AACE,WAAK1G,OAAL,CAAasF,GAAb,IAAoBqD,KAApB;AACA,WAAKrF,oBAAL,CAA0BgC,GAA1B,IAAiC,KAAKtF,OAAL,CAAasF,GAAb,CAAjC;AACA;AAvBJ;;AA0BA,SAAO,IAAP;AACD,CAhCD;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAxF,MAAM,CAAC6C,SAAP,CAAiBpE,GAAjB,GAAuB,UAAS+G,GAAT,EAAc;AACnC,SAAO,KAAKtF,OAAL,CAAasF,GAAb,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMmI,UAAU,GAAG,0BAA0BjG,KAA1B,CAAgC,GAAhC,CAAnB;AAEAxF,MAAM,CAACe,cAAP,CAAsBjD,MAAtB,EAA8B,YAA9B,EAA4C;AAC1CvB,EAAAA,GAAG,EAAE,YAAW;AACd,WAAOkP,UAAP;AACD,GAHyC;AAI1CjL,EAAAA,GAAG,EAAE,YAAW;AACd,UAAM,IAAIH,KAAJ,CAAU,oCAAV,CAAN;AACD;AANyC,CAA5C;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAvC,MAAM,CAAC6C,SAAP,CAAiBmJ,OAAjB,GAA2B,YAAW;AACpC,SAAOrN,UAAU,CAAC,IAAD,CAAjB;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAqB,MAAM,CAAC6C,SAAP,CAAiBL,OAAjB,GAA2B,UAAS8F,IAAT,EAAepI,OAAf,EAAwB;AACjD,MAAIoI,IAAI,YAAY/J,WAAhB,IAA+BG,kBAAkB,CAAC4J,IAAD,CAAlB,KAA6B,aAAhE,EAA+E;AAC7E,WAAO,KAAK9F,OAAL,CAAa8F,IAAI,CAAClG,IAAlB,EAAwBkG,IAAI,CAACpI,OAA7B,CAAP;AACD;;AAEDA,EAAAA,OAAO,GAAG,IAAI5B,cAAJ,CAAmB4B,OAAnB,CAAV;;AAEA,MAAIhB,KAAK,CAAC6I,sBAAN,CAA6B7H,OAA7B,EAAsC,CAAC,KAAD,EAAQ,SAAR,CAAtC,CAAJ,EAA+D;AAC7D,QAAIA,OAAO,CAAC0N,UAAR,IAAsB,IAA1B,EAAgC;AAC9B,YAAM,IAAIrL,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,QAAIrC,OAAO,CAAC2N,YAAR,IAAwB,IAA5B,EAAkC;AAChC,YAAM,IAAItL,KAAJ,CAAU,kDAAV,CAAN;AACD;;AAED,SAAKoK,GAAL,CAAS,MAAT,EAAiB,UAAS1M,GAAT,EAAc;AAC7B,UAAInB,KAAK,CAACgP,GAAN,CAAUxF,IAAV,EAAgBrI,GAAhB,CAAJ,EAA0B;AACxB,cAAM8N,EAAE,GAAGjP,KAAK,CAACL,GAAN,CAAU6J,IAAV,EAAgBrI,GAAhB,CAAX;;AACA,YAAI,CAAC,KAAK+N,mBAAV,EAA+B;AAC7B,eAAKA,mBAAL,GAA2B,EAA3B;AACD;;AAED,YAAI9N,OAAO,CAAC+N,OAAR,IAAmB/N,OAAO,CAACgO,KAA/B,EAAsC;AACpC,eAAKF,mBAAL,CAAyB1F,IAAzB,IAAiC/G,KAAK,CAACC,OAAN,CAAcuM,EAAd,IAC/BA,EAAE,CAAC,CAAD,CAD6B,GAE/BA,EAFF;AAGD,SAJD,MAIO;AACL,eAAKC,mBAAL,CAAyB1F,IAAzB,IAAiC/G,KAAK,CAACC,OAAN,CAAcuM,EAAd,IAC/BA,EAD+B,GAE/BA,EAAE,IAAI,IAAN,GAAa,EAAb,GAAkB,CAACA,EAAD,CAFpB;AAGD;;AAEDjP,QAAAA,KAAK,CAACqP,KAAN,CAAY7F,IAAZ,EAAkBrI,GAAlB;AACD;AACF,KAnBD;AAqBA,UAAMuC,OAAO,GAAG,KAAKA,OAAL,CAAa8F,IAAb,CAAhB;AACA9F,IAAAA,OAAO,CAACtC,OAAR,GAAkBA,OAAlB;AAEAsC,IAAAA,OAAO,CACLE,GADF,CACM,UAASqL,EAAT,EAAa;AACf,UAAI,CAAC,KAAKC,mBAAV,EAA+B;AAC7B,aAAKA,mBAAL,GAA2B,EAA3B;AACD;;AAED,UAAI9N,OAAO,CAAC+N,OAAR,IAAmB/N,OAAO,CAACgO,KAA/B,EAAsC;AACpC,aAAKF,mBAAL,CAAyB1F,IAAzB,IAAiC/G,KAAK,CAACC,OAAN,CAAcuM,EAAd,IAC/BA,EAAE,CAAC,CAAD,CAD6B,GAE/BA,EAFF;;AAIA,YAAI,OAAO,KAAKC,mBAAL,CAAyB1F,IAAzB,CAAP,KAA0C,QAA9C,EAAwD;AACtD,eAAK0F,mBAAL,CAAyB1F,IAAzB,IAAiCpI,OAAO,CAACgO,KAAR,GAAgBH,EAAhB,GAAqB,IAAtD;AACD;AACF,OARD,MAQO;AACL,aAAKC,mBAAL,CAAyB1F,IAAzB,IAAiC/G,KAAK,CAACC,OAAN,CAAcuM,EAAd,IAC/BA,EAD+B,GAE/BA,EAAE,IAAI,IAAN,GAAa,EAAb,GAAkB,CAACA,EAAD,CAFpB;AAIA,aAAKC,mBAAL,CAAyB1F,IAAzB,IAAiC,KAAK0F,mBAAL,CAAyB1F,IAAzB,EAA+B+D,MAA/B,CAAsC,UAAS+B,GAAT,EAAc;AACnF,iBAAOA,GAAG,IAAI,OAAOA,GAAP,KAAe,QAA7B;AACD,SAFgC,CAAjC;AAGD;AACF,KAvBH;;AAyBA,QAAI,OAAOlO,OAAO,CAACzB,GAAf,KAAuB,UAA3B,EAAuC;AACrC+D,MAAAA,OAAO,CAAC/D,GAAR,CAAYyB,OAAO,CAACzB,GAApB;AACD,KA5D4D,CA8D7D;AACA;;;AACA,UAAM4P,KAAK,GAAG/F,IAAI,CAACZ,KAAL,CAAW,GAAX,CAAd;AACA,QAAI4G,GAAG,GAAGD,KAAK,CAAC,CAAD,CAAf;;AACA,SAAK,IAAI7C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6C,KAAK,CAAC1I,MAAN,GAAe,CAAnC,EAAsC,EAAE6F,CAAxC,EAA2C;AACzC,UAAI,KAAKrL,KAAL,CAAWmO,GAAX,KAAmB,IAAnB,IAA2B,KAAKnO,KAAL,CAAWmO,GAAX,EAAgBtF,wBAA/C,EAAyE;AACvE,cAAMuF,OAAO,GAAGF,KAAK,CAAC1K,KAAN,CAAY6H,CAAC,GAAG,CAAhB,EAAmBgD,IAAnB,CAAwB,GAAxB,CAAhB;AACA,aAAKrO,KAAL,CAAWmO,GAAX,EAAgBrM,MAAhB,CAAuBO,OAAvB,CAA+B+L,OAA/B,EAAwCrO,OAAxC;AACA;AACD;;AAEDoO,MAAAA,GAAG,IAAI,MAAMD,KAAK,CAAC7C,CAAC,GAAG,CAAL,CAAlB;AACD;;AAED,WAAOhJ,OAAP;AACD;;AAED,QAAMlC,QAAQ,GAAG,KAAKA,QAAtB;AACA,QAAM+N,KAAK,GAAG/F,IAAI,CAACZ,KAAL,CAAW,GAAX,CAAd;;AAEA,MAAI,KAAKuE,QAAL,CAAc3D,IAAd,MAAwB,MAA5B,EAAoC;AAClC,UAAM,IAAI/F,KAAJ,CAAU,mBAAmB+F,IAAnB,GAA0B,GAA1B,GACd,2CADI,CAAN;AAED;;AAEDhI,EAAAA,QAAQ,CAACgI,IAAD,CAAR,GAAiB+F,KAAK,CAAC3O,MAAN,CAAa,UAAS+O,GAAT,EAAcC,IAAd,EAAoBlD,CAApB,EAAuB;AACnDiD,IAAAA,GAAG,CAACC,IAAD,CAAH,KAAcD,GAAG,CAACC,IAAD,CAAH,GAAalD,CAAC,KAAK6C,KAAK,CAAC1I,MAAN,GAAe,CAAtB,GACtB,IAAIpH,WAAJ,CAAgB2B,OAAhB,EAAyBoI,IAAzB,CADsB,GAEtB,EAFJ;AAGA,WAAOmG,GAAG,CAACC,IAAD,CAAV;AACD,GALgB,EAKd,KAAK3N,IALS,CAAjB;AAOA,SAAOT,QAAQ,CAACgI,IAAD,CAAf;AACD,CAtGD;AAwGA;AACA;AACA;AACA;AACA;AACA;;;AAEAtI,MAAM,CAAC6C,SAAP,CAAiB8L,WAAjB,GAA+B,UAASrG,IAAT,EAAe;AAC5C,SAAO,KAAKhI,QAAL,CAAcoJ,cAAd,CAA6BpB,IAA7B,IAAqC,KAAKhI,QAAL,CAAcgI,IAAd,CAArC,GAA2D,IAAlE;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAtI,MAAM,CAAC6C,SAAP,CAAiB+D,MAAjB,GAA0B,UAASxE,IAAT,EAAe;AACvC,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,IAAAA,IAAI,GAAG,CAACA,IAAD,CAAP;AACD;;AACD,MAAIb,KAAK,CAACC,OAAN,CAAcY,IAAd,CAAJ,EAAyB;AACvBA,IAAAA,IAAI,CAACwM,OAAL,CAAa,UAAStG,IAAT,EAAe;AAC1B,UAAI,KAAKlG,IAAL,CAAUkG,IAAV,KAAmB,IAAnB,IAA2B,CAAC,KAAK9H,MAAL,CAAY8H,IAAZ,CAAhC,EAAmD;AACjD;AACD;;AACD,UAAI,KAAK9H,MAAL,CAAY8H,IAAZ,CAAJ,EAAuB;AACrB,cAAMuG,OAAO,GAAG3M,MAAM,CAACC,IAAP,CAAY,KAAKhC,KAAjB,EACdV,MADc,CACPyC,MAAM,CAACC,IAAP,CAAY,KAAK3B,MAAjB,CADO,CAAhB;;AAEA,aAAK,MAAM4B,IAAX,IAAmByM,OAAnB,EAA4B;AAC1B,cAAIzM,IAAI,CAAC0M,UAAL,CAAgBxG,IAAI,GAAG,GAAvB,CAAJ,EAAiC;AAC/B,mBAAO,KAAKnI,KAAL,CAAWiC,IAAX,CAAP;AACA,mBAAO,KAAK5B,MAAL,CAAY4B,IAAZ,CAAP;;AACA2M,YAAAA,WAAW,CAAC,IAAD,EAAO3M,IAAP,CAAX;AACD;AACF;;AAED,eAAO,KAAK5B,MAAL,CAAY8H,IAAZ,CAAP;;AACAyG,QAAAA,WAAW,CAAC,IAAD,EAAOzG,IAAP,CAAX;;AACA;AACD;;AAED,aAAO,KAAKnI,KAAL,CAAWmI,IAAX,CAAP;;AACAyG,MAAAA,WAAW,CAAC,IAAD,EAAOzG,IAAP,CAAX;AACD,KAtBD,EAsBG,IAtBH;AAuBD;;AACD,SAAO,IAAP;AACD,CA9BD;AAgCA;AACA;AACA;;;AAEA,SAASyG,WAAT,CAAqB9M,MAArB,EAA6BqG,IAA7B,EAAmC;AACjC,QAAM0G,MAAM,GAAG1G,IAAI,CAACZ,KAAL,CAAW,GAAX,CAAf;AACA,QAAMO,IAAI,GAAG+G,MAAM,CAAC9G,GAAP,EAAb;AAEA,MAAIC,MAAM,GAAGlG,MAAM,CAAClB,IAApB;;AAEA,OAAK,MAAMkO,KAAX,IAAoBD,MAApB,EAA4B;AAC1B7G,IAAAA,MAAM,GAAGA,MAAM,CAAC8G,KAAD,CAAf;AACD;;AAED,SAAO9G,MAAM,CAACF,IAAD,CAAb;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAjI,MAAM,CAAC6C,SAAP,CAAiBqM,SAAjB,GAA6B,UAASnG,KAAT,EAAgBoG,YAAhB,EAA8B;AACzD,MAAIpG,KAAK,KAAK7G,MAAM,CAACW,SAAjB,IACAkG,KAAK,KAAKqG,QAAQ,CAACvM,SADnB,IAEAkG,KAAK,CAAClG,SAAN,CAAgB6G,cAAhB,CAA+B,2BAA/B,CAFJ,EAEiE;AAC/D,WAAO,IAAP;AACD;;AAED,OAAKwF,SAAL,CAAehN,MAAM,CAACmN,cAAP,CAAsBtG,KAAtB,CAAf,EAA6CoG,YAA7C,EAPyD,CASzD;;AACA,MAAI,CAACA,YAAL,EAAmB;AACjBjN,IAAAA,MAAM,CAACoN,mBAAP,CAA2BvG,KAA3B,EAAkC6F,OAAlC,CAA0C,UAAStG,IAAT,EAAe;AACvD,UAAIA,IAAI,CAACiH,KAAL,CAAW,iDAAX,CAAJ,EAAmE;AACjE;AACD;;AACD,YAAMlN,IAAI,GAAGH,MAAM,CAACsN,wBAAP,CAAgCzG,KAAhC,EAAuCT,IAAvC,CAAb;;AACA,UAAIjG,IAAI,CAACqH,cAAL,CAAoB,OAApB,CAAJ,EAAkC;AAChC,aAAK2D,MAAL,CAAY/E,IAAZ,EAAkBjG,IAAI,CAACwG,KAAvB;AACD;AACF,KARD,EAQG,IARH;AASD,GApBwD,CAsBzD;;;AACA3G,EAAAA,MAAM,CAACoN,mBAAP,CAA2BvG,KAAK,CAAClG,SAAjC,EAA4C+L,OAA5C,CAAoD,UAAStG,IAAT,EAAe;AACjE,QAAIA,IAAI,CAACiH,KAAL,CAAW,iBAAX,CAAJ,EAAmC;AACjC;AACD;;AACD,UAAMnC,MAAM,GAAGlL,MAAM,CAACsN,wBAAP,CAAgCzG,KAAK,CAAClG,SAAtC,EAAiDyF,IAAjD,CAAf;;AACA,QAAI,CAAC6G,YAAL,EAAmB;AACjB,UAAI,OAAO/B,MAAM,CAACvE,KAAd,KAAwB,UAA5B,EAAwC;AACtC,aAAKuE,MAAL,CAAY9E,IAAZ,EAAkB8E,MAAM,CAACvE,KAAzB;AACD;AACF;;AACD,QAAI,OAAOuE,MAAM,CAAC3O,GAAd,KAAsB,UAA1B,EAAsC;AACpC,UAAI,KAAK6B,QAAL,CAAcgI,IAAd,CAAJ,EAAyB;AACvB,aAAKhI,QAAL,CAAcgI,IAAd,EAAoBmH,OAApB,GAA8B,EAA9B;AACD;;AACD,WAAKjN,OAAL,CAAa8F,IAAb,EAAmB7J,GAAnB,CAAuB2O,MAAM,CAAC3O,GAA9B;AACD;;AACD,QAAI,OAAO2O,MAAM,CAAC1K,GAAd,KAAsB,UAA1B,EAAsC;AACpC,UAAI,KAAKpC,QAAL,CAAcgI,IAAd,CAAJ,EAAyB;AACvB,aAAKhI,QAAL,CAAcgI,IAAd,EAAoBoH,OAApB,GAA8B,EAA9B;AACD;;AACD,WAAKlN,OAAL,CAAa8F,IAAb,EAAmB5F,GAAnB,CAAuB0K,MAAM,CAAC1K,GAA9B;AACD;AACF,GAtBD,EAsBG,IAtBH;AAwBA,SAAO,IAAP;AACD,CAhDD;AAkDA;AACA;AACA;;;AAEA1C,MAAM,CAAC6C,SAAP,CAAiB8M,UAAjB,GAA8B,UAASvN,IAAT,EAAe;AAC3C,QAAMwN,KAAK,GAAG,IAAd;;AACA,QAAMC,UAAU,GAAGD,KAAK,CAACxN,IAAN,CAAWA,IAAX,CAAnB;;AACA,QAAM0N,UAAU,GAAG,EAAnB;;AAEA,MAAID,UAAJ,EAAgB;AACdA,IAAAA,UAAU,CAACE,SAAX,GAAuB3N,IAAvB;AACA,WAAOyN,UAAP;AACD;;AAED,WAASG,MAAT,CAAgB3B,KAAhB,EAAuBpM,MAAvB,EAA+B;AAC7B,QAAIQ,CAAC,GAAG4L,KAAK,CAAC1I,MAAN,GAAe,CAAvB;AACA,QAAIsK,WAAJ;AACA,QAAIC,OAAJ;;AAEA,WAAOzN,CAAC,EAAR,EAAY;AACVyN,MAAAA,OAAO,GAAG7B,KAAK,CAAC1K,KAAN,CAAY,CAAZ,EAAelB,CAAf,EAAkB+L,IAAlB,CAAuB,GAAvB,CAAV;AACAyB,MAAAA,WAAW,GAAGhO,MAAM,CAACG,IAAP,CAAY8N,OAAZ,CAAd;;AACA,UAAID,WAAJ,EAAiB;AACfH,QAAAA,UAAU,CAACnH,IAAX,CAAgBuH,OAAhB;;AAEA,YAAID,WAAW,CAACnH,MAAhB,EAAwB;AACtB;AACA,cAAImH,WAAW,CAACnH,MAAZ,YAA8B1J,aAAa,CAACgL,KAAhD,EAAuD;AACrD6F,YAAAA,WAAW,CAACnH,MAAZ,CAAmBiH,SAAnB,GAA+BD,UAAU,CAACtB,IAAX,CAAgB,GAAhB,CAA/B;AACA,mBAAOyB,WAAW,CAACnH,MAAnB;AACD,WALqB,CAOtB;AACA;AACA;AACA;AACA;AACA;;;AACA,cAAIrG,CAAC,KAAK4L,KAAK,CAAC1I,MAAhB,EAAwB;AACtB,gBAAIsK,WAAW,CAAChO,MAAhB,EAAwB;AACtB,kBAAI2J,GAAJ;;AACA,kBAAIyC,KAAK,CAAC5L,CAAD,CAAL,KAAa,GAAb,IAAoB0N,aAAa,CAAC9B,KAAK,CAAC5L,CAAD,CAAN,CAArC,EAAiD;AAC/C,oBAAIA,CAAC,GAAG,CAAJ,KAAU4L,KAAK,CAAC1I,MAApB,EAA4B;AAC1B;AACA,yBAAOsK,WAAP;AACD,iBAJ8C,CAK/C;;;AACArE,gBAAAA,GAAG,GAAGoE,MAAM,CAAC3B,KAAK,CAAC1K,KAAN,CAAYlB,CAAC,GAAG,CAAhB,CAAD,EAAqBwN,WAAW,CAAChO,MAAjC,CAAZ;;AACA,oBAAI2J,GAAJ,EAAS;AACPA,kBAAAA,GAAG,CAACnC,qBAAJ,GAA4BmC,GAAG,CAACnC,qBAAJ,IAC1B,CAACwG,WAAW,CAAChO,MAAZ,CAAmB2G,eADtB;AAED;;AACD,uBAAOgD,GAAP;AACD,eAdqB,CAetB;;;AACAA,cAAAA,GAAG,GAAGoE,MAAM,CAAC3B,KAAK,CAAC1K,KAAN,CAAYlB,CAAZ,CAAD,EAAiBwN,WAAW,CAAChO,MAA7B,CAAZ;;AACA,kBAAI2J,GAAJ,EAAS;AACPA,gBAAAA,GAAG,CAACnC,qBAAJ,GAA4BmC,GAAG,CAACnC,qBAAJ,IAC1B,CAACwG,WAAW,CAAChO,MAAZ,CAAmB2G,eADtB;AAED;;AACD,qBAAOgD,GAAP;AACD;AACF;AACF,SAtCD,MAsCO,IAAIqE,WAAW,CAACxH,YAAhB,EAA8B;AACnC,cAAIhG,CAAC,GAAG,CAAJ,IAAS4L,KAAK,CAAC1I,MAAnB,EAA2B;AACzB,mBAAOsK,WAAP;AACD;;AACD,gBAAMrE,GAAG,GAAGoE,MAAM,CAAC3B,KAAK,CAAC1K,KAAN,CAAYlB,CAAC,GAAG,CAAhB,CAAD,EAAqBwN,WAAW,CAACvH,aAAZ,CAA0BzG,MAA/C,CAAlB;AACA,iBAAO2J,GAAP;AACD;;AAEDqE,QAAAA,WAAW,CAACF,SAAZ,GAAwBD,UAAU,CAACtB,IAAX,CAAgB,GAAhB,CAAxB;AAEA,eAAOyB,WAAP;AACD;AACF;AACF,GAxE0C,CA0E3C;;;AACA,QAAM5B,KAAK,GAAGjM,IAAI,CAACsF,KAAL,CAAW,GAAX,CAAd;;AACA,OAAK,IAAI8D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6C,KAAK,CAAC1I,MAA1B,EAAkC,EAAE6F,CAApC,EAAuC;AACrC,QAAI6C,KAAK,CAAC7C,CAAD,CAAL,KAAa,GAAb,IAAoB2E,aAAa,CAAC9B,KAAK,CAAC7C,CAAD,CAAN,CAArC,EAAiD;AAC/C;AACA6C,MAAAA,KAAK,CAAC7C,CAAD,CAAL,GAAW,GAAX;AACD;AACF;;AACD,SAAOwE,MAAM,CAAC3B,KAAD,EAAQuB,KAAR,CAAb;AACD,CAnFD;AAqFA;AACA;AACA;;;AAEA5P,MAAM,CAAC6C,SAAP,CAAiBuN,YAAjB,GAAgC,UAAShO,IAAT,EAAe;AAC7C,QAAMwN,KAAK,GAAG,IAAd;;AACA,QAAMC,UAAU,GAAGD,KAAK,CAACxN,IAAN,CAAWA,IAAX,CAAnB;;AAEA,MAAIyN,UAAJ,EAAgB;AACd,WAAO,MAAP;AACD;;AAED,WAASG,MAAT,CAAgB3B,KAAhB,EAAuBpM,MAAvB,EAA+B;AAC7B,QAAIQ,CAAC,GAAG4L,KAAK,CAAC1I,MAAN,GAAe,CAAvB;AAAA,QACIsK,WADJ;AAAA,QAEIC,OAFJ;;AAIA,WAAOzN,CAAC,EAAR,EAAY;AACVyN,MAAAA,OAAO,GAAG7B,KAAK,CAAC1K,KAAN,CAAY,CAAZ,EAAelB,CAAf,EAAkB+L,IAAlB,CAAuB,GAAvB,CAAV;AACAyB,MAAAA,WAAW,GAAGhO,MAAM,CAACG,IAAP,CAAY8N,OAAZ,CAAd;;AACA,UAAID,WAAJ,EAAiB;AACf,YAAIA,WAAW,CAACnH,MAAhB,EAAwB;AACtB;AACA,cAAImH,WAAW,CAACnH,MAAZ,YAA8B1J,aAAa,CAACgL,KAAhD,EAAuD;AACrD,mBAAO;AAAEnI,cAAAA,MAAM,EAAEgO,WAAV;AAAuBhE,cAAAA,QAAQ,EAAE;AAAjC,aAAP;AACD,WAJqB,CAMtB;AACA;AACA;AACA;AACA;AACA;;;AACA,cAAIxJ,CAAC,KAAK4L,KAAK,CAAC1I,MAAZ,IAAsBsK,WAAW,CAAChO,MAAtC,EAA8C;AAC5C,gBAAIoM,KAAK,CAAC5L,CAAD,CAAL,KAAa,GAAb,IAAoB0N,aAAa,CAAC9B,KAAK,CAAC5L,CAAD,CAAN,CAArC,EAAiD;AAC/C,kBAAIA,CAAC,KAAK4L,KAAK,CAAC1I,MAAN,GAAe,CAAzB,EAA4B;AAC1B,uBAAO;AAAE1D,kBAAAA,MAAM,EAAEgO,WAAV;AAAuBhE,kBAAAA,QAAQ,EAAE;AAAjC,iBAAP;AACD,eAH8C,CAI/C;;;AACA,qBAAO+D,MAAM,CAAC3B,KAAK,CAAC1K,KAAN,CAAYlB,CAAC,GAAG,CAAhB,CAAD,EAAqBwN,WAAW,CAAChO,MAAjC,CAAb;AACD,aAP2C,CAQ5C;;;AACA,mBAAO+N,MAAM,CAAC3B,KAAK,CAAC1K,KAAN,CAAYlB,CAAZ,CAAD,EAAiBwN,WAAW,CAAChO,MAA7B,CAAb;AACD;;AACD,iBAAO;AACLA,YAAAA,MAAM,EAAEgO,WADH;AAELhE,YAAAA,QAAQ,EAAEgE,WAAW,CAACrH,eAAZ,GAA8B,QAA9B,GAAyC;AAF9C,WAAP;AAID;;AACD,eAAO;AAAE3G,UAAAA,MAAM,EAAEgO,WAAV;AAAuBhE,UAAAA,QAAQ,EAAE;AAAjC,SAAP;AACD,OA9BD,MA8BO,IAAIxJ,CAAC,KAAK4L,KAAK,CAAC1I,MAAZ,IAAsB1D,MAAM,CAACzB,MAAP,CAAc0P,OAAd,CAA1B,EAAkD;AACvD,eAAO;AAAEjO,UAAAA,MAAM,EAAEA,MAAV;AAAkBgK,UAAAA,QAAQ,EAAE;AAA5B,SAAP;AACD;AACF;;AACD,WAAO;AAAEhK,MAAAA,MAAM,EAAEgO,WAAW,IAAIhO,MAAzB;AAAiCgK,MAAAA,QAAQ,EAAE;AAA3C,KAAP;AACD,GAnD4C,CAqD7C;;;AACA,SAAO+D,MAAM,CAAC5N,IAAI,CAACsF,KAAL,CAAW,GAAX,CAAD,EAAkBkI,KAAlB,CAAb;AACD,CAvDD;AAyDA;AACA;AACA;;;AAEA,SAASO,aAAT,CAAuBlB,KAAvB,EAA8B;AAC5B,SAAOA,KAAK,CAACH,UAAN,CAAiB,IAAjB,KAA0BG,KAAK,CAACoB,QAAN,CAAe,GAAf,CAAjC;AACD;AAED;AACA;AACA;AACA;;;AAEArQ,MAAM,CAAC6C,SAAP,CAAiByN,WAAjB,GAA+B,SAASA,WAAT,GAAuB;AACpD1R,EAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,CAFD;AAIA;AACA;AACA;;;AAEA2R,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGxQ,MAA3B,C,CAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACgK,KAAP,GAAe5K,aAAa,GAAGnB,OAAO,CAAC,gBAAD,CAAtC;AAEA;AACA;AACA;;AAEAuS,OAAO,CAACC,QAAR,GAAmBrR,aAAa,CAACqR,QAAjC","sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\nconst Kareem = require('kareem');\nconst MongooseError = require('./error/mongooseError');\nconst SchemaType = require('./schematype');\nconst SchemaTypeOptions = require('./options/SchemaTypeOptions');\nconst VirtualOptions = require('./options/VirtualOptions');\nconst VirtualType = require('./virtualtype');\nconst addAutoId = require('./helpers/schema/addAutoId');\nconst get = require('./helpers/get');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst getIndexes = require('./helpers/schema/getIndexes');\nconst idGetter = require('./helpers/schema/idGetter');\nconst merge = require('./helpers/schema/merge');\nconst mpath = require('mpath');\nconst readPref = require('./driver').get().ReadPreference;\nconst setupTimestamps = require('./helpers/timestamps/setupTimestamps');\nconst utils = require('./utils');\nconst validateRef = require('./helpers/populate/validateRef');\n\nlet MongooseTypes;\n\nconst queryHooks = require('./helpers/query/applyQueryMiddleware').\n  middlewareFunctions;\nconst documentHooks = require('./helpers/model/applyHooks').middlewareFunctions;\nconst hookNames = queryHooks.concat(documentHooks).\n  reduce((s, hook) => s.add(hook), new Set());\n\nlet id = 0;\n\n/**\n * Schema constructor.\n *\n * ####Example:\n *\n *     const child = new Schema({ name: String });\n *     const schema = new Schema({ name: String, age: Number, children: [child] });\n *     const Tree = mongoose.model('Tree', schema);\n *\n *     // setting schema options\n *     new Schema({ name: String }, { _id: false, autoIndex: false })\n *\n * ####Options:\n *\n * - [autoIndex](/docs/guide.html#autoIndex): bool - defaults to null (which means use the connection's autoIndex option)\n * - [autoCreate](/docs/guide.html#autoCreate): bool - defaults to null (which means use the connection's autoCreate option)\n * - [bufferCommands](/docs/guide.html#bufferCommands): bool - defaults to true\n * - [bufferTimeoutMS](/docs/guide.html#bufferTimeoutMS): number - defaults to 10000 (10 seconds). If `bufferCommands` is enabled, the amount of time Mongoose will wait for connectivity to be restablished before erroring out.\n * - [capped](/docs/guide.html#capped): bool - defaults to false\n * - [collection](/docs/guide.html#collection): string - no default\n * - [discriminatorKey](/docs/guide.html#discriminatorKey): string - defaults to `__t`\n * - [id](/docs/guide.html#id): bool - defaults to true\n * - [_id](/docs/guide.html#_id): bool - defaults to true\n * - [minimize](/docs/guide.html#minimize): bool - controls [document#toObject](#document_Document-toObject) behavior when called manually - defaults to true\n * - [read](/docs/guide.html#read): string\n * - [writeConcern](/docs/guide.html#writeConcern): object - defaults to null, use to override [the MongoDB server's default write concern settings](https://docs.mongodb.com/manual/reference/write-concern/)\n * - [shardKey](/docs/guide.html#shardKey): object - defaults to `null`\n * - [strict](/docs/guide.html#strict): bool - defaults to true\n * - [toJSON](/docs/guide.html#toJSON) - object - no default\n * - [toObject](/docs/guide.html#toObject) - object - no default\n * - [typeKey](/docs/guide.html#typeKey) - string - defaults to 'type'\n * - [validateBeforeSave](/docs/guide.html#validateBeforeSave) - bool - defaults to `true`\n * - [versionKey](/docs/guide.html#versionKey): string or object - defaults to \"__v\"\n * - [optimisticConcurrency](/docs/guide.html#optimisticConcurrency): bool - defaults to false. Set to true to enable [optimistic concurrency](https://thecodebarbarian.com/whats-new-in-mongoose-5-10-optimistic-concurrency.html).\n * - [collation](/docs/guide.html#collation): object - defaults to null (which means use no collation)\n * - [selectPopulatedPaths](/docs/guide.html#selectPopulatedPaths): boolean - defaults to `true`\n * - [skipVersioning](/docs/guide.html#skipVersioning): object - paths to exclude from versioning\n * - [timestamps](/docs/guide.html#timestamps): object or boolean - defaults to `false`. If true, Mongoose adds `createdAt` and `updatedAt` properties to your schema and manages those properties for you.\n *\n * ####Options for Nested Schemas:\n * - `excludeIndexes`: bool - defaults to `false`. If `true`, skip building indexes on this schema's paths.\n *\n * ####Note:\n *\n * _When nesting schemas, (`children` in the example above), always declare the child schema first before passing it into its parent._\n *\n * @param {Object|Schema|Array} [definition] Can be one of: object describing schema paths, or schema to copy, or array of objects and schemas\n * @param {Object} [options]\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted after the schema is compiled into a `Model`.\n * @api public\n */\n\nfunction Schema(obj, options) {\n  if (!(this instanceof Schema)) {\n    return new Schema(obj, options);\n  }\n\n  this.obj = obj;\n  this.paths = {};\n  this.aliases = {};\n  this.subpaths = {};\n  this.virtuals = {};\n  this.singleNestedPaths = {};\n  this.nested = {};\n  this.inherits = {};\n  this.callQueue = [];\n  this._indexes = [];\n  this.methods = {};\n  this.methodOptions = {};\n  this.statics = {};\n  this.tree = {};\n  this.query = {};\n  this.childSchemas = [];\n  this.plugins = [];\n  // For internal debugging. Do not use this to try to save a schema in MDB.\n  this.$id = ++id;\n  this.mapPaths = [];\n\n  this.s = {\n    hooks: new Kareem()\n  };\n\n  this.options = this.defaultOptions(options);\n\n  // build paths\n  if (Array.isArray(obj)) {\n    for (const definition of obj) {\n      this.add(definition);\n    }\n  } else if (obj) {\n    this.add(obj);\n  }\n\n  // check if _id's value is a subdocument (gh-2276)\n  const _idSubDoc = obj && obj._id && utils.isObject(obj._id);\n\n  // ensure the documents get an auto _id unless disabled\n  const auto_id = !this.paths['_id'] &&\n      (this.options._id) && !_idSubDoc;\n\n  if (auto_id) {\n    addAutoId(this);\n  }\n\n  this.setupTimestamp(this.options.timestamps);\n}\n\n/*!\n * Create virtual properties with alias field\n */\nfunction aliasFields(schema, paths) {\n  paths = paths || Object.keys(schema.paths);\n  for (const path of paths) {\n    const options = get(schema.paths[path], 'options');\n    if (options == null) {\n      continue;\n    }\n\n    const prop = schema.paths[path].path;\n    const alias = options.alias;\n\n    if (!alias) {\n      continue;\n    }\n\n    if (typeof alias !== 'string') {\n      throw new Error('Invalid value for alias option on ' + prop + ', got ' + alias);\n    }\n\n    schema.aliases[alias] = prop;\n\n    schema.\n      virtual(alias).\n      get((function(p) {\n        return function() {\n          if (typeof this.get === 'function') {\n            return this.get(p);\n          }\n          return this[p];\n        };\n      })(prop)).\n      set((function(p) {\n        return function(v) {\n          return this.$set(p, v);\n        };\n      })(prop));\n  }\n}\n\n/*!\n * Inherit from EventEmitter.\n */\nSchema.prototype = Object.create(EventEmitter.prototype);\nSchema.prototype.constructor = Schema;\nSchema.prototype.instanceOfSchema = true;\n\n/*!\n * ignore\n */\n\nObject.defineProperty(Schema.prototype, '$schemaType', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n\n/**\n * Array of child schemas (from document arrays and single nested subdocs)\n * and their corresponding compiled models. Each element of the array is\n * an object with 2 properties: `schema` and `model`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * @api public\n * @property childSchemas\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'childSchemas', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The original object passed to the schema constructor\n *\n * ####Example:\n *\n *     const schema = new Schema({ a: String }).add({ b: String });\n *     schema.obj; // { a: String }\n *\n * @api public\n * @property obj\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.obj;\n\n/**\n * The paths defined on this schema. The keys are the top-level paths\n * in this schema, and the values are instances of the SchemaType class.\n *\n * ####Example:\n *     const schema = new Schema({ name: String }, { _id: false });\n *     schema.paths; // { name: SchemaString { ... } }\n *\n *     schema.add({ age: Number });\n *     schema.paths; // { name: SchemaString { ... }, age: SchemaNumber { ... } }\n *\n * @api public\n * @property paths\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.paths;\n\n/**\n * Schema as a tree\n *\n * ####Example:\n *     {\n *         '_id'     : ObjectId\n *       , 'nested'  : {\n *             'key' : String\n *         }\n *     }\n *\n * @api private\n * @property tree\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.tree;\n\n/**\n * Returns a deep copy of the schema\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String });\n *     const clone = schema.clone();\n *     clone === schema; // false\n *     clone.path('name'); // SchemaString { ... }\n *\n * @return {Schema} the cloned schema\n * @api public\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.clone = function() {\n  const Constructor = this.base == null ? Schema : this.base.Schema;\n\n  const s = new Constructor({}, this._userProvidedOptions);\n  s.base = this.base;\n  s.obj = this.obj;\n  s.options = utils.clone(this.options);\n  s.callQueue = this.callQueue.map(function(f) { return f; });\n  s.methods = utils.clone(this.methods);\n  s.methodOptions = utils.clone(this.methodOptions);\n  s.statics = utils.clone(this.statics);\n  s.query = utils.clone(this.query);\n  s.plugins = Array.prototype.slice.call(this.plugins);\n  s._indexes = utils.clone(this._indexes);\n  s.s.hooks = this.s.hooks.clone();\n\n  s.tree = utils.clone(this.tree);\n  s.paths = utils.clone(this.paths);\n  s.nested = utils.clone(this.nested);\n  s.subpaths = utils.clone(this.subpaths);\n  s.singleNestedPaths = utils.clone(this.singleNestedPaths);\n  s.childSchemas = gatherChildSchemas(s);\n\n  s.virtuals = utils.clone(this.virtuals);\n  s.$globalPluginsApplied = this.$globalPluginsApplied;\n  s.$isRootDiscriminator = this.$isRootDiscriminator;\n  s.$implicitlyCreated = this.$implicitlyCreated;\n  s.$id = ++id;\n  s.$originalSchemaId = this.$id;\n  s.mapPaths = [].concat(this.mapPaths);\n\n  if (this.discriminatorMapping != null) {\n    s.discriminatorMapping = Object.assign({}, this.discriminatorMapping);\n  }\n  if (this.discriminators != null) {\n    s.discriminators = Object.assign({}, this.discriminators);\n  }\n\n  s.aliases = Object.assign({}, this.aliases);\n\n  // Bubble up `init` for backwards compat\n  s.on('init', v => this.emit('init', v));\n\n  return s;\n};\n\n/**\n * Returns a new schema that has the picked `paths` from this schema.\n *\n * This method is analagous to [Lodash's `pick()` function](https://lodash.com/docs/4.17.15#pick) for Mongoose schemas.\n *\n * ####Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema with the same `name` path as `schema`,\n *     // but no `age` path.\n *     const newSchema = schema.pick(['name']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {Array} paths list of paths to pick\n * @param {Object} [options] options to pass to the schema constructor. Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\nSchema.prototype.pick = function(paths, options) {\n  const newSchema = new Schema({}, options || this.options);\n  if (!Array.isArray(paths)) {\n    throw new MongooseError('Schema#pick() only accepts an array argument, ' +\n      'got \"' + typeof paths + '\"');\n  }\n\n  for (const path of paths) {\n    if (this.nested[path]) {\n      newSchema.add({ [path]: get(this.tree, path) });\n    } else {\n      const schematype = this.path(path);\n      if (schematype == null) {\n        throw new MongooseError('Path `' + path + '` is not in the schema');\n      }\n      newSchema.add({ [path]: schematype });\n    }\n  }\n\n  return newSchema;\n};\n\n/**\n * Returns default options for this schema, merged with `options`.\n *\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\nSchema.prototype.defaultOptions = function(options) {\n  this._userProvidedOptions = options == null ? {} : utils.clone(options);\n\n  const baseOptions = get(this, 'base.options', {});\n  options = utils.options({\n    strict: 'strict' in baseOptions ? baseOptions.strict : true,\n    bufferCommands: true,\n    capped: false, // { size, max, autoIndexId }\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    // the following are only applied at construction time\n    _id: true,\n    id: true,\n    typeKey: 'type'\n  }, utils.clone(options));\n\n  if (options.read) {\n    options.read = readPref(options.read);\n  }\n\n  if (options.versionKey && typeof options.versionKey !== 'string') {\n    throw new MongooseError('`versionKey` must be falsy or string, got `' + (typeof options.versionKey) + '`');\n  }\n\n  if (options.optimisticConcurrency && !options.versionKey) {\n    throw new MongooseError('Must set `versionKey` if using `optimisticConcurrency`');\n  }\n\n  return options;\n};\n\n/**\n * Adds key path / schema type pairs to this schema.\n *\n * ####Example:\n *\n *     const ToySchema = new Schema();\n *     ToySchema.add({ name: 'string', color: 'string', price: 'number' });\n *\n *     const TurboManSchema = new Schema();\n *     // You can also `add()` another schema and copy over all paths, virtuals,\n *     // getters, setters, indexes, methods, and statics.\n *     TurboManSchema.add(ToySchema).add({ year: Number });\n *\n * @param {Object|Schema} obj plain object with paths to add, or another schema\n * @param {String} [prefix] path to prefix the newly added paths with\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.add = function add(obj, prefix) {\n  if (obj instanceof Schema || (obj != null && obj.instanceOfSchema)) {\n    merge(this, obj);\n\n    return this;\n  }\n\n  // Special case: setting top-level `_id` to false should convert to disabling\n  // the `_id` option. This behavior never worked before 5.4.11 but numerous\n  // codebases use it (see gh-7516, gh-7512).\n  if (obj._id === false && prefix == null) {\n    this.options._id = false;\n  }\n\n  prefix = prefix || '';\n  // avoid prototype pollution\n  if (prefix === '__proto__.' || prefix === 'constructor.' || prefix === 'prototype.') {\n    return this;\n  }\n\n  const keys = Object.keys(obj);\n\n  for (const key of keys) {\n    const fullPath = prefix + key;\n\n    if (obj[key] == null) {\n      throw new TypeError('Invalid value for schema path `' + fullPath +\n        '`, got value \"' + obj[key] + '\"');\n    }\n    // Retain `_id: false` but don't set it as a path, re: gh-8274.\n    if (key === '_id' && obj[key] === false) {\n      continue;\n    }\n    if (obj[key] instanceof VirtualType || get(obj[key], 'constructor.name', null) === 'VirtualType') {\n      this.virtual(obj[key]);\n      continue;\n    }\n\n    if (Array.isArray(obj[key]) && obj[key].length === 1 && obj[key][0] == null) {\n      throw new TypeError('Invalid value for schema Array path `' + fullPath +\n        '`, got value \"' + obj[key][0] + '\"');\n    }\n\n    if (!(utils.isPOJO(obj[key]) || obj[key] instanceof SchemaTypeOptions)) {\n      // Special-case: Non-options definitely a path so leaf at this node\n      // Examples: Schema instances, SchemaType instances\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n      this.path(prefix + key, obj[key]);\n    } else if (Object.keys(obj[key]).length < 1) {\n      // Special-case: {} always interpreted as Mixed path so leaf at this node\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n      this.path(fullPath, obj[key]); // mixed type\n    } else if (!obj[key][this.options.typeKey] || (this.options.typeKey === 'type' && obj[key].type.type)) {\n      // Special-case: POJO with no bona-fide type key - interpret as tree of deep paths so recurse\n      // nested object { last: { name: String }}\n      this.nested[fullPath] = true;\n      this.add(obj[key], fullPath + '.');\n    } else {\n      // There IS a bona-fide type key that may also be a POJO\n      const _typeDef = obj[key][this.options.typeKey];\n      if (utils.isPOJO(_typeDef) && Object.keys(_typeDef).length > 0) {\n        // If a POJO is the value of a type key, make it a subdocument\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        }\n        const _schema = new Schema(_typeDef);\n        const schemaWrappedPath = Object.assign({}, obj[key], { type: _schema });\n        this.path(prefix + key, schemaWrappedPath);\n      } else {\n        // Either the type is non-POJO or we interpret it as Mixed anyway\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        }\n        this.path(prefix + key, obj[key]);\n      }\n    }\n  }\n\n  const addedKeys = Object.keys(obj).\n    map(key => prefix ? prefix + key : key);\n  aliasFields(this, addedKeys);\n  return this;\n};\n\n/**\n * Reserved document keys.\n *\n * Keys in this object are names that are warned in schema declarations\n * because they have the potential to break Mongoose/ Mongoose plugins functionality. If you create a schema\n * using `new Schema()` with one of these property names, Mongoose will log a warning.\n *\n * - _posts\n * - _pres\n * - collection\n  * - emit\n * - errors\n * - get\n * - init\n * - isModified\n * - isNew\n * - listeners\n * - modelName\n * - on\n * - once\n * - populated\n * - prototype\n * - remove\n * - removeListener\n * - save\n * - schema\n * - toObject\n * - validate\n *\n * _NOTE:_ Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.\n *\n *      const schema = new Schema(..);\n *      schema.methods.init = function () {} // potentially breaking\n */\n\nSchema.reserved = Object.create(null);\nSchema.prototype.reserved = Schema.reserved;\n\nconst reserved = Schema.reserved;\n// Core object\nreserved['prototype'] =\n// EventEmitter\nreserved.emit =\nreserved.listeners =\nreserved.on =\nreserved.removeListener =\n\n// document properties and functions\nreserved.collection =\nreserved.errors =\nreserved.get =\nreserved.init =\nreserved.isModified =\nreserved.isNew =\nreserved.populated =\nreserved.remove =\nreserved.save =\nreserved.toObject =\nreserved.validate = 1;\nreserved.collection = 1;\n\n/**\n * Gets/sets schema paths.\n *\n * Sets a path (if arity 2)\n * Gets a path (if arity 1)\n *\n * ####Example\n *\n *     schema.path('name') // returns a SchemaType\n *     schema.path('name', Number) // changes the schemaType of `name` to Number\n *\n * @param {String} path\n * @param {Object} constructor\n * @api public\n */\n\nSchema.prototype.path = function(path, obj) {\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n  if (obj === undefined) {\n    let schematype = _getPath(this, path, cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // Look for maps\n    const mapPath = getMapPath(this, path);\n    if (mapPath != null) {\n      return mapPath;\n    }\n\n    // Look if a parent of this path is mixed\n    schematype = this.hasMixedParent(cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // subpaths?\n    return /\\.\\d+\\.?.*$/.test(path)\n      ? getPositionalPath(this, path)\n      : undefined;\n  }\n\n  // some path names conflict with document methods\n  const firstPieceOfPath = path.split('.')[0];\n  if (reserved[firstPieceOfPath] && !this.options.supressReservedKeysWarning) {\n    const errorMessage = `\\`${firstPieceOfPath}\\` is a reserved schema pathname and may break some functionality. ` +\n      'You are allowed to use it, but use at your own risk. ' +\n      'To disable this warning pass `supressReservedKeysWarning` as a schema option.';\n\n    console.warn(errorMessage);\n  }\n\n  if (typeof obj === 'object' && utils.hasUserDefinedProperty(obj, 'ref')) {\n    validateRef(obj.ref, path);\n  }\n\n  // update the tree\n  const subpaths = path.split(/\\./);\n  const last = subpaths.pop();\n  let branch = this.tree;\n  let fullPath = '';\n\n  for (const sub of subpaths) {\n    fullPath = fullPath += (fullPath.length > 0 ? '.' : '') + sub;\n    if (!branch[sub]) {\n      this.nested[fullPath] = true;\n      branch[sub] = {};\n    }\n    if (typeof branch[sub] !== 'object') {\n      const msg = 'Cannot set nested path `' + path + '`. '\n          + 'Parent path `'\n          + fullPath\n          + '` already set to type ' + branch[sub].name\n          + '.';\n      throw new Error(msg);\n    }\n    branch = branch[sub];\n  }\n\n  branch[last] = utils.clone(obj);\n\n  this.paths[path] = this.interpretAsType(path, obj, this.options);\n  const schemaType = this.paths[path];\n\n  if (schemaType.$isSchemaMap) {\n    // Maps can have arbitrary keys, so `$*` is internal shorthand for \"any key\"\n    // The '$' is to imply this path should never be stored in MongoDB so we\n    // can easily build a regexp out of this path, and '*' to imply \"any key.\"\n    const mapPath = path + '.$*';\n\n    this.paths[mapPath] = schemaType.$__schemaType;\n    this.mapPaths.push(this.paths[mapPath]);\n  }\n\n  if (schemaType.$isSingleNested) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      this.singleNestedPaths[path + '.' + key] =\n        schemaType.schema.singleNestedPaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      this.singleNestedPaths[path + '.' + key] =\n        schemaType.schema.subpaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.nested)) {\n      this.singleNestedPaths[path + '.' + key] = 'nested';\n    }\n\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n\n    schemaType.caster.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.caster\n    });\n  } else if (schemaType.$isMongooseDocumentArray) {\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n\n    schemaType.casterConstructor.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.casterConstructor\n    });\n  }\n\n  if (schemaType.$isMongooseArray && schemaType.caster instanceof SchemaType) {\n    let arrayPath = path;\n    let _schemaType = schemaType;\n\n    const toAdd = [];\n    while (_schemaType.$isMongooseArray) {\n      arrayPath = arrayPath + '.$';\n\n      // Skip arrays of document arrays\n      if (_schemaType.$isMongooseDocumentArray) {\n        _schemaType.$embeddedSchemaType._arrayPath = arrayPath;\n        _schemaType.$embeddedSchemaType._arrayParentPath = path;\n        _schemaType = _schemaType.$embeddedSchemaType.clone();\n      } else {\n        _schemaType.caster._arrayPath = arrayPath;\n        _schemaType.caster._arrayParentPath = path;\n        _schemaType = _schemaType.caster.clone();\n      }\n\n      _schemaType.path = arrayPath;\n      toAdd.push(_schemaType);\n    }\n\n    for (const _schemaType of toAdd) {\n      this.subpaths[_schemaType.path] = _schemaType;\n    }\n  }\n\n  if (schemaType.$isMongooseDocumentArray) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      const _schemaType = schemaType.schema.paths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null) {\n        _schemaType.$isUnderneathDocArray = true;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      const _schemaType = schemaType.schema.subpaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null) {\n        _schemaType.$isUnderneathDocArray = true;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      const _schemaType = schemaType.schema.singleNestedPaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null) {\n        _schemaType.$isUnderneathDocArray = true;\n      }\n    }\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction gatherChildSchemas(schema) {\n  const childSchemas = [];\n\n  for (const path of Object.keys(schema.paths)) {\n    const schematype = schema.paths[path];\n    if (schematype.$isMongooseDocumentArray || schematype.$isSingleNested) {\n      childSchemas.push({ schema: schematype.schema, model: schematype.caster });\n    }\n  }\n\n  return childSchemas;\n}\n\n/*!\n * ignore\n */\n\nfunction _getPath(schema, path, cleanPath) {\n  if (schema.paths.hasOwnProperty(path)) {\n    return schema.paths[path];\n  }\n  if (schema.subpaths.hasOwnProperty(cleanPath)) {\n    return schema.subpaths[cleanPath];\n  }\n  if (schema.singleNestedPaths.hasOwnProperty(cleanPath) && typeof schema.singleNestedPaths[cleanPath] === 'object') {\n    return schema.singleNestedPaths[cleanPath];\n  }\n\n  return null;\n}\n\n/*!\n * ignore\n */\n\nfunction _pathToPositionalSyntax(path) {\n  if (!/\\.\\d+/.test(path)) {\n    return path;\n  }\n  return path.replace(/\\.\\d+\\./g, '.$.').replace(/\\.\\d+$/, '.$');\n}\n\n/*!\n * ignore\n */\n\nfunction getMapPath(schema, path) {\n  if (schema.mapPaths.length === 0) {\n    return null;\n  }\n  for (const val of schema.mapPaths) {\n    const _path = val.path;\n    const re = new RegExp('^' + _path.replace(/\\.\\$\\*/g, '\\\\.[^.]+') + '$');\n    if (re.test(path)) {\n      return schema.paths[_path];\n    }\n  }\n\n  return null;\n}\n\n/**\n * The Mongoose instance this schema is associated with\n *\n * @property base\n * @api private\n */\n\nObject.defineProperty(Schema.prototype, 'base', {\n  configurable: true,\n  enumerable: false,\n  writable: true,\n  value: null\n});\n\n/**\n * Converts type arguments into Mongoose Types.\n *\n * @param {String} path\n * @param {Object} obj constructor\n * @api private\n */\n\nSchema.prototype.interpretAsType = function(path, obj, options) {\n  if (obj instanceof SchemaType) {\n    if (obj.path === path) {\n      return obj;\n    }\n    const clone = obj.clone();\n    clone.path = path;\n    return clone;\n  }\n\n  // If this schema has an associated Mongoose object, use the Mongoose object's\n  // copy of SchemaTypes re: gh-7158 gh-6933\n  const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n\n  if (!utils.isPOJO(obj) && !(obj instanceof SchemaTypeOptions)) {\n    const constructorName = utils.getFunctionName(obj.constructor);\n    if (constructorName !== 'Object') {\n      const oldObj = obj;\n      obj = {};\n      obj[options.typeKey] = oldObj;\n    }\n  }\n\n  // Get the type making sure to allow keys named \"type\"\n  // and default to mixed if not specified.\n  // { type: { type: String, default: 'freshcut' } }\n  let type = obj[options.typeKey] && (options.typeKey !== 'type' || !obj.type.type)\n    ? obj[options.typeKey]\n    : {};\n  let name;\n\n  if (utils.isPOJO(type) || type === 'mixed') {\n    return new MongooseTypes.Mixed(path, obj);\n  }\n\n  if (Array.isArray(type) || type === Array || type === 'array' || type === MongooseTypes.Array) {\n    // if it was specified through { type } look for `cast`\n    let cast = (type === Array || type === 'array')\n      ? obj.cast || obj.of\n      : type[0];\n\n    if (cast && cast.instanceOfSchema) {\n      if (!(cast instanceof Schema)) {\n        throw new TypeError('Schema for array path `' + path +\n          '` is from a different copy of the Mongoose module. Please make sure you\\'re using the same version ' +\n          'of Mongoose everywhere with `npm list mongoose`.');\n      }\n      return new MongooseTypes.DocumentArray(path, cast, obj);\n    }\n    if (cast &&\n        cast[options.typeKey] &&\n        cast[options.typeKey].instanceOfSchema) {\n      if (!(cast[options.typeKey] instanceof Schema)) {\n        throw new TypeError('Schema for array path `' + path +\n          '` is from a different copy of the Mongoose module. Please make sure you\\'re using the same version ' +\n          'of Mongoose everywhere with `npm list mongoose`.');\n      }\n      return new MongooseTypes.DocumentArray(path, cast[options.typeKey], obj, cast);\n    }\n\n    if (Array.isArray(cast)) {\n      return new MongooseTypes.Array(path, this.interpretAsType(path, cast, options), obj);\n    }\n\n    if (typeof cast === 'string') {\n      cast = MongooseTypes[cast.charAt(0).toUpperCase() + cast.substring(1)];\n    } else if (cast && (!cast[options.typeKey] || (options.typeKey === 'type' && cast.type.type))\n        && utils.isPOJO(cast)) {\n      if (Object.keys(cast).length) {\n        // The `minimize` and `typeKey` options propagate to child schemas\n        // declared inline, like `{ arr: [{ val: { $type: String } }] }`.\n        // See gh-3560\n        const childSchemaOptions = { minimize: options.minimize };\n        if (options.typeKey) {\n          childSchemaOptions.typeKey = options.typeKey;\n        }\n        // propagate 'strict' option to child schema\n        if (options.hasOwnProperty('strict')) {\n          childSchemaOptions.strict = options.strict;\n        }\n        if (this._userProvidedOptions.hasOwnProperty('_id')) {\n          childSchemaOptions._id = this._userProvidedOptions._id;\n        } else if (Schema.Types.DocumentArray.defaultOptions._id != null) {\n          childSchemaOptions._id = Schema.Types.DocumentArray.defaultOptions._id;\n        }\n        const childSchema = new Schema(cast, childSchemaOptions);\n        childSchema.$implicitlyCreated = true;\n        return new MongooseTypes.DocumentArray(path, childSchema, obj);\n      } else {\n        // Special case: empty object becomes mixed\n        return new MongooseTypes.Array(path, MongooseTypes.Mixed, obj);\n      }\n    }\n\n    if (cast) {\n      type = cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type)\n        ? cast[options.typeKey]\n        : cast;\n\n      name = typeof type === 'string'\n        ? type\n        : type.schemaName || utils.getFunctionName(type);\n\n      // For Jest 26+, see #10296\n      if (name === 'ClockDate') {\n        name = 'Date';\n      }\n\n      if (!MongooseTypes.hasOwnProperty(name)) {\n        throw new TypeError('Invalid schema configuration: ' +\n          `\\`${name}\\` is not a valid type within the array \\`${path}\\`.` +\n          'See http://bit.ly/mongoose-schematypes for a list of valid schema types.');\n      }\n    }\n\n    return new MongooseTypes.Array(path, cast || MongooseTypes.Mixed, obj, options);\n  }\n\n  if (type && type.instanceOfSchema) {\n    return new MongooseTypes.Subdocument(type, path, obj);\n  }\n\n  if (Buffer.isBuffer(type)) {\n    name = 'Buffer';\n  } else if (typeof type === 'function' || typeof type === 'object') {\n    name = type.schemaName || utils.getFunctionName(type);\n  } else {\n    name = type == null ? '' + type : type.toString();\n  }\n\n  if (name) {\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n  }\n  // Special case re: gh-7049 because the bson `ObjectID` class' capitalization\n  // doesn't line up with Mongoose's.\n  if (name === 'ObjectID') {\n    name = 'ObjectId';\n  }\n  // For Jest 26+, see #10296\n  if (name === 'ClockDate') {\n    name = 'Date';\n  }\n\n  if (MongooseTypes[name] == null) {\n    throw new TypeError(`Invalid schema configuration: \\`${name}\\` is not ` +\n      `a valid type at path \\`${path}\\`. See ` +\n      'http://bit.ly/mongoose-schematypes for a list of valid schema types.');\n  }\n\n  const schemaType = new MongooseTypes[name](path, obj);\n\n  if (schemaType.$isSchemaMap) {\n    createMapNestedSchemaType(this, schemaType, path, obj, options);\n  }\n\n  return schemaType;\n};\n\n/*!\n * ignore\n */\n\nfunction createMapNestedSchemaType(schema, schemaType, path, obj, options) {\n  const mapPath = path + '.$*';\n  let _mapType = { type: {} };\n  if (utils.hasUserDefinedProperty(obj, 'of')) {\n    const isInlineSchema = utils.isPOJO(obj.of) &&\n      Object.keys(obj.of).length > 0 &&\n      !utils.hasUserDefinedProperty(obj.of, schema.options.typeKey);\n    if (isInlineSchema) {\n      _mapType = { [schema.options.typeKey]: new Schema(obj.of) };\n    } else if (utils.isPOJO(obj.of)) {\n      _mapType = Object.assign({}, obj.of);\n    } else {\n      _mapType = { [schema.options.typeKey]: obj.of };\n    }\n\n    if (utils.hasUserDefinedProperty(obj, 'ref')) {\n      _mapType.ref = obj.ref;\n    }\n  }\n  schemaType.$__schemaType = schema.interpretAsType(mapPath, _mapType, options);\n}\n\n/**\n * Iterates the schemas paths similar to Array#forEach.\n *\n * The callback is passed the pathname and the schemaType instance.\n *\n * ####Example:\n *\n *     const userSchema = new Schema({ name: String, registeredAt: Date });\n *     userSchema.eachPath((pathname, schematype) => {\n *       // Prints twice:\n *       // name SchemaString { ... }\n *       // registeredAt SchemaDate { ... }\n *       console.log(pathname, schematype);\n *     });\n *\n * @param {Function} fn callback function\n * @return {Schema} this\n * @api public\n */\n\nSchema.prototype.eachPath = function(fn) {\n  const keys = Object.keys(this.paths);\n  const len = keys.length;\n\n  for (let i = 0; i < len; ++i) {\n    fn(keys[i], this.paths[keys[i]]);\n  }\n\n  return this;\n};\n\n/**\n * Returns an Array of path strings that are required by this schema.\n *\n * ####Example:\n *     const s = new Schema({\n *       name: { type: String, required: true },\n *       age: { type: String, required: true },\n *       notes: String\n *     });\n *     s.requiredPaths(); // [ 'age', 'name' ]\n *\n * @api public\n * @param {Boolean} invalidate refresh the cache\n * @return {Array}\n */\n\nSchema.prototype.requiredPaths = function requiredPaths(invalidate) {\n  if (this._requiredpaths && !invalidate) {\n    return this._requiredpaths;\n  }\n\n  const paths = Object.keys(this.paths);\n  let i = paths.length;\n  const ret = [];\n\n  while (i--) {\n    const path = paths[i];\n    if (this.paths[path].isRequired) {\n      ret.push(path);\n    }\n  }\n  this._requiredpaths = ret;\n  return this._requiredpaths;\n};\n\n/**\n * Returns indexes from fields and schema-level indexes (cached).\n *\n * @api private\n * @return {Array}\n */\n\nSchema.prototype.indexedPaths = function indexedPaths() {\n  if (this._indexedpaths) {\n    return this._indexedpaths;\n  }\n  this._indexedpaths = this.indexes();\n  return this._indexedpaths;\n};\n\n/**\n * Returns the pathType of `path` for this schema.\n *\n * Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.\n *\n * ####Example:\n *     const s = new Schema({ name: String, nested: { foo: String } });\n *     s.virtual('foo').get(() => 42);\n *     s.pathType('name'); // \"real\"\n *     s.pathType('nested'); // \"nested\"\n *     s.pathType('foo'); // \"virtual\"\n *     s.pathType('fail'); // \"adhocOrUndefined\"\n *\n * @param {String} path\n * @return {String}\n * @api public\n */\n\nSchema.prototype.pathType = function(path) {\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n\n  if (this.paths.hasOwnProperty(path)) {\n    return 'real';\n  }\n  if (this.virtuals.hasOwnProperty(path)) {\n    return 'virtual';\n  }\n  if (this.nested.hasOwnProperty(path)) {\n    return 'nested';\n  }\n  if (this.subpaths.hasOwnProperty(cleanPath) || this.subpaths.hasOwnProperty(path)) {\n    return 'real';\n  }\n\n  const singleNestedPath = this.singleNestedPaths.hasOwnProperty(cleanPath) || this.singleNestedPaths.hasOwnProperty(path);\n  if (singleNestedPath) {\n    return singleNestedPath === 'nested' ? 'nested' : 'real';\n  }\n\n  // Look for maps\n  const mapPath = getMapPath(this, path);\n  if (mapPath != null) {\n    return 'real';\n  }\n\n  if (/\\.\\d+\\.|\\.\\d+$/.test(path)) {\n    return getPositionalPathType(this, path);\n  }\n  return 'adhocOrUndefined';\n};\n\n/**\n * Returns true iff this path is a child of a mixed schema.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\nSchema.prototype.hasMixedParent = function(path) {\n  const subpaths = path.split(/\\./g);\n  path = '';\n  for (let i = 0; i < subpaths.length; ++i) {\n    path = i > 0 ? path + '.' + subpaths[i] : subpaths[i];\n    if (this.paths.hasOwnProperty(path) &&\n        this.paths[path] instanceof MongooseTypes.Mixed) {\n      return this.paths[path];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Setup updatedAt and createdAt timestamps to documents if enabled\n *\n * @param {Boolean|Object} timestamps timestamps options\n * @api private\n */\nSchema.prototype.setupTimestamp = function(timestamps) {\n  return setupTimestamps(this, timestamps);\n};\n\n/*!\n * ignore. Deprecated re: #6405\n */\n\nfunction getPositionalPathType(self, path) {\n  const subpaths = path.split(/\\.(\\d+)\\.|\\.(\\d+)$/).filter(Boolean);\n  if (subpaths.length < 2) {\n    return self.paths.hasOwnProperty(subpaths[0]) ?\n      self.paths[subpaths[0]] :\n      'adhocOrUndefined';\n  }\n\n  let val = self.path(subpaths[0]);\n  let isNested = false;\n  if (!val) {\n    return 'adhocOrUndefined';\n  }\n\n  const last = subpaths.length - 1;\n\n  for (let i = 1; i < subpaths.length; ++i) {\n    isNested = false;\n    const subpath = subpaths[i];\n\n    if (i === last && val && !/\\D/.test(subpath)) {\n      if (val.$isMongooseDocumentArray) {\n        val = val.$embeddedSchemaType;\n      } else if (val instanceof MongooseTypes.Array) {\n        // StringSchema, NumberSchema, etc\n        val = val.caster;\n      } else {\n        val = undefined;\n      }\n      break;\n    }\n\n    // ignore if its just a position segment: path.0.subpath\n    if (!/\\D/.test(subpath)) {\n      // Nested array\n      if (val instanceof MongooseTypes.Array && i !== last) {\n        val = val.caster;\n      }\n      continue;\n    }\n\n    if (!(val && val.schema)) {\n      val = undefined;\n      break;\n    }\n\n    const type = val.schema.pathType(subpath);\n    isNested = (type === 'nested');\n    val = val.schema.path(subpath);\n  }\n\n  self.subpaths[path] = val;\n  if (val) {\n    return 'real';\n  }\n  if (isNested) {\n    return 'nested';\n  }\n  return 'adhocOrUndefined';\n}\n\n\n/*!\n * ignore\n */\n\nfunction getPositionalPath(self, path) {\n  getPositionalPathType(self, path);\n  return self.subpaths[path];\n}\n\n/**\n * Adds a method call to the queue.\n *\n * ####Example:\n *\n *     schema.methods.print = function() { console.log(this); };\n *     schema.queue('print', []); // Print the doc every one is instantiated\n *\n *     const Model = mongoose.model('Test', schema);\n *     new Model({ name: 'test' }); // Prints '{\"_id\": ..., \"name\": \"test\" }'\n *\n * @param {String} name name of the document method to call later\n * @param {Array} args arguments to pass to the method\n * @api public\n */\n\nSchema.prototype.queue = function(name, args) {\n  this.callQueue.push([name, args]);\n  return this;\n};\n\n/**\n * Defines a pre hook for the model.\n *\n * ####Example\n *\n *     const toySchema = new Schema({ name: String, created: Date });\n *\n *     toySchema.pre('save', function(next) {\n *       if (!this.created) this.created = new Date;\n *       next();\n *     });\n *\n *     toySchema.pre('validate', function(next) {\n *       if (this.name !== 'Woody') this.name = 'Woody';\n *       next();\n *     });\n *\n *     // Equivalent to calling `pre()` on `find`, `findOne`, `findOneAndUpdate`.\n *     toySchema.pre(/^find/, function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     // Equivalent to calling `pre()` on `updateOne`, `findOneAndUpdate`.\n *     toySchema.pre(['updateOne', 'findOneAndUpdate'], function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     toySchema.pre('deleteOne', function() {\n *       // Runs when you call `Toy.deleteOne()`\n *     });\n *\n *     toySchema.pre('deleteOne', { document: true }, function() {\n *       // Runs when you call `doc.deleteOne()`\n *     });\n *\n * @param {String|RegExp} The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware. For example, set `options.document` to `true` to apply this hook to `Document#deleteOne()` rather than `Query#deleteOne()`.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} callback\n * @api public\n */\n\nSchema.prototype.pre = function(name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.pre.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.pre.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.pre.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Defines a post hook for the document\n *\n *     const schema = new Schema(..);\n *     schema.post('save', function (doc) {\n *       console.log('this fired after a document was saved');\n *     });\n *\n *     schema.post('find', function(docs) {\n *       console.log('this fired after you ran a find query');\n *     });\n *\n *     schema.post(/Many$/, function(res) {\n *       console.log('this fired after you ran `updateMany()` or `deleteMany()`);\n *     });\n *\n *     const Model = mongoose.model('Model', schema);\n *\n *     const m = new Model(..);\n *     m.save(function(err) {\n *       console.log('this fires after the `post` hook');\n *     });\n *\n *     m.find(function(err, docs) {\n *       console.log('this fires after the post find hook');\n *     });\n *\n * @param {String|RegExp} The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} fn callback\n * @see middleware http://mongoosejs.com/docs/middleware.html\n * @see kareem http://npmjs.org/package/kareem\n * @api public\n */\n\nSchema.prototype.post = function(name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.post.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.post.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.post.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Registers a plugin for this schema.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin(schema => console.log(schema.path('name').path));\n *     mongoose.model('Test', s); // Prints 'name'\n *\n * @param {Function} plugin callback\n * @param {Object} [opts]\n * @see plugins\n * @api public\n */\n\nSchema.prototype.plugin = function(fn, opts) {\n  if (typeof fn !== 'function') {\n    throw new Error('First param to `schema.plugin()` must be a function, ' +\n      'got \"' + (typeof fn) + '\"');\n  }\n\n  if (opts && opts.deduplicate) {\n    for (const plugin of this.plugins) {\n      if (plugin.fn === fn) {\n        return this;\n      }\n    }\n  }\n  this.plugins.push({ fn: fn, opts: opts });\n\n  fn(this, opts);\n  return this;\n};\n\n/**\n * Adds an instance method to documents constructed from Models compiled from this schema.\n *\n * ####Example\n *\n *     const schema = kittySchema = new Schema(..);\n *\n *     schema.method('meow', function () {\n *       console.log('meeeeeoooooooooooow');\n *     })\n *\n *     const Kitty = mongoose.model('Kitty', schema);\n *\n *     const fizz = new Kitty;\n *     fizz.meow(); // meeeeeooooooooooooow\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.method({\n *         purr: function () {}\n *       , scratch: function () {}\n *     });\n *\n *     // later\n *     fizz.purr();\n *     fizz.scratch();\n *\n * NOTE: `Schema.method()` adds instance methods to the `Schema.methods` object. You can also add instance methods directly to the `Schema.methods` object as seen in the [guide](/docs/guide.html#methods)\n *\n * @param {String|Object} method name\n * @param {Function} [fn]\n * @api public\n */\n\nSchema.prototype.method = function(name, fn, options) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.methods[i] = name[i];\n      this.methodOptions[i] = utils.clone(options);\n    }\n  } else {\n    this.methods[name] = fn;\n    this.methodOptions[name] = utils.clone(options);\n  }\n  return this;\n};\n\n/**\n * Adds static \"class\" methods to Models compiled from this schema.\n *\n * ####Example\n *\n *     const schema = new Schema(..);\n *     // Equivalent to `schema.statics.findByName = function(name) {}`;\n *     schema.static('findByName', function(name) {\n *       return this.find({ name: name });\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.\n *\n * @param {String|Object} name\n * @param {Function} [fn]\n * @api public\n * @see Statics /docs/guide.html#statics\n */\n\nSchema.prototype.static = function(name, fn) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.statics[i] = name[i];\n    }\n  } else {\n    this.statics[name] = fn;\n  }\n  return this;\n};\n\n/**\n * Defines an index (most likely compound) for this schema.\n *\n * ####Example\n *\n *     schema.index({ first: 1, last: -1 })\n *\n * @param {Object} fields\n * @param {Object} [options] Options to pass to [MongoDB driver's `createIndex()` function](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#createIndex)\n * @param {String | number} [options.expires=null] Mongoose-specific syntactic sugar, uses [ms](https://www.npmjs.com/package/ms) to convert `expires` option into seconds for the `expireAfterSeconds` in the above link.\n * @api public\n */\n\nSchema.prototype.index = function(fields, options) {\n  fields || (fields = {});\n  options || (options = {});\n\n  if (options.expires) {\n    utils.expires(options);\n  }\n\n  this._indexes.push([fields, options]);\n  return this;\n};\n\n/**\n * Sets a schema option.\n *\n * ####Example\n *\n *     schema.set('strict'); // 'true' by default\n *     schema.set('strict', false); // Sets 'strict' to false\n *     schema.set('strict'); // 'false'\n *\n * @param {String} key option name\n * @param {Object} [value] if not passed, the current option value is returned\n * @see Schema ./\n * @api public\n */\n\nSchema.prototype.set = function(key, value, _tags) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n\n  switch (key) {\n    case 'read':\n      this.options[key] = readPref(value, _tags);\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case 'timestamps':\n      this.setupTimestamp(value);\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case '_id':\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n\n      if (value && !this.paths['_id']) {\n        addAutoId(this);\n      } else if (!value && this.paths['_id'] != null && this.paths['_id'].auto) {\n        this.remove('_id');\n      }\n      break;\n    default:\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n  }\n\n  return this;\n};\n\n/**\n * Gets a schema option.\n *\n * ####Example:\n *\n *     schema.get('strict'); // true\n *     schema.set('strict', false);\n *     schema.get('strict'); // false\n *\n * @param {String} key option name\n * @api public\n * @return {Any} the option's value\n */\n\nSchema.prototype.get = function(key) {\n  return this.options[key];\n};\n\n/**\n * The allowed index types\n *\n * @receiver Schema\n * @static indexTypes\n * @api public\n */\n\nconst indexTypes = '2d 2dsphere hashed text'.split(' ');\n\nObject.defineProperty(Schema, 'indexTypes', {\n  get: function() {\n    return indexTypes;\n  },\n  set: function() {\n    throw new Error('Cannot overwrite Schema.indexTypes');\n  }\n});\n\n/**\n * Returns a list of indexes that this schema declares, via `schema.index()` or by `index: true` in a path's options.\n * Indexes are expressed as an array `[spec, options]`.\n *\n * ####Example:\n *\n *     const userSchema = new Schema({\n *       email: { type: String, required: true, unique: true },\n *       registeredAt: { type: Date, index: true }\n *     });\n *\n *     // [ [ { email: 1 }, { unique: true, background: true } ],\n *     //   [ { registeredAt: 1 }, { background: true } ] ]\n *     userSchema.indexes();\n *\n * [Plugins](/docs/plugins.html) can use the return value of this function to modify a schema's indexes.\n * For example, the below plugin makes every index unique by default.\n *\n *     function myPlugin(schema) {\n *       for (const index of schema.indexes()) {\n *         if (index[1].unique === undefined) {\n *           index[1].unique = true;\n *         }\n *       }\n *     }\n *\n * @api public\n * @return {Array} list of indexes defined in the schema\n */\n\nSchema.prototype.indexes = function() {\n  return getIndexes(this);\n};\n\n/**\n * Creates a virtual type with the given name.\n *\n * @param {String} name\n * @param {Object} [options]\n * @param {String|Model} [options.ref] model name or model instance. Marks this as a [populate virtual](populate.html#populate-virtuals).\n * @param {String|Function} [options.localField] Required for populate virtuals. See [populate virtual docs](populate.html#populate-virtuals) for more information.\n * @param {String|Function} [options.foreignField] Required for populate virtuals. See [populate virtual docs](populate.html#populate-virtuals) for more information.\n * @param {Boolean|Function} [options.justOne=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), will be a single doc or `null`. Otherwise, the populate virtual will be an array.\n * @param {Boolean} [options.count=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), this populate virtual will contain the number of documents rather than the documents themselves when you `populate()`.\n * @param {Function|null} [options.get=null] Adds a [getter](/docs/tutorials/getters-setters.html) to this virtual to transform the populated doc.\n * @return {VirtualType}\n */\n\nSchema.prototype.virtual = function(name, options) {\n  if (name instanceof VirtualType || getConstructorName(name) === 'VirtualType') {\n    return this.virtual(name.path, name.options);\n  }\n\n  options = new VirtualOptions(options);\n\n  if (utils.hasUserDefinedProperty(options, ['ref', 'refPath'])) {\n    if (options.localField == null) {\n      throw new Error('Reference virtuals require `localField` option');\n    }\n\n    if (options.foreignField == null) {\n      throw new Error('Reference virtuals require `foreignField` option');\n    }\n\n    this.pre('init', function(obj) {\n      if (mpath.has(name, obj)) {\n        const _v = mpath.get(name, obj);\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v[0] :\n            _v;\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v :\n            _v == null ? [] : [_v];\n        }\n\n        mpath.unset(name, obj);\n      }\n    });\n\n    const virtual = this.virtual(name);\n    virtual.options = options;\n\n    virtual.\n      set(function(_v) {\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v[0] :\n            _v;\n\n          if (typeof this.$$populatedVirtuals[name] !== 'object') {\n            this.$$populatedVirtuals[name] = options.count ? _v : null;\n          }\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v :\n            _v == null ? [] : [_v];\n\n          this.$$populatedVirtuals[name] = this.$$populatedVirtuals[name].filter(function(doc) {\n            return doc && typeof doc === 'object';\n          });\n        }\n      });\n\n    if (typeof options.get === 'function') {\n      virtual.get(options.get);\n    }\n\n    // Workaround for gh-8198: if virtual is under document array, make a fake\n    // virtual. See gh-8210\n    const parts = name.split('.');\n    let cur = parts[0];\n    for (let i = 0; i < parts.length - 1; ++i) {\n      if (this.paths[cur] != null && this.paths[cur].$isMongooseDocumentArray) {\n        const remnant = parts.slice(i + 1).join('.');\n        this.paths[cur].schema.virtual(remnant, options);\n        break;\n      }\n\n      cur += '.' + parts[i + 1];\n    }\n\n    return virtual;\n  }\n\n  const virtuals = this.virtuals;\n  const parts = name.split('.');\n\n  if (this.pathType(name) === 'real') {\n    throw new Error('Virtual path \"' + name + '\"' +\n      ' conflicts with a real path in the schema');\n  }\n\n  virtuals[name] = parts.reduce(function(mem, part, i) {\n    mem[part] || (mem[part] = (i === parts.length - 1)\n      ? new VirtualType(options, name)\n      : {});\n    return mem[part];\n  }, this.tree);\n\n  return virtuals[name];\n};\n\n/**\n * Returns the virtual type with the given `name`.\n *\n * @param {String} name\n * @return {VirtualType}\n */\n\nSchema.prototype.virtualpath = function(name) {\n  return this.virtuals.hasOwnProperty(name) ? this.virtuals[name] : null;\n};\n\n/**\n * Removes the given `path` (or [`paths`]).\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String, age: Number });\n *     schema.remove('name');\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // SchemaNumber { ... }\n *\n * @param {String|Array} path\n * @return {Schema} the Schema instance\n * @api public\n */\nSchema.prototype.remove = function(path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    path.forEach(function(name) {\n      if (this.path(name) == null && !this.nested[name]) {\n        return;\n      }\n      if (this.nested[name]) {\n        const allKeys = Object.keys(this.paths).\n          concat(Object.keys(this.nested));\n        for (const path of allKeys) {\n          if (path.startsWith(name + '.')) {\n            delete this.paths[path];\n            delete this.nested[path];\n            _deletePath(this, path);\n          }\n        }\n\n        delete this.nested[name];\n        _deletePath(this, name);\n        return;\n      }\n\n      delete this.paths[name];\n      _deletePath(this, name);\n    }, this);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _deletePath(schema, name) {\n  const pieces = name.split('.');\n  const last = pieces.pop();\n\n  let branch = schema.tree;\n\n  for (const piece of pieces) {\n    branch = branch[piece];\n  }\n\n  delete branch[last];\n}\n\n/**\n * Loads an ES6 class into a schema. Maps [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) + [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), [static methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static),\n * and [instance methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_body_and_method_definitions)\n * to schema [virtuals](/docs/guide.html#virtuals),\n * [statics](/docs/guide.html#statics), and\n * [methods](/docs/guide.html#methods).\n *\n * ####Example:\n *\n * ```javascript\n * const md5 = require('md5');\n * const userSchema = new Schema({ email: String });\n * class UserClass {\n *   // `gravatarImage` becomes a virtual\n *   get gravatarImage() {\n *     const hash = md5(this.email.toLowerCase());\n *     return `https://www.gravatar.com/avatar/${hash}`;\n *   }\n *\n *   // `getProfileUrl()` becomes a document method\n *   getProfileUrl() {\n *     return `https://mysite.com/${this.email}`;\n *   }\n *\n *   // `findByEmail()` becomes a static\n *   static findByEmail(email) {\n *     return this.findOne({ email });\n *   }\n * }\n *\n * // `schema` will now have a `gravatarImage` virtual, a `getProfileUrl()` method,\n * // and a `findByEmail()` static\n * userSchema.loadClass(UserClass);\n * ```\n *\n * @param {Function} model\n * @param {Boolean} [virtualsOnly] if truthy, only pulls virtuals from the class, not methods or statics\n */\nSchema.prototype.loadClass = function(model, virtualsOnly) {\n  if (model === Object.prototype ||\n      model === Function.prototype ||\n      model.prototype.hasOwnProperty('$isMongooseModelPrototype')) {\n    return this;\n  }\n\n  this.loadClass(Object.getPrototypeOf(model), virtualsOnly);\n\n  // Add static methods\n  if (!virtualsOnly) {\n    Object.getOwnPropertyNames(model).forEach(function(name) {\n      if (name.match(/^(length|name|prototype|constructor|__proto__)$/)) {\n        return;\n      }\n      const prop = Object.getOwnPropertyDescriptor(model, name);\n      if (prop.hasOwnProperty('value')) {\n        this.static(name, prop.value);\n      }\n    }, this);\n  }\n\n  // Add methods and virtuals\n  Object.getOwnPropertyNames(model.prototype).forEach(function(name) {\n    if (name.match(/^(constructor)$/)) {\n      return;\n    }\n    const method = Object.getOwnPropertyDescriptor(model.prototype, name);\n    if (!virtualsOnly) {\n      if (typeof method.value === 'function') {\n        this.method(name, method.value);\n      }\n    }\n    if (typeof method.get === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].getters = [];\n      }\n      this.virtual(name).get(method.get);\n    }\n    if (typeof method.set === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].setters = [];\n      }\n      this.virtual(name).set(method.set);\n    }\n  }, this);\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getSchema = function(path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n  const resultPath = [];\n\n  if (pathschema) {\n    pathschema.$fullPath = path;\n    return pathschema;\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1;\n    let foundschema;\n    let trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        resultPath.push(trypath);\n\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            foundschema.caster.$fullPath = resultPath.join('.');\n            return foundschema.caster;\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length) {\n            if (foundschema.schema) {\n              let ret;\n              if (parts[p] === '$' || isArrayFilter(parts[p])) {\n                if (p + 1 === parts.length) {\n                  // comments.$\n                  return foundschema;\n                }\n                // comments.$.comments.$.title\n                ret = search(parts.slice(p + 1), foundschema.schema);\n                if (ret) {\n                  ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\n                    !foundschema.schema.$isSingleNested;\n                }\n                return ret;\n              }\n              // this is the last path of the selector\n              ret = search(parts.slice(p), foundschema.schema);\n              if (ret) {\n                ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\n                  !foundschema.schema.$isSingleNested;\n              }\n              return ret;\n            }\n          }\n        } else if (foundschema.$isSchemaMap) {\n          if (p + 1 >= parts.length) {\n            return foundschema;\n          }\n          const ret = search(parts.slice(p + 1), foundschema.$__schemaType.schema);\n          return ret;\n        }\n\n        foundschema.$fullPath = resultPath.join('.');\n\n        return foundschema;\n      }\n    }\n  }\n\n  // look for arrays\n  const parts = path.split('.');\n  for (let i = 0; i < parts.length; ++i) {\n    if (parts[i] === '$' || isArrayFilter(parts[i])) {\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\n      parts[i] = '0';\n    }\n  }\n  return search(parts, _this);\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getPathType = function(path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n\n  if (pathschema) {\n    return 'real';\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1,\n        foundschema,\n        trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            return { schema: foundschema, pathType: 'mixed' };\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$' || isArrayFilter(parts[p])) {\n              if (p === parts.length - 1) {\n                return { schema: foundschema, pathType: 'nested' };\n              }\n              // comments.$.comments.$.title\n              return search(parts.slice(p + 1), foundschema.schema);\n            }\n            // this is the last path of the selector\n            return search(parts.slice(p), foundschema.schema);\n          }\n          return {\n            schema: foundschema,\n            pathType: foundschema.$isSingleNested ? 'nested' : 'array'\n          };\n        }\n        return { schema: foundschema, pathType: 'real' };\n      } else if (p === parts.length && schema.nested[trypath]) {\n        return { schema: schema, pathType: 'nested' };\n      }\n    }\n    return { schema: foundschema || schema, pathType: 'undefined' };\n  }\n\n  // look for arrays\n  return search(path.split('.'), _this);\n};\n\n/*!\n * ignore\n */\n\nfunction isArrayFilter(piece) {\n  return piece.startsWith('$[') && piece.endsWith(']');\n}\n\n/*!\n * Called by `compile()` _right before_ compiling. Good for making any changes to\n * the schema that should respect options set by plugins, like `id`\n */\n\nSchema.prototype._preCompile = function _preCompile() {\n  idGetter(this);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Schema;\n\n// require down here because of reference issues\n\n/**\n * The various built-in Mongoose Schema Types.\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *     const ObjectId = mongoose.Schema.Types.ObjectId;\n *\n * ####Types:\n *\n * - [String](/docs/schematypes.html#strings)\n * - [Number](/docs/schematypes.html#numbers)\n * - [Boolean](/docs/schematypes.html#booleans) | Bool\n * - [Array](/docs/schematypes.html#arrays)\n * - [Buffer](/docs/schematypes.html#buffers)\n * - [Date](/docs/schematypes.html#dates)\n * - [ObjectId](/docs/schematypes.html#objectids) | Oid\n * - [Mixed](/docs/schematypes.html#mixed)\n *\n * Using this exposed access to the `Mixed` SchemaType, we can use them in our schema.\n *\n *     const Mixed = mongoose.Schema.Types.Mixed;\n *     new mongoose.Schema({ _user: Mixed })\n *\n * @api public\n */\n\nSchema.Types = MongooseTypes = require('./schema/index');\n\n/*!\n * ignore\n */\n\nexports.ObjectId = MongooseTypes.ObjectId;\n"]},"metadata":{},"sourceType":"script"}