{"ast":null,"code":"/*!\n * Module dependencies.\n */\n'use strict';\n\nconst SchemaObjectIdOptions = require('../options/SchemaObjectIdOptions');\n\nconst SchemaType = require('../schematype');\n\nconst castObjectId = require('../cast/objectid');\n\nconst getConstructorName = require('../helpers/getConstructorName');\n\nconst oid = require('../types/objectid');\n\nconst utils = require('../utils');\n\nconst CastError = SchemaType.CastError;\nlet Document;\n/**\n * ObjectId SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction ObjectId(key, options) {\n  const isKeyHexStr = typeof key === 'string' && key.length === 24 && /^[a-f0-9]+$/i.test(key);\n  const suppressWarning = options && options.suppressWarning;\n\n  if ((isKeyHexStr || typeof key === 'undefined') && !suppressWarning) {\n    console.warn('mongoose: To create a new ObjectId please try ' + '`Mongoose.Types.ObjectId` instead of using ' + '`Mongoose.Schema.ObjectId`. Set the `suppressWarning` option if ' + 'you\\'re trying to create a hex char path in your schema.');\n    console.trace();\n  }\n\n  SchemaType.call(this, key, options, 'ObjectID');\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nObjectId.schemaName = 'ObjectId';\nObjectId.defaultOptions = {};\n/*!\n * Inherits from SchemaType.\n */\n\nObjectId.prototype = Object.create(SchemaType.prototype);\nObjectId.prototype.constructor = ObjectId;\nObjectId.prototype.OptionsConstructor = SchemaObjectIdOptions;\n/**\n * Attaches a getter for all ObjectId instances\n *\n * ####Example:\n *\n *     // Always convert to string when getting an ObjectId\n *     mongoose.ObjectId.get(v => v.toString());\n *\n *     const Model = mongoose.model('Test', new Schema({}));\n *     typeof (new Model({})._id); // 'string'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nObjectId.get = SchemaType.get;\n/**\n * Sets a default option for all ObjectId instances.\n *\n * ####Example:\n *\n *     // Make all object ids have option `required` equal to true.\n *     mongoose.Schema.ObjectId.set('required', true);\n *\n *     const Order = mongoose.model('Order', new Schema({ userId: ObjectId }));\n *     new Order({ }).validateSync().errors.userId.message; // Path `userId` is required.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nObjectId.set = SchemaType.set;\n/**\n * Adds an auto-generated ObjectId default if turnOn is true.\n * @param {Boolean} turnOn auto generated ObjectId defaults\n * @api public\n * @return {SchemaType} this\n */\n\nObjectId.prototype.auto = function (turnOn) {\n  if (turnOn) {\n    this.default(defaultId);\n    this.set(resetId);\n  }\n\n  return this;\n};\n/*!\n * ignore\n */\n\n\nObjectId._checkRequired = v => v instanceof oid;\n/*!\n * ignore\n */\n\n\nObjectId._cast = castObjectId;\n/**\n * Get/set the function used to cast arbitrary values to objectids.\n *\n * ####Example:\n *\n *     // Make Mongoose only try to cast length 24 strings. By default, any 12\n *     // char string is a valid ObjectId.\n *     const original = mongoose.ObjectId.cast();\n *     mongoose.ObjectId.cast(v => {\n *       assert.ok(typeof v !== 'string' || v.length === 24);\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.ObjectId.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nObjectId.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n\n  this._cast = caster;\n  return this._cast;\n};\n/*!\n * ignore\n */\n\n\nObjectId._defaultCaster = v => {\n  if (!(v instanceof oid)) {\n    throw new Error(v + ' is not an instance of ObjectId');\n  }\n\n  return v;\n};\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * ####Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\n\nObjectId.checkRequired = SchemaType.checkRequired;\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nObjectId.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  } // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n\n\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ? this.constructor.checkRequired() : ObjectId.checkRequired();\n\n  return _checkRequired(value);\n};\n/**\n * Casts to ObjectId\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\n\nObjectId.prototype.cast = function (value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n    if (value instanceof oid) {\n      return value;\n    } else if ((getConstructorName(value) || '').toLowerCase() === 'objectid') {\n      return new oid(value.toHexString());\n    }\n\n    return this._castRef(value, doc, init);\n  }\n\n  let castObjectId;\n\n  if (typeof this._castFunction === 'function') {\n    castObjectId = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castObjectId = this.constructor.cast();\n  } else {\n    castObjectId = ObjectId.cast();\n  }\n\n  try {\n    return castObjectId(value);\n  } catch (error) {\n    throw new CastError('ObjectId', value, this.path, error, this);\n  }\n};\n/*!\n * ignore\n */\n\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nObjectId.prototype.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n});\n/*!\n * ignore\n */\n\nfunction defaultId() {\n  return new oid();\n}\n\ndefaultId.$runBeforeSetters = true;\n\nfunction resetId(v) {\n  Document || (Document = require('./../document'));\n\n  if (this instanceof Document) {\n    if (v === void 0) {\n      const _v = new oid();\n\n      this.$__._id = _v;\n      return _v;\n    }\n\n    this.$__._id = v;\n  }\n\n  return v;\n}\n/*!\n * Module exports.\n */\n\n\nmodule.exports = ObjectId;","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/schema/objectid.js"],"names":["SchemaObjectIdOptions","require","SchemaType","castObjectId","getConstructorName","oid","utils","CastError","Document","ObjectId","key","options","isKeyHexStr","length","test","suppressWarning","console","warn","trace","call","schemaName","defaultOptions","prototype","Object","create","constructor","OptionsConstructor","get","set","auto","turnOn","default","defaultId","resetId","_checkRequired","v","_cast","cast","caster","arguments","_defaultCaster","Error","checkRequired","value","doc","_isRef","init","toLowerCase","toHexString","_castRef","_castFunction","error","path","handleSingle","val","$conditionalHandlers","$gt","$gte","$lt","$lte","$runBeforeSetters","_v","$__","_id","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst SchemaObjectIdOptions = require('../options/SchemaObjectIdOptions');\nconst SchemaType = require('../schematype');\nconst castObjectId = require('../cast/objectid');\nconst getConstructorName = require('../helpers/getConstructorName');\nconst oid = require('../types/objectid');\nconst utils = require('../utils');\n\nconst CastError = SchemaType.CastError;\nlet Document;\n\n/**\n * ObjectId SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction ObjectId(key, options) {\n  const isKeyHexStr = typeof key === 'string' && key.length === 24 && /^[a-f0-9]+$/i.test(key);\n  const suppressWarning = options && options.suppressWarning;\n  if ((isKeyHexStr || typeof key === 'undefined') && !suppressWarning) {\n    console.warn('mongoose: To create a new ObjectId please try ' +\n      '`Mongoose.Types.ObjectId` instead of using ' +\n      '`Mongoose.Schema.ObjectId`. Set the `suppressWarning` option if ' +\n      'you\\'re trying to create a hex char path in your schema.');\n    console.trace();\n  }\n  SchemaType.call(this, key, options, 'ObjectID');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nObjectId.schemaName = 'ObjectId';\n\nObjectId.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nObjectId.prototype = Object.create(SchemaType.prototype);\nObjectId.prototype.constructor = ObjectId;\nObjectId.prototype.OptionsConstructor = SchemaObjectIdOptions;\n\n/**\n * Attaches a getter for all ObjectId instances\n *\n * ####Example:\n *\n *     // Always convert to string when getting an ObjectId\n *     mongoose.ObjectId.get(v => v.toString());\n *\n *     const Model = mongoose.model('Test', new Schema({}));\n *     typeof (new Model({})._id); // 'string'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nObjectId.get = SchemaType.get;\n\n/**\n * Sets a default option for all ObjectId instances.\n *\n * ####Example:\n *\n *     // Make all object ids have option `required` equal to true.\n *     mongoose.Schema.ObjectId.set('required', true);\n *\n *     const Order = mongoose.model('Order', new Schema({ userId: ObjectId }));\n *     new Order({ }).validateSync().errors.userId.message; // Path `userId` is required.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nObjectId.set = SchemaType.set;\n\n/**\n * Adds an auto-generated ObjectId default if turnOn is true.\n * @param {Boolean} turnOn auto generated ObjectId defaults\n * @api public\n * @return {SchemaType} this\n */\n\nObjectId.prototype.auto = function(turnOn) {\n  if (turnOn) {\n    this.default(defaultId);\n    this.set(resetId);\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nObjectId._checkRequired = v => v instanceof oid;\n\n/*!\n * ignore\n */\n\nObjectId._cast = castObjectId;\n\n/**\n * Get/set the function used to cast arbitrary values to objectids.\n *\n * ####Example:\n *\n *     // Make Mongoose only try to cast length 24 strings. By default, any 12\n *     // char string is a valid ObjectId.\n *     const original = mongoose.ObjectId.cast();\n *     mongoose.ObjectId.cast(v => {\n *       assert.ok(typeof v !== 'string' || v.length === 24);\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.ObjectId.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nObjectId.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nObjectId._defaultCaster = v => {\n  if (!(v instanceof oid)) {\n    throw new Error(v + ' is not an instance of ObjectId');\n  }\n  return v;\n};\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * ####Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nObjectId.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nObjectId.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ?\n    this.constructor.checkRequired() :\n    ObjectId.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Casts to ObjectId\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nObjectId.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n    if (value instanceof oid) {\n      return value;\n    } else if ((getConstructorName(value) || '').toLowerCase() === 'objectid') {\n      return new oid(value.toHexString());\n    }\n\n    return this._castRef(value, doc, init);\n  }\n\n  let castObjectId;\n  if (typeof this._castFunction === 'function') {\n    castObjectId = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castObjectId = this.constructor.cast();\n  } else {\n    castObjectId = ObjectId.cast();\n  }\n\n  try {\n    return castObjectId(value);\n  } catch (error) {\n    throw new CastError('ObjectId', value, this.path, error, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nObjectId.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle\n    });\n\n/*!\n * ignore\n */\n\nfunction defaultId() {\n  return new oid();\n}\n\ndefaultId.$runBeforeSetters = true;\n\nfunction resetId(v) {\n  Document || (Document = require('./../document'));\n\n  if (this instanceof Document) {\n    if (v === void 0) {\n      const _v = new oid;\n      this.$__._id = _v;\n      return _v;\n    }\n\n    this.$__._id = v;\n  }\n\n  return v;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = ObjectId;\n"]},"metadata":{},"sourceType":"script"}