{"ast":null,"code":"var _jsxFileName = \"/home/gregorian/calendar-ui/ui/src/useGapi/useGapi.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { add } from \"date-fns\";\nimport { CLIENT_ID, API_KEY } from \"./constants\";\nimport gapiEventType from './eventType';\nimport { reshape } from './reshape';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function initClient(updateSigninStatus) {\n  /*var CLIENT_ID = '960665164291-hsqm8gr0imejuo32saj23bh50gr2i2u1.apps.googleusercontent.com';\n  var API_KEY = process.env.API_KEY*/\n  // Array of API discovery doc URLs for APIs used by the quickstart\n  var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"]; // Authorization scopes required by the API; multiple scopes can be\n  // included, separated by spaces.\n\n  var SCOPES = \"https://www.googleapis.com/auth/calendar.readonly\";\n  await window.gapi.client.init({\n    apiKey: API_KEY,\n    clientId: CLIENT_ID,\n    discoveryDocs: DISCOVERY_DOCS,\n    scope: SCOPES\n  });\n  let listner = window.gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n  updateSigninStatus(window.gapi.auth2.getAuthInstance().isSignedIn.get());\n\n  const cleanUpListner = () => {\n    listner.remove();\n  };\n\n  return cleanUpListner;\n}\n\nfunction load() {\n  return new Promise((resolve, reject) => {\n    window.gapi.load('client:auth2', {\n      callback: function () {\n        resolve();\n      },\n      onerror: function () {\n        reject();\n      }\n    });\n  });\n}\n\nexport async function setUpGapi(updateSigninStatus) {\n  /*if (!window.gapi) {\n      throw new Error('gapi needs to be loaded on script tag from: https://apis.google.com/js/api.js')\n  }*/\n  await load();\n  await initClient(updateSigninStatus);\n\n  if (!window.gapi.auth2.getAuthInstance().isSignedIn.get()) {\n    window.gapi.auth2.getAuthInstance().signIn();\n  }\n}\nexport function useGapi() {\n  _s();\n\n  const [authed, setAuthed] = React.useState(false);\n\n  function updateSigninStatus(isSignedIn) {\n    setAuthed(isSignedIn);\n  }\n\n  const signOut = React.useCallback(() => {\n    window.gapi.auth2.getAuthInstance().signOut();\n  }, []);\n\n  const listEvents = (from, to) => {\n    return window.gapi.client.calendar.events.list({\n      'calendarId': 'primary',\n      'timeMin': from.toISOString(),\n      'timeMax': to.toISOString(),\n      'showDeleted': false,\n      'singleEvents': true,\n      'orderBy': 'startTime'\n    }).then(function (response) {\n      const events = response.result.items;\n      return events.filter(event => gapiEventType.isTimeSpecified(event) && !gapiEventType.isMultiDayTimeSpecified(event)).map(event => reshape(event));\n    });\n  };\n\n  React.useEffect(() => {\n    let cleanUpFunction;\n\n    (async () => {\n      cleanUpFunction = await setUpGapi(updateSigninStatus);\n    })();\n\n    return cleanUpFunction;\n  }, []);\n  return {\n    authed,\n    listEvents,\n    signOut\n  };\n} //a component to test gapi\n\n_s(useGapi, \"FuQAk1Vgon0euxaF2YDI6SkMgM8=\");\n\nexport function EventsList() {\n  _s2();\n\n  const {\n    authed,\n    listEvents,\n    signOut\n  } = useGapi();\n  const [events, setEvents] = React.useState([]);\n  React.useEffect(() => {\n    const dateFrom = add(new Date(), {\n      months: -2\n    });\n    const dateTo = add(dateFrom, {\n      days: 7\n    });\n\n    if (authed) {\n      listEvents(dateFrom, dateTo).then(setEvents);\n    }\n  }, [authed, listEvents]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"hello \", String(authed)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: signOut,\n      children: \"sign me out\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: events.map(event => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: event.summary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(EventsList, \"5cnymfEnyL3wRyg2e/jyGgWcPQY=\", false, function () {\n  return [useGapi];\n});\n\n_c = EventsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventsList\");","map":{"version":3,"sources":["/home/gregorian/calendar-ui/ui/src/useGapi/useGapi.js"],"names":["React","add","CLIENT_ID","API_KEY","gapiEventType","reshape","initClient","updateSigninStatus","DISCOVERY_DOCS","SCOPES","window","gapi","client","init","apiKey","clientId","discoveryDocs","scope","listner","auth2","getAuthInstance","isSignedIn","listen","get","cleanUpListner","remove","load","Promise","resolve","reject","callback","onerror","setUpGapi","signIn","useGapi","authed","setAuthed","useState","signOut","useCallback","listEvents","from","to","calendar","events","list","toISOString","then","response","result","items","filter","event","isTimeSpecified","isMultiDayTimeSpecified","map","useEffect","cleanUpFunction","EventsList","setEvents","dateFrom","Date","months","dateTo","days","String","summary"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {add} from \"date-fns\";\nimport {CLIENT_ID,API_KEY} from \"./constants\";\n\nimport gapiEventType from './eventType'\n\nimport {reshape} from './reshape'\n\nasync function initClient(updateSigninStatus) {\n    /*var CLIENT_ID = '960665164291-hsqm8gr0imejuo32saj23bh50gr2i2u1.apps.googleusercontent.com';\n    var API_KEY = process.env.API_KEY*/\n    // Array of API discovery doc URLs for APIs used by the quickstart\n    var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n    // Authorization scopes required by the API; multiple scopes can be\n    // included, separated by spaces.\n    var SCOPES = \"https://www.googleapis.com/auth/calendar.readonly\";\n    await window.gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES\n    })\n\n\n    let listner = window.gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n\n    updateSigninStatus(window.gapi.auth2.getAuthInstance().isSignedIn.get());\n\n    const cleanUpListner = () => {\n        listner.remove()\n    }\n\n    return cleanUpListner\n\n\n}\n\nfunction load() {\n    return new Promise(((resolve, reject) => {\n        window.gapi.load('client:auth2',\n            {\n                callback: function () {\n                    resolve()\n                },\n                onerror: function () {\n                    reject()\n                }\n            },\n        )\n    }))\n}\n\nexport async function setUpGapi(updateSigninStatus) {\n    /*if (!window.gapi) {\n        throw new Error('gapi needs to be loaded on script tag from: https://apis.google.com/js/api.js')\n    }*/\n    await load()\n    await initClient(updateSigninStatus)\n    if (!window.gapi.auth2.getAuthInstance().isSignedIn.get()) {\n        window.gapi.auth2.getAuthInstance().signIn();\n    }\n}\n\nexport function useGapi() {\n    const [authed, setAuthed] = React.useState(false)\n\n    function updateSigninStatus(isSignedIn) {\n        setAuthed(isSignedIn)\n    }\n\n    const signOut = React.useCallback(() => {\n        window.gapi.auth2.getAuthInstance().signOut()\n    }, [])\n\n    const listEvents = (from, to) => {\n        return window.gapi.client.calendar.events.list({\n            'calendarId': 'primary',\n            'timeMin': from.toISOString(),\n            'timeMax': to.toISOString(),\n            'showDeleted': false,\n            'singleEvents': true,\n            'orderBy': 'startTime'\n        }).then(function (response) {\n            const events = response.result.items;\n            return events.filter(\n                event=>gapiEventType.isTimeSpecified(event) && !gapiEventType.isMultiDayTimeSpecified(event)\n                )\n                .map(event=>reshape(event))\n        })\n    }\n\n    React.useEffect(() => {\n\n        let cleanUpFunction\n\n\n        (async ()=> {\n            cleanUpFunction = await setUpGapi(updateSigninStatus)\n        })()\n\n        return cleanUpFunction\n    }, [])\n    return {authed, listEvents, signOut}\n}\n\n//a component to test gapi\nexport function EventsList() {\n    const {authed, listEvents, signOut} = useGapi()\n\n    const [events, setEvents] = React.useState([])\n\n    React.useEffect(() => {\n        const dateFrom = add(new Date(), {months: -2})\n        const dateTo = add(dateFrom, {days: 7})\n\n        if (authed) {\n            listEvents(dateFrom, dateTo)\n                .then(setEvents)\n        }\n\n    }, [authed,listEvents])\n\n    return (\n        <div className=\"App\">\n            <p>\n                hello {String(authed)}\n            </p>\n            <button onClick={signOut}>\n                sign me out\n            </button>\n            <div>\n                {events.map(event => (\n                    <p>{event.summary}</p>\n                ))}\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}