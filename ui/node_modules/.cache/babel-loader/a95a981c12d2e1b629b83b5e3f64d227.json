{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\n/*!\n * Given a value, cast it to a number, or throw a `CastError` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @param {String} [path] optional the path to set on the CastError\n * @return {Boolean|null|undefined}\n * @throws {Error} if `value` is not one of the allowed values\n * @api private\n */\n\n\nmodule.exports = function castNumber(val) {\n  if (val == null) {\n    return val;\n  }\n\n  if (val === '') {\n    return null;\n  }\n\n  if (typeof val === 'string' || typeof val === 'boolean') {\n    val = Number(val);\n  }\n\n  assert.ok(!isNaN(val));\n\n  if (val instanceof Number) {\n    return val.valueOf();\n  }\n\n  if (typeof val === 'number') {\n    return val;\n  }\n\n  if (!Array.isArray(val) && typeof val.valueOf === 'function') {\n    return Number(val.valueOf());\n  }\n\n  if (val.toString && !Array.isArray(val) && val.toString() == Number(val)) {\n    return Number(val);\n  }\n\n  assert.ok(false);\n};","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/cast/number.js"],"names":["assert","require","module","exports","castNumber","val","Number","ok","isNaN","valueOf","Array","isArray","toString"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,GAApB,EAAyB;AACxC,MAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,WAAOA,GAAP;AACD;;AACD,MAAIA,GAAG,KAAK,EAAZ,EAAgB;AACd,WAAO,IAAP;AACD;;AAED,MAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,SAA9C,EAAyD;AACvDA,IAAAA,GAAG,GAAGC,MAAM,CAACD,GAAD,CAAZ;AACD;;AAEDL,EAAAA,MAAM,CAACO,EAAP,CAAU,CAACC,KAAK,CAACH,GAAD,CAAhB;;AACA,MAAIA,GAAG,YAAYC,MAAnB,EAA2B;AACzB,WAAOD,GAAG,CAACI,OAAJ,EAAP;AACD;;AACD,MAAI,OAAOJ,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAOA,GAAP;AACD;;AACD,MAAI,CAACK,KAAK,CAACC,OAAN,CAAcN,GAAd,CAAD,IAAuB,OAAOA,GAAG,CAACI,OAAX,KAAuB,UAAlD,EAA8D;AAC5D,WAAOH,MAAM,CAACD,GAAG,CAACI,OAAJ,EAAD,CAAb;AACD;;AACD,MAAIJ,GAAG,CAACO,QAAJ,IAAgB,CAACF,KAAK,CAACC,OAAN,CAAcN,GAAd,CAAjB,IAAuCA,GAAG,CAACO,QAAJ,MAAkBN,MAAM,CAACD,GAAD,CAAnE,EAA0E;AACxE,WAAOC,MAAM,CAACD,GAAD,CAAb;AACD;;AAEDL,EAAAA,MAAM,CAACO,EAAP,CAAU,KAAV;AACD,CA3BD","sourcesContent":["'use strict';\n\nconst assert = require('assert');\n\n/*!\n * Given a value, cast it to a number, or throw a `CastError` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @param {String} [path] optional the path to set on the CastError\n * @return {Boolean|null|undefined}\n * @throws {Error} if `value` is not one of the allowed values\n * @api private\n */\n\nmodule.exports = function castNumber(val) {\n  if (val == null) {\n    return val;\n  }\n  if (val === '') {\n    return null;\n  }\n\n  if (typeof val === 'string' || typeof val === 'boolean') {\n    val = Number(val);\n  }\n\n  assert.ok(!isNaN(val));\n  if (val instanceof Number) {\n    return val.valueOf();\n  }\n  if (typeof val === 'number') {\n    return val;\n  }\n  if (!Array.isArray(val) && typeof val.valueOf === 'function') {\n    return Number(val.valueOf());\n  }\n  if (val.toString && !Array.isArray(val) && val.toString() == Number(val)) {\n    return Number(val);\n  }\n\n  assert.ok(false);\n};\n"]},"metadata":{},"sourceType":"script"}