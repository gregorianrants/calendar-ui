{"ast":null,"code":"'use strict';\n\nconst CastError = require('../error/cast');\n/*!\n * Given a value, cast it to a string, or throw a `CastError` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @param {String} [path] optional the path to set on the CastError\n * @return {string|null|undefined}\n * @throws {CastError}\n * @api private\n */\n\n\nmodule.exports = function castString(value, path) {\n  // If null or undefined\n  if (value == null) {\n    return value;\n  } // handle documents being passed\n\n\n  if (value._id && typeof value._id === 'string') {\n    return value._id;\n  } // Re: gh-647 and gh-3030, we're ok with casting using `toString()`\n  // **unless** its the default Object.toString, because \"[object Object]\"\n  // doesn't really qualify as useful data\n\n\n  if (value.toString && value.toString !== Object.prototype.toString && !Array.isArray(value)) {\n    return value.toString();\n  }\n\n  throw new CastError('string', value, path);\n};","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/cast/string.js"],"names":["CastError","require","module","exports","castString","value","path","_id","toString","Object","prototype","Array","isArray"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,IAA3B,EAAiC;AAChD;AACA,MAAID,KAAK,IAAI,IAAb,EAAmB;AACjB,WAAOA,KAAP;AACD,GAJ+C,CAMhD;;;AACA,MAAIA,KAAK,CAACE,GAAN,IAAa,OAAOF,KAAK,CAACE,GAAb,KAAqB,QAAtC,EAAgD;AAC9C,WAAOF,KAAK,CAACE,GAAb;AACD,GAT+C,CAWhD;AACA;AACA;;;AACA,MAAIF,KAAK,CAACG,QAAN,IACAH,KAAK,CAACG,QAAN,KAAmBC,MAAM,CAACC,SAAP,CAAiBF,QADpC,IAEA,CAACG,KAAK,CAACC,OAAN,CAAcP,KAAd,CAFL,EAE2B;AACzB,WAAOA,KAAK,CAACG,QAAN,EAAP;AACD;;AAED,QAAM,IAAIR,SAAJ,CAAc,QAAd,EAAwBK,KAAxB,EAA+BC,IAA/B,CAAN;AACD,CArBD","sourcesContent":["'use strict';\n\nconst CastError = require('../error/cast');\n\n/*!\n * Given a value, cast it to a string, or throw a `CastError` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @param {String} [path] optional the path to set on the CastError\n * @return {string|null|undefined}\n * @throws {CastError}\n * @api private\n */\n\nmodule.exports = function castString(value, path) {\n  // If null or undefined\n  if (value == null) {\n    return value;\n  }\n\n  // handle documents being passed\n  if (value._id && typeof value._id === 'string') {\n    return value._id;\n  }\n\n  // Re: gh-647 and gh-3030, we're ok with casting using `toString()`\n  // **unless** its the default Object.toString, because \"[object Object]\"\n  // doesn't really qualify as useful data\n  if (value.toString &&\n      value.toString !== Object.prototype.toString &&\n      !Array.isArray(value)) {\n    return value.toString();\n  }\n\n  throw new CastError('string', value, path);\n};\n"]},"metadata":{},"sourceType":"script"}