{"ast":null,"code":"const mongoose = require(\"mongoose\");\n\nconst cuid = require(\"cuid\");\n/*const addGcalEvent = require('./../googleCalendar')*/\n\n\nconst validator = require(\"validator\"); //todo can we inmport only a subset\n\n\nconst setHours = require(\"date-fns/setHours\");\n\nconst addressObj = {\n  _id: {\n    type: String,\n    default: cuid\n  },\n  value: {\n    validate: {\n      validator: v => {\n        return v.length > 4;\n      },\n      message: `name must have more than 4 characters`\n    },\n    type: String\n  }\n};\nconst addressSchema = mongoose.Schema(addressObj);\nconst operativeObj = {\n  _id: {\n    type: String,\n    default: cuid\n  },\n  value: {\n    validate: {\n      validator: v => {\n        return v.length > 3;\n      },\n      message: `operative must have more than 3 characters`\n    },\n    type: String\n  }\n};\nconst operativeSchema = mongoose.Schema(operativeObj);\nconst chargesObj = {\n  hourlyRate: {\n    type: Number\n  },\n  fuelCharge: {\n    type: Number\n  },\n  travelTime: {\n    type: Number\n  }\n};\nconst chargesSchema = mongoose.Schema(chargesObj);\nconst customerObj = {\n  name: {\n    type: String,\n    required: true,\n    validate: [{\n      validator: v => {\n        return v.length > 4;\n      },\n      message: `name must have more than 4 characters`\n    }]\n  },\n  mobile: {\n    type: String,\n    validate: {\n      validator: validator.isMobilePhone,\n      //TODO restrict this to uk and have anohter field for other phone numbers.\n      message: `name must have more than 4 characters`\n    }\n  },\n  email: {\n    type: String,\n    validate: {\n      validator: validator.isEmail,\n      message: \"must be a valid email\"\n    }\n  }\n};\nconst customerSchema = mongoose.Schema(customerObj);\nconst jobSchema = new mongoose.Schema({\n  _id: {\n    type: String,\n    default: cuid\n  },\n  start: {\n    type: Date,\n    required: true\n  },\n  end: {\n    type: Date,\n    required: true\n  },\n  customer: customerSchema,\n  charges: chargesSchema,\n  operatives: [operativeSchema],\n  items: String,\n  addresses: [addressSchema],\n  markCompleted: Boolean\n});\n\nfunction validateAsCompleted(doc) {\n  if (doc.markCompleted) {}\n}\n\njobSchema.post(\"save\", () => {\n  console.log(this);\n});\nlet Job = mongoose.model(\"Job\", jobSchema, \"jobs\");\n\nasync function list({\n  from,\n  to\n}) {\n  let data = await Job.find({\n    start: {\n      $gte: from\n    },\n    end: {\n      $lte: to\n    }\n  });\n  return data;\n}\n\nasync function create(data) {\n  let job = new Job(data);\n  await job.save(); //TODO add some validation start must be before end\n\n  return job;\n}\n\nasync function get(id) {\n  const job = await Job.findById(id);\n  return job;\n}\n\nasync function remove(id) {\n  let data = await Job.deleteOne({\n    _id: id\n  });\n  return data;\n}\n\nasync function edit(_id, change) {// const product = await get(_id);\n  // Object.keys(change).forEach(function (key) {\n  //   product[key] = change[key];\n  // });\n  // await product.save();\n  // return product;\n}\n\nasync function resetData(data) {\n  await Job.deleteMany();\n  console.log(data);\n  await Job.insertMany(data);\n}\n\nmodule.exports = {\n  list,\n  create,\n  get,\n  remove,\n  resetData,\n  edit,\n  jobSchema\n};\nexports.Job = Job;","map":{"version":3,"sources":["/home/gregorian/calendar-ui/api/model/job.js"],"names":["mongoose","require","cuid","validator","setHours","addressObj","_id","type","String","default","value","validate","v","length","message","addressSchema","Schema","operativeObj","operativeSchema","chargesObj","hourlyRate","Number","fuelCharge","travelTime","chargesSchema","customerObj","name","required","mobile","isMobilePhone","email","isEmail","customerSchema","jobSchema","start","Date","end","customer","charges","operatives","items","addresses","markCompleted","Boolean","validateAsCompleted","doc","post","console","log","Job","model","list","from","to","data","find","$gte","$lte","create","job","save","get","id","findById","remove","deleteOne","edit","change","resetData","deleteMany","insertMany","module","exports"],"mappings":"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","sourcesContent":["const mongoose = require(\"mongoose\");\nconst cuid = require(\"cuid\");\n/*const addGcalEvent = require('./../googleCalendar')*/\nconst validator = require(\"validator\"); //todo can we inmport only a subset\n\nconst setHours = require(\"date-fns/setHours\");\n\nconst addressObj = {\n  _id: {\n    type: String,\n    default: cuid,\n  },\n  value: {\n    validate: {\n      validator: (v) => {\n        return v.length > 4;\n      },\n      message: `name must have more than 4 characters`,\n    },\n    type: String,\n  },\n};\n\nconst addressSchema = mongoose.Schema(addressObj);\n\nconst operativeObj = {\n  _id: {\n    type: String,\n    default: cuid,\n  },\n  value: {\n    validate: {\n      validator: (v) => {\n        return v.length > 3;\n      },\n      message: `operative must have more than 3 characters`,\n    },\n    type: String,\n  },\n};\n\nconst operativeSchema = mongoose.Schema(operativeObj);\n\nconst chargesObj = {\n  hourlyRate: { type: Number },\n  fuelCharge: { type: Number },\n  travelTime: { type: Number },\n};\n\nconst chargesSchema = mongoose.Schema(chargesObj);\n\nconst customerObj = {\n  name: {\n    type: String,\n    required: true,\n    validate: [\n      {\n        validator: (v) => {\n          return v.length > 4;\n        },\n        message: `name must have more than 4 characters`,\n      },\n    ],\n  },\n  mobile: {\n    type: String,\n    validate: {\n      validator: validator.isMobilePhone, //TODO restrict this to uk and have anohter field for other phone numbers.\n      message: `name must have more than 4 characters`,\n    },\n  },\n  email: {\n    type: String,\n    validate: {\n      validator: validator.isEmail,\n      message: \"must be a valid email\",\n    },\n  },\n};\n\nconst customerSchema = mongoose.Schema(customerObj);\n\nconst jobSchema = new mongoose.Schema({\n  _id: {\n    type: String,\n    default: cuid,\n  },\n  start: {\n    type: Date,\n    required: true,\n  },\n  end: {\n    type: Date,\n    required: true,\n  },\n  customer: customerSchema,\n  charges: chargesSchema,\n  operatives: [operativeSchema],\n  items: String,\n  addresses: [addressSchema],\n  markCompleted: Boolean\n});\n\nfunction validateAsCompleted(doc){\n  if (doc.markCompleted){\n\n  }\n}\n\njobSchema.post(\"save\", () => {\n  console.log(this);\n});\n\nlet Job = mongoose.model(\"Job\", jobSchema, \"jobs\");\n\nasync function list({ from, to }) {\n  let data = await Job.find({\n    start: { $gte: from },\n    end: { $lte: to },\n  });\n  return data;\n}\n\nasync function create(data) {\n  let job = new Job(data);\n  await job.save(); //TODO add some validation start must be before end\n  return job;\n}\n\nasync function get(id) {\n  const job = await Job.findById(id);\n  return job;\n}\n\nasync function remove(id) {\n  let data = await Job.deleteOne({ _id: id });\n  return data;\n}\n\nasync function edit(_id, change) {\n  // const product = await get(_id);\n  // Object.keys(change).forEach(function (key) {\n  //   product[key] = change[key];\n  // });\n  // await product.save();\n  // return product;\n}\n\nasync function resetData(data) {\n  await Job.deleteMany();\n  console.log(data);\n  await Job.insertMany(data);\n}\n\nmodule.exports = {\n  list,\n  create,\n  get,\n  remove,\n  resetData,\n  edit,\n  jobSchema,\n};\n\nexports.Job = Job;\n"]},"metadata":{},"sourceType":"script"}