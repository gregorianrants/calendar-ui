{"ast":null,"code":"import groupEvents from './groupEvents';\nimport { asDecimal } from '../utilities/timeConversions.js';\nexport function configure(height, border) {\n  const position = ((height, border) => {\n    const hours = time => Math.floor(time);\n\n    const minutes = time => time - hours(time);\n\n    return time => {\n      time = asDecimal(time); //TODO modifying state here, please refactor.\n\n      return hours(time) * height + (hours(time) + 1) * border + height * minutes(time); //TODO need to make this more declaritive\n    };\n  })(height, border);\n\n  const widthOfCol = cols => 100 / cols.length;\n\n  const left = (colIndex, cols) => colIndex * widthOfCol(cols);\n\n  function eventGeometry(event, colIndex, cols) {\n    const {\n      start,\n      end\n    } = event;\n    return { ...event,\n      top: position(start),\n      bottom: height * 24 - position(end),\n      left: String(left(colIndex, cols)) + '%',\n      right: String(100 - (left(colIndex, cols) + widthOfCol(cols))) + '%'\n    };\n  }\n\n  function flatDeep(arr, d = 1) {\n    return d > 0 ? arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flatDeep(val, d - 1) : val), []) : arr.slice();\n  }\n\n  ;\n  return function eventsGeometry(events) {\n    let result = groupEvents(events).map(overlappingGroup => overlappingGroup.map((col, colIndex) => {\n      return col.map((event, eventIndex) => eventGeometry(event, colIndex, overlappingGroup, height, border));\n    }));\n    return flatDeep(result, Infinity);\n  };\n}","map":{"version":3,"sources":["/home/gregorian/calendar-ui/ui/src/eventGeometry/eventGeometry.js"],"names":["groupEvents","asDecimal","configure","height","border","position","hours","time","Math","floor","minutes","widthOfCol","cols","length","left","colIndex","eventGeometry","event","start","end","top","bottom","String","right","flatDeep","arr","d","reduce","acc","val","concat","Array","isArray","slice","eventsGeometry","events","result","map","overlappingGroup","col","eventIndex","Infinity"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,SAAQC,SAAR,QAAwB,iCAAxB;AAEA,OAAO,SAASC,SAAT,CAAmBC,MAAnB,EAA0BC,MAA1B,EAAiC;AACpC,QAAMC,QAAQ,GAAG,CACb,CAACF,MAAD,EAASC,MAAT,KAAoB;AACpB,UAAME,KAAK,GAAIC,IAAD,IAAUC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAxB;;AACA,UAAMG,OAAO,GAAIH,IAAD,IAAUA,IAAI,GAAGD,KAAK,CAACC,IAAD,CAAtC;;AAEA,WAAQA,IAAD,IAAU;AACbA,MAAAA,IAAI,GAAGN,SAAS,CAACM,IAAD,CAAhB,CADa,CACW;;AAExB,aAAOD,KAAK,CAACC,IAAD,CAAL,GAAcJ,MAAd,GAAuB,CAACG,KAAK,CAACC,IAAD,CAAL,GAAc,CAAf,IAAoBH,MAA3C,GAAoDD,MAAM,GAAGO,OAAO,CAACH,IAAD,CAA3E,CAHa,CAGoE;AACpF,KAJD;AAKH,GAVgB,EAUdJ,MAVc,EAUPC,MAVO,CAAjB;;AAYA,QAAMO,UAAU,GAAIC,IAAD,IAAU,MAAMA,IAAI,CAACC,MAAxC;;AAEA,QAAMC,IAAI,GAAG,CAACC,QAAD,EAAWH,IAAX,KAAoBG,QAAQ,GAAGJ,UAAU,CAACC,IAAD,CAAtD;;AAKA,WAASI,aAAT,CAAuBC,KAAvB,EAA6BF,QAA7B,EAAsCH,IAAtC,EAA4C;AACxC,UAAM;AAACM,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAeF,KAArB;AACA,WAAO,EACH,GAAGA,KADA;AAEHG,MAAAA,GAAG,EAAEf,QAAQ,CAACa,KAAD,CAFV;AAGHG,MAAAA,MAAM,EAAGlB,MAAM,GAAC,EAAR,GAAcE,QAAQ,CAACc,GAAD,CAH3B;AAIHL,MAAAA,IAAI,EAAEQ,MAAM,CAACR,IAAI,CAACC,QAAD,EAAUH,IAAV,CAAL,CAAN,GAA8B,GAJjC;AAKHW,MAAAA,KAAK,EAAED,MAAM,CAAC,OAAOR,IAAI,CAACC,QAAD,EAAUH,IAAV,CAAJ,GAAsBD,UAAU,CAACC,IAAD,CAAvC,CAAD,CAAN,GAAyD;AAL7D,KAAP;AAOH;;AAED,WAASY,QAAT,CAAkBC,GAAlB,EAAuBC,CAAC,GAAG,CAA3B,EAA8B;AAC1B,WAAOA,CAAC,GAAG,CAAJ,GAAQD,GAAG,CAACE,MAAJ,CAAW,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,CAACE,MAAJ,CAAWC,KAAK,CAACC,OAAN,CAAcH,GAAd,IAAqBL,QAAQ,CAACK,GAAD,EAAMH,CAAC,GAAG,CAAV,CAA7B,GAA4CG,GAAvD,CAAzB,EAAsF,EAAtF,CAAR,GACDJ,GAAG,CAACQ,KAAJ,EADN;AAEH;;AAAA;AAID,SAAO,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;AAKnC,QAAIC,MAAM,GAAIpC,WAAW,CAACmC,MAAD,CAAX,CAAoBE,GAApB,CACVC,gBAAgB,IAAIA,gBAAgB,CAC/BD,GADe,CACX,CAACE,GAAD,EAAMxB,QAAN,KAAmB;AACpB,aAAOwB,GAAG,CAACF,GAAJ,CAAQ,CAACpB,KAAD,EAAQuB,UAAR,KACXxB,aAAa,CAACC,KAAD,EAAOF,QAAP,EAAgBuB,gBAAhB,EAAiCnC,MAAjC,EAAwCC,MAAxC,CADV,CAAP;AAGH,KALe,CADV,CAAd;AAQA,WAAOoB,QAAQ,CAACY,MAAD,EAAQK,QAAR,CAAf;AACH,GAdD;AAeH","sourcesContent":["import groupEvents from './groupEvents'\nimport {asDecimal} from '../utilities/timeConversions.js'\n\nexport function configure(height,border){\n    const position = (\n        (height, border) => {\n        const hours = (time) => Math.floor(time)\n        const minutes = (time) => time - hours(time)\n\n        return (time) => {\n            time = asDecimal(time)  //TODO modifying state here, please refactor.\n\n            return hours(time) * height + (hours(time) + 1) * border + height * minutes(time)//TODO need to make this more declaritive\n        }\n    })(height,border)\n\n    const widthOfCol = (cols) => 100 / cols.length\n\n    const left = (colIndex, cols) => colIndex * widthOfCol(cols)\n\n\n\n\n    function eventGeometry(event,colIndex,cols) {\n        const {start, end} = event\n        return {\n            ...event,\n            top: position(start),\n            bottom: (height*24) - position(end),\n            left: String(left(colIndex,cols)) + '%',\n            right: String(100 - (left(colIndex,cols) + widthOfCol(cols))) + '%'\n        }\n    }\n\n    function flatDeep(arr, d = 1) {\n        return d > 0 ? arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flatDeep(val, d - 1) : val), [])\n            : arr.slice();\n    };\n\n\n\n    return function eventsGeometry(events) {\n\n\n\n\n        let result =  groupEvents(events).map(\n            overlappingGroup => overlappingGroup\n                .map((col, colIndex) => {\n                    return col.map((event, eventIndex) => (\n                        eventGeometry(event,colIndex,overlappingGroup,height,border)\n                    ))\n                })\n        )\n        return flatDeep(result,Infinity)\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}