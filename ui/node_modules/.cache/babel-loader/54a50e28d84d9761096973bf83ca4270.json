{"ast":null,"code":"const toString = Object.prototype.toString;\n\nfunction isRegExp(o) {\n  return 'object' == typeof o && '[object RegExp]' == toString.call(o);\n}\n\nmodule.exports = exports = function (regexp) {\n  if (!isRegExp(regexp)) {\n    throw new TypeError('Not a RegExp');\n  }\n\n  const flags = [];\n  if (regexp.global) flags.push('g');\n  if (regexp.multiline) flags.push('m');\n  if (regexp.ignoreCase) flags.push('i');\n  if (regexp.dotAll) flags.push('s');\n  if (regexp.unicode) flags.push('u');\n  if (regexp.sticky) flags.push('y');\n  const result = new RegExp(regexp.source, flags.join(''));\n\n  if (typeof regexp.lastIndex === 'number') {\n    result.lastIndex = regexp.lastIndex;\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/regexp-clone/index.js"],"names":["toString","Object","prototype","isRegExp","o","call","module","exports","regexp","TypeError","flags","global","push","multiline","ignoreCase","dotAll","unicode","sticky","result","RegExp","source","join","lastIndex"],"mappings":"AACA,MAAMA,QAAQ,GAAGC,MAAM,CAACC,SAAP,CAAiBF,QAAlC;;AAEA,SAASG,QAAT,CAAmBC,CAAnB,EAAsB;AACpB,SAAO,YAAY,OAAOA,CAAnB,IACA,qBAAqBJ,QAAQ,CAACK,IAAT,CAAcD,CAAd,CAD5B;AAED;;AAEDE,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAG,UAAUC,MAAV,EAAkB;AAC3C,MAAI,CAACL,QAAQ,CAACK,MAAD,CAAb,EAAuB;AACrB,UAAM,IAAIC,SAAJ,CAAc,cAAd,CAAN;AACD;;AAED,QAAMC,KAAK,GAAG,EAAd;AACA,MAAIF,MAAM,CAACG,MAAX,EAAmBD,KAAK,CAACE,IAAN,CAAW,GAAX;AACnB,MAAIJ,MAAM,CAACK,SAAX,EAAsBH,KAAK,CAACE,IAAN,CAAW,GAAX;AACtB,MAAIJ,MAAM,CAACM,UAAX,EAAuBJ,KAAK,CAACE,IAAN,CAAW,GAAX;AACvB,MAAIJ,MAAM,CAACO,MAAX,EAAmBL,KAAK,CAACE,IAAN,CAAW,GAAX;AACnB,MAAIJ,MAAM,CAACQ,OAAX,EAAoBN,KAAK,CAACE,IAAN,CAAW,GAAX;AACpB,MAAIJ,MAAM,CAACS,MAAX,EAAmBP,KAAK,CAACE,IAAN,CAAW,GAAX;AACnB,QAAMM,MAAM,GAAG,IAAIC,MAAJ,CAAWX,MAAM,CAACY,MAAlB,EAA0BV,KAAK,CAACW,IAAN,CAAW,EAAX,CAA1B,CAAf;;AACA,MAAI,OAAOb,MAAM,CAACc,SAAd,KAA4B,QAAhC,EAA0C;AACxCJ,IAAAA,MAAM,CAACI,SAAP,GAAmBd,MAAM,CAACc,SAA1B;AACD;;AACD,SAAOJ,MAAP;AACD,CAjBD","sourcesContent":["\nconst toString = Object.prototype.toString;\n\nfunction isRegExp (o) {\n  return 'object' == typeof o\n      && '[object RegExp]' == toString.call(o);\n}\n\nmodule.exports = exports = function (regexp) {\n  if (!isRegExp(regexp)) {\n    throw new TypeError('Not a RegExp');\n  }\n\n  const flags = [];\n  if (regexp.global) flags.push('g');\n  if (regexp.multiline) flags.push('m');\n  if (regexp.ignoreCase) flags.push('i');\n  if (regexp.dotAll) flags.push('s');\n  if (regexp.unicode) flags.push('u');\n  if (regexp.sticky) flags.push('y');\n  const result = new RegExp(regexp.source, flags.join(''));\n  if (typeof regexp.lastIndex === 'number') {\n    result.lastIndex = regexp.lastIndex;\n  }\n  return result;\n}\n\n"]},"metadata":{},"sourceType":"script"}