{"ast":null,"code":"/*!\n * Module dependencies.\n */\n'use strict';\n\nconst Document = require('../../document');\n\nconst mongooseArrayMethods = require('./methods');\n\nconst arrayAtomicsSymbol = require('../../helpers/symbols').arrayAtomicsSymbol;\n\nconst arrayAtomicsBackupSymbol = require('../../helpers/symbols').arrayAtomicsBackupSymbol;\n\nconst arrayParentSymbol = require('../../helpers/symbols').arrayParentSymbol;\n\nconst arrayPathSymbol = require('../../helpers/symbols').arrayPathSymbol;\n\nconst arraySchemaSymbol = require('../../helpers/symbols').arraySchemaSymbol;\n/**\n * Mongoose Array constructor.\n *\n * ####NOTE:\n *\n * _Values always have to be passed to the constructor to initialize, otherwise `MongooseArray#push` will mark the array as modified._\n *\n * @param {Array} values\n * @param {String} path\n * @param {Document} doc parent document\n * @api private\n * @inherits Array\n * @see http://bit.ly/f6CnZU\n */\n\n\nfunction MongooseArray(values, path, doc, schematype) {\n  const arr = values;\n  const internals = {\n    [arrayAtomicsSymbol]: {},\n    [arrayAtomicsBackupSymbol]: void 0,\n    [arrayPathSymbol]: path,\n    [arraySchemaSymbol]: schematype,\n    [arrayParentSymbol]: void 0,\n    isMongooseArray: true,\n    isMongooseArrayProxy: true,\n    __array: arr\n  };\n\n  if (values[arrayAtomicsSymbol] != null) {\n    internals[arrayAtomicsSymbol] = values[arrayAtomicsSymbol];\n  } // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n\n\n  if (doc != null && doc instanceof Document) {\n    internals[arrayParentSymbol] = doc;\n    internals[arraySchemaSymbol] = schematype || doc.schema.path(path);\n  }\n\n  const proxy = new Proxy(arr, {\n    get: function (target, prop) {\n      if (internals.hasOwnProperty(prop)) {\n        return internals[prop];\n      }\n\n      if (mongooseArrayMethods.hasOwnProperty(prop)) {\n        return mongooseArrayMethods[prop];\n      }\n\n      return arr[prop];\n    },\n    set: function (target, prop, val) {\n      if (typeof prop === 'string' && /^\\d+$/.test(prop)) {\n        const value = mongooseArrayMethods._cast.call(proxy, val, prop);\n\n        arr[prop] = value;\n\n        mongooseArrayMethods._markModified.call(proxy, prop);\n      } else if (internals.hasOwnProperty(prop)) {\n        internals[prop] = val;\n      } else {\n        arr[prop] = val;\n      }\n\n      return true;\n    }\n  });\n  return proxy;\n}\n/*!\n * Module exports.\n */\n\n\nmodule.exports = exports = MongooseArray;","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/types/array/index.js"],"names":["Document","require","mongooseArrayMethods","arrayAtomicsSymbol","arrayAtomicsBackupSymbol","arrayParentSymbol","arrayPathSymbol","arraySchemaSymbol","MongooseArray","values","path","doc","schematype","arr","internals","isMongooseArray","isMongooseArrayProxy","__array","schema","proxy","Proxy","get","target","prop","hasOwnProperty","set","val","test","value","_cast","call","_markModified","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst Document = require('../../document');\nconst mongooseArrayMethods = require('./methods');\n\nconst arrayAtomicsSymbol = require('../../helpers/symbols').arrayAtomicsSymbol;\nconst arrayAtomicsBackupSymbol = require('../../helpers/symbols').arrayAtomicsBackupSymbol;\nconst arrayParentSymbol = require('../../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../../helpers/symbols').arraySchemaSymbol;\n\n/**\n * Mongoose Array constructor.\n *\n * ####NOTE:\n *\n * _Values always have to be passed to the constructor to initialize, otherwise `MongooseArray#push` will mark the array as modified._\n *\n * @param {Array} values\n * @param {String} path\n * @param {Document} doc parent document\n * @api private\n * @inherits Array\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseArray(values, path, doc, schematype) {\n  const arr = values;\n\n  const internals = {\n    [arrayAtomicsSymbol]: {},\n    [arrayAtomicsBackupSymbol]: void 0,\n    [arrayPathSymbol]: path,\n    [arraySchemaSymbol]: schematype,\n    [arrayParentSymbol]: void 0,\n    isMongooseArray: true,\n    isMongooseArrayProxy: true,\n    __array: arr\n  };\n\n  if (values[arrayAtomicsSymbol] != null) {\n    internals[arrayAtomicsSymbol] = values[arrayAtomicsSymbol];\n  }\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc != null && doc instanceof Document) {\n    internals[arrayParentSymbol] = doc;\n    internals[arraySchemaSymbol] = schematype || doc.schema.path(path);\n  }\n\n  const proxy = new Proxy(arr, {\n    get: function(target, prop) {\n      if (internals.hasOwnProperty(prop)) {\n        return internals[prop];\n      }\n      if (mongooseArrayMethods.hasOwnProperty(prop)) {\n        return mongooseArrayMethods[prop];\n      }\n\n      return arr[prop];\n    },\n    set: function(target, prop, val) {\n      if (typeof prop === 'string' && /^\\d+$/.test(prop)) {\n        const value = mongooseArrayMethods._cast.call(proxy, val, prop);\n        arr[prop] = value;\n        mongooseArrayMethods._markModified.call(proxy, prop);\n      } else if (internals.hasOwnProperty(prop)) {\n        internals[prop] = val;\n      } else {\n        arr[prop] = val;\n      }\n\n      return true;\n    }\n  });\n\n  return proxy;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = MongooseArray;\n"]},"metadata":{},"sourceType":"script"}