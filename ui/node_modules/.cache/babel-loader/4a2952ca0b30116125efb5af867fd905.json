{"ast":null,"code":"'use strict';\n\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\n\nconst handleTimestampOption = require('../schema/handleTimestampOption');\n\nmodule.exports = applyTimestampsToChildren;\n/*!\n * ignore\n */\n\nfunction applyTimestampsToChildren(now, update, schema) {\n  if (update == null) {\n    return;\n  }\n\n  const keys = Object.keys(update);\n  const hasDollarKey = keys.some(key => key.startsWith('$'));\n\n  if (hasDollarKey) {\n    if (update.$push) {\n      _applyTimestampToUpdateOperator(update.$push);\n    }\n\n    if (update.$addToSet) {\n      _applyTimestampToUpdateOperator(update.$addToSet);\n    }\n\n    if (update.$set != null) {\n      const keys = Object.keys(update.$set);\n\n      for (const key of keys) {\n        applyTimestampsToUpdateKey(schema, key, update.$set, now);\n      }\n    }\n\n    if (update.$setOnInsert != null) {\n      const keys = Object.keys(update.$setOnInsert);\n\n      for (const key of keys) {\n        applyTimestampsToUpdateKey(schema, key, update.$setOnInsert, now);\n      }\n    }\n  }\n\n  const updateKeys = Object.keys(update).filter(key => !key.startsWith('$'));\n\n  for (const key of updateKeys) {\n    applyTimestampsToUpdateKey(schema, key, update, now);\n  }\n\n  function _applyTimestampToUpdateOperator(op) {\n    for (const key of Object.keys(op)) {\n      const $path = schema.path(key.replace(/\\.\\$\\./i, '.').replace(/.\\$$/, ''));\n\n      if (op[key] && $path && $path.$isMongooseDocumentArray && $path.schema.options.timestamps) {\n        const timestamps = $path.schema.options.timestamps;\n        const createdAt = handleTimestampOption(timestamps, 'createdAt');\n        const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n        if (op[key].$each) {\n          op[key].$each.forEach(function (subdoc) {\n            if (updatedAt != null) {\n              subdoc[updatedAt] = now;\n            }\n\n            if (createdAt != null) {\n              subdoc[createdAt] = now;\n            }\n          });\n        } else {\n          if (updatedAt != null) {\n            op[key][updatedAt] = now;\n          }\n\n          if (createdAt != null) {\n            op[key][createdAt] = now;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction applyTimestampsToDocumentArray(arr, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n\n  if (!timestamps) {\n    return;\n  }\n\n  const len = arr.length;\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n  for (let i = 0; i < len; ++i) {\n    if (updatedAt != null) {\n      arr[i][updatedAt] = now;\n    }\n\n    if (createdAt != null) {\n      arr[i][createdAt] = now;\n    }\n\n    applyTimestampsToChildren(now, arr[i], schematype.schema);\n  }\n}\n\nfunction applyTimestampsToSingleNested(subdoc, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n\n  if (!timestamps) {\n    return;\n  }\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n  if (updatedAt != null) {\n    subdoc[updatedAt] = now;\n  }\n\n  if (createdAt != null) {\n    subdoc[createdAt] = now;\n  }\n\n  applyTimestampsToChildren(now, subdoc, schematype.schema);\n}\n\nfunction applyTimestampsToUpdateKey(schema, key, update, now) {\n  // Replace positional operator `$` and array filters `$[]` and `$[.*]`\n  const keyToSearch = cleanPositionalOperators(key);\n  const path = schema.path(keyToSearch);\n\n  if (!path) {\n    return;\n  }\n\n  const parentSchemaTypes = [];\n  const pieces = keyToSearch.split('.');\n\n  for (let i = pieces.length - 1; i > 0; --i) {\n    const s = schema.path(pieces.slice(0, i).join('.'));\n\n    if (s != null && (s.$isMongooseDocumentArray || s.$isSingleNested)) {\n      parentSchemaTypes.push({\n        parentPath: key.split('.').slice(0, i).join('.'),\n        parentSchemaType: s\n      });\n    }\n  }\n\n  if (Array.isArray(update[key]) && path.$isMongooseDocumentArray) {\n    applyTimestampsToDocumentArray(update[key], path, now);\n  } else if (update[key] && path.$isSingleNested) {\n    applyTimestampsToSingleNested(update[key], path, now);\n  } else if (parentSchemaTypes.length > 0) {\n    for (const item of parentSchemaTypes) {\n      const parentPath = item.parentPath;\n      const parentSchemaType = item.parentSchemaType;\n      const timestamps = parentSchemaType.schema.options.timestamps;\n      const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n      if (!timestamps || updatedAt == null) {\n        continue;\n      }\n\n      if (parentSchemaType.$isSingleNested) {\n        // Single nested is easy\n        update[parentPath + '.' + updatedAt] = now;\n      } else if (parentSchemaType.$isMongooseDocumentArray) {\n        let childPath = key.substr(parentPath.length + 1);\n\n        if (/^\\d+$/.test(childPath)) {\n          update[parentPath + '.' + childPath][updatedAt] = now;\n          continue;\n        }\n\n        const firstDot = childPath.indexOf('.');\n        childPath = firstDot !== -1 ? childPath.substr(0, firstDot) : childPath;\n        update[parentPath + '.' + childPath + '.' + updatedAt] = now;\n      }\n    }\n  } else if (path.schema != null && path.schema != schema && update[key]) {\n    const timestamps = path.schema.options.timestamps;\n    const createdAt = handleTimestampOption(timestamps, 'createdAt');\n    const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n    if (!timestamps) {\n      return;\n    }\n\n    if (updatedAt != null) {\n      update[key][updatedAt] = now;\n    }\n\n    if (createdAt != null) {\n      update[key][createdAt] = now;\n    }\n  }\n}","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/helpers/update/applyTimestampsToChildren.js"],"names":["cleanPositionalOperators","require","handleTimestampOption","module","exports","applyTimestampsToChildren","now","update","schema","keys","Object","hasDollarKey","some","key","startsWith","$push","_applyTimestampToUpdateOperator","$addToSet","$set","applyTimestampsToUpdateKey","$setOnInsert","updateKeys","filter","op","$path","path","replace","$isMongooseDocumentArray","options","timestamps","createdAt","updatedAt","$each","forEach","subdoc","applyTimestampsToDocumentArray","arr","schematype","len","length","i","applyTimestampsToSingleNested","keyToSearch","parentSchemaTypes","pieces","split","s","slice","join","$isSingleNested","push","parentPath","parentSchemaType","Array","isArray","item","childPath","substr","test","firstDot","indexOf"],"mappings":"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","sourcesContent":["'use strict';\n\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\nconst handleTimestampOption = require('../schema/handleTimestampOption');\n\nmodule.exports = applyTimestampsToChildren;\n\n/*!\n * ignore\n */\n\nfunction applyTimestampsToChildren(now, update, schema) {\n  if (update == null) {\n    return;\n  }\n\n  const keys = Object.keys(update);\n  const hasDollarKey = keys.some(key => key.startsWith('$'));\n\n  if (hasDollarKey) {\n    if (update.$push) {\n      _applyTimestampToUpdateOperator(update.$push);\n    }\n    if (update.$addToSet) {\n      _applyTimestampToUpdateOperator(update.$addToSet);\n    }\n    if (update.$set != null) {\n      const keys = Object.keys(update.$set);\n      for (const key of keys) {\n        applyTimestampsToUpdateKey(schema, key, update.$set, now);\n      }\n    }\n    if (update.$setOnInsert != null) {\n      const keys = Object.keys(update.$setOnInsert);\n      for (const key of keys) {\n        applyTimestampsToUpdateKey(schema, key, update.$setOnInsert, now);\n      }\n    }\n  }\n\n  const updateKeys = Object.keys(update).filter(key => !key.startsWith('$'));\n  for (const key of updateKeys) {\n    applyTimestampsToUpdateKey(schema, key, update, now);\n  }\n\n  function _applyTimestampToUpdateOperator(op) {\n    for (const key of Object.keys(op)) {\n      const $path = schema.path(key.replace(/\\.\\$\\./i, '.').replace(/.\\$$/, ''));\n      if (op[key] &&\n          $path &&\n          $path.$isMongooseDocumentArray &&\n          $path.schema.options.timestamps) {\n        const timestamps = $path.schema.options.timestamps;\n        const createdAt = handleTimestampOption(timestamps, 'createdAt');\n        const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n        if (op[key].$each) {\n          op[key].$each.forEach(function(subdoc) {\n            if (updatedAt != null) {\n              subdoc[updatedAt] = now;\n            }\n            if (createdAt != null) {\n              subdoc[createdAt] = now;\n            }\n          });\n        } else {\n          if (updatedAt != null) {\n            op[key][updatedAt] = now;\n          }\n          if (createdAt != null) {\n            op[key][createdAt] = now;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction applyTimestampsToDocumentArray(arr, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n\n  if (!timestamps) {\n    return;\n  }\n\n  const len = arr.length;\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  for (let i = 0; i < len; ++i) {\n    if (updatedAt != null) {\n      arr[i][updatedAt] = now;\n    }\n    if (createdAt != null) {\n      arr[i][createdAt] = now;\n    }\n\n    applyTimestampsToChildren(now, arr[i], schematype.schema);\n  }\n}\n\nfunction applyTimestampsToSingleNested(subdoc, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n  if (!timestamps) {\n    return;\n  }\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  if (updatedAt != null) {\n    subdoc[updatedAt] = now;\n  }\n  if (createdAt != null) {\n    subdoc[createdAt] = now;\n  }\n\n  applyTimestampsToChildren(now, subdoc, schematype.schema);\n}\n\nfunction applyTimestampsToUpdateKey(schema, key, update, now) {\n  // Replace positional operator `$` and array filters `$[]` and `$[.*]`\n  const keyToSearch = cleanPositionalOperators(key);\n  const path = schema.path(keyToSearch);\n  if (!path) {\n    return;\n  }\n\n  const parentSchemaTypes = [];\n  const pieces = keyToSearch.split('.');\n  for (let i = pieces.length - 1; i > 0; --i) {\n    const s = schema.path(pieces.slice(0, i).join('.'));\n    if (s != null &&\n      (s.$isMongooseDocumentArray || s.$isSingleNested)) {\n      parentSchemaTypes.push({ parentPath: key.split('.').slice(0, i).join('.'), parentSchemaType: s });\n    }\n  }\n\n  if (Array.isArray(update[key]) && path.$isMongooseDocumentArray) {\n    applyTimestampsToDocumentArray(update[key], path, now);\n  } else if (update[key] && path.$isSingleNested) {\n    applyTimestampsToSingleNested(update[key], path, now);\n  } else if (parentSchemaTypes.length > 0) {\n    for (const item of parentSchemaTypes) {\n      const parentPath = item.parentPath;\n      const parentSchemaType = item.parentSchemaType;\n      const timestamps = parentSchemaType.schema.options.timestamps;\n      const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n      if (!timestamps || updatedAt == null) {\n        continue;\n      }\n\n      if (parentSchemaType.$isSingleNested) {\n        // Single nested is easy\n        update[parentPath + '.' + updatedAt] = now;\n      } else if (parentSchemaType.$isMongooseDocumentArray) {\n        let childPath = key.substr(parentPath.length + 1);\n\n        if (/^\\d+$/.test(childPath)) {\n          update[parentPath + '.' + childPath][updatedAt] = now;\n          continue;\n        }\n\n        const firstDot = childPath.indexOf('.');\n        childPath = firstDot !== -1 ? childPath.substr(0, firstDot) : childPath;\n\n        update[parentPath + '.' + childPath + '.' + updatedAt] = now;\n      }\n    }\n  } else if (path.schema != null && path.schema != schema && update[key]) {\n    const timestamps = path.schema.options.timestamps;\n    const createdAt = handleTimestampOption(timestamps, 'createdAt');\n    const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n    if (!timestamps) {\n      return;\n    }\n\n    if (updatedAt != null) {\n      update[key][updatedAt] = now;\n    }\n    if (createdAt != null) {\n      update[key][createdAt] = now;\n    }\n  }\n}"]},"metadata":{},"sourceType":"script"}