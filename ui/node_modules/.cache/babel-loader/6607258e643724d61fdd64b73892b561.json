{"ast":null,"code":"'use strict';\n\nconst setDottedPath = require('../path/setDottedPath');\n/**\n * Given an object that may contain dotted paths, flatten the paths out.\n * For example: `flattenObjectWithDottedPaths({ a: { 'b.c': 42 } })` => `{ a: { b: { c: 42 } } }`\n */\n\n\nmodule.exports = function flattenObjectWithDottedPaths(obj) {\n  if (obj == null || typeof obj !== 'object' || Array.isArray(obj)) {\n    return;\n  }\n\n  const keys = Object.keys(obj);\n\n  for (const key of keys) {\n    const val = obj[key];\n\n    if (key.indexOf('.') !== -1) {\n      delete obj[key];\n      setDottedPath(obj, key, val);\n      continue;\n    }\n\n    flattenObjectWithDottedPaths(obj[key]);\n  }\n};","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/helpers/path/flattenObjectWithDottedPaths.js"],"names":["setDottedPath","require","module","exports","flattenObjectWithDottedPaths","obj","Array","isArray","keys","Object","key","val","indexOf"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,uBAAD,CAA7B;AAEA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,4BAAT,CAAsCC,GAAtC,EAA2C;AAC1D,MAAIA,GAAG,IAAI,IAAP,IAAe,OAAOA,GAAP,KAAe,QAA9B,IAA0CC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAA9C,EAAkE;AAChE;AACD;;AACD,QAAMG,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,GAAZ,CAAb;;AACA,OAAK,MAAMK,GAAX,IAAkBF,IAAlB,EAAwB;AACtB,UAAMG,GAAG,GAAGN,GAAG,CAACK,GAAD,CAAf;;AACA,QAAIA,GAAG,CAACE,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAA1B,EAA6B;AAC3B,aAAOP,GAAG,CAACK,GAAD,CAAV;AACAV,MAAAA,aAAa,CAACK,GAAD,EAAMK,GAAN,EAAWC,GAAX,CAAb;AACA;AACD;;AAEDP,IAAAA,4BAA4B,CAACC,GAAG,CAACK,GAAD,CAAJ,CAA5B;AACD;AACF,CAfD","sourcesContent":["'use strict';\n\nconst setDottedPath = require('../path/setDottedPath');\n\n/**\n * Given an object that may contain dotted paths, flatten the paths out.\n * For example: `flattenObjectWithDottedPaths({ a: { 'b.c': 42 } })` => `{ a: { b: { c: 42 } } }`\n */\n\nmodule.exports = function flattenObjectWithDottedPaths(obj) {\n  if (obj == null || typeof obj !== 'object' || Array.isArray(obj)) {\n    return;\n  }\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const val = obj[key];\n    if (key.indexOf('.') !== -1) {\n      delete obj[key];\n      setDottedPath(obj, key, val);\n      continue;\n    }\n\n    flattenObjectWithDottedPaths(obj[key]);\n  }\n};"]},"metadata":{},"sourceType":"script"}