{"ast":null,"code":"import { setHours, setMinutes } from \"date-fns\";\n\nconst {\n  addDays,\n  format,\n  nextMonday,\n  isSameDay\n} = require(\"date-fns\");\n\nexport function mondayIndexed(sundayIndexed) {\n  return sundayIndexed === 0 ? 6 : sundayIndexed - 1;\n}\nexport function weekIndex(date) {\n  return mondayIndexed(date.getDay());\n}\n/*\nfunction currentDateTime() {\n    return add(new Date(), {minutes: new Date().getTimezoneOffset() * -1})\n}\n*/\n\nexport function weekContaining(date) {\n  const daysOfWeek = [0, 1, 2, 3, 4, 5, 6];\n  const difference = daysOfWeek.map(day => day - weekIndex(date));\n  return difference.map(diff => addDays(date, diff));\n}\nexport function dayOfWeek(date) {\n  return format(date, 'iii');\n}\nexport function monthAndYear(date) {\n  return `${format(date, 'MMM')} ${format(date, 'yyyy')}`;\n}\nexport function previousMonday(date) {\n  const result = nextMonday(addDays(date, -7));\n  result.setHours(0);\n  result.setMinutes(0);\n  return result;\n}\nexport const fitsInWeek = (firstDayOfWeek, date) => {\n  const endOfWeek = addDays(firstDayOfWeek, 7);\n\n  if (isSameDay(firstDayOfWeek, date) || isSameDay(endOfWeek, date)) {\n    return true;\n  }\n\n  return date >= firstDayOfWeek && date <= endOfWeek;\n};\nexport const mergeDateAndTime = (date, time) => {\n  const hours = time.getHours();\n  const minutes = time.getMinutes();\n  return setMinutes(setHours(date, hours), minutes);\n};\nexport function setTimeDayStart(date) {\n  return setMinutes(setHours(date, 0), 0);\n}\nexport function setTimeDayEnd(date) {\n  return setTimeDayStart(addDays(date, 1));\n}\nconst defaultExports = {\n  weekContaining,\n  dayOfWeek,\n  monthAndYear,\n  addDays,\n  previousMonday,\n  fitsInWeek,\n  mergeDateAndTime,\n  startOfDay: setTimeDayStart,\n  endOfDay: setTimeDayEnd\n};\nexport default defaultExports;","map":{"version":3,"sources":["/home/gregorian/calendar-ui/ui/src/utilities/dateUtilities.js"],"names":["setHours","setMinutes","addDays","format","nextMonday","isSameDay","require","mondayIndexed","sundayIndexed","weekIndex","date","getDay","weekContaining","daysOfWeek","difference","map","day","diff","dayOfWeek","monthAndYear","previousMonday","result","fitsInWeek","firstDayOfWeek","endOfWeek","mergeDateAndTime","time","hours","getHours","minutes","getMinutes","setTimeDayStart","setTimeDayEnd","defaultExports","startOfDay","endOfDay"],"mappings":"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","sourcesContent":["import {setHours, setMinutes} from \"date-fns\";\n\nconst {addDays,format,nextMonday,isSameDay} = require(\"date-fns\");\n\nexport function mondayIndexed(sundayIndexed) {\n    return sundayIndexed === 0 ? 6 : sundayIndexed - 1\n}\n\nexport function weekIndex(date) {\n    return mondayIndexed(date.getDay())\n}\n\n/*\nfunction currentDateTime() {\n    return add(new Date(), {minutes: new Date().getTimezoneOffset() * -1})\n}\n*/\n\nexport function weekContaining(date) {\n    const daysOfWeek = [0, 1, 2, 3, 4, 5, 6]\n    const difference = daysOfWeek.map(day => day - weekIndex(date))\n    return difference.map(diff => addDays(date, diff))\n}\n\nexport function dayOfWeek(date){\n    return format(date,'iii')\n}\n\nexport function monthAndYear(date){\n    return `${format(date,'MMM')} ${format(date,'yyyy')}`\n}\n\nexport function previousMonday(date){\n    const result =nextMonday(addDays(date,-7))\n    result.setHours(0)\n    result.setMinutes(0)\n    return result\n}\n\nexport const fitsInWeek=(firstDayOfWeek,date)=>{\n    const endOfWeek = addDays(firstDayOfWeek,7)\n    if (isSameDay(firstDayOfWeek,date) || isSameDay(endOfWeek,date)){\n        return true\n    }\n    return (date >=firstDayOfWeek && date <=endOfWeek)\n}\n\nexport const mergeDateAndTime = (date,time)=>{\n    const hours = time.getHours()\n    const minutes = time.getMinutes()\n    return setMinutes(setHours(date,hours),minutes)\n}\n\nexport function setTimeDayStart(date){\n    return setMinutes(setHours(date,0),0)\n}\n\nexport function setTimeDayEnd(date){\n    return setTimeDayStart(addDays(date,1))\n}\n\nconst defaultExports = {\n    weekContaining,\n    dayOfWeek,\n    monthAndYear,\n    addDays,\n    previousMonday,\n    fitsInWeek,\n    mergeDateAndTime,\n    startOfDay: setTimeDayStart,\n    endOfDay: setTimeDayEnd\n}\n\nexport default defaultExports"]},"metadata":{},"sourceType":"module"}