{"ast":null,"code":"'use strict';\n\nconst Mixed = require('../../schema/mixed');\n\nconst defineKey = require('../document/compile').defineKey;\n\nconst get = require('../get');\n\nconst utils = require('../../utils');\n\nconst CUSTOMIZABLE_DISCRIMINATOR_OPTIONS = {\n  toJSON: true,\n  toObject: true,\n  _id: true,\n  id: true\n};\n/*!\n * ignore\n */\n\nmodule.exports = function discriminator(model, name, schema, tiedValue, applyPlugins) {\n  if (!(schema && schema.instanceOfSchema)) {\n    throw new Error('You must pass a valid discriminator Schema');\n  }\n\n  if (model.schema.discriminatorMapping && !model.schema.discriminatorMapping.isRoot) {\n    throw new Error('Discriminator \"' + name + '\" can only be a discriminator of the root model');\n  }\n\n  if (applyPlugins) {\n    const applyPluginsToDiscriminators = get(model.base, 'options.applyPluginsToDiscriminators', false); // Even if `applyPluginsToDiscriminators` isn't set, we should still apply\n    // global plugins to schemas embedded in the discriminator schema (gh-7370)\n\n    model.base._applyPlugins(schema, {\n      skipTopLevel: !applyPluginsToDiscriminators\n    });\n  }\n\n  const key = model.schema.options.discriminatorKey;\n  const existingPath = model.schema.path(key);\n\n  if (existingPath != null) {\n    if (!utils.hasUserDefinedProperty(existingPath.options, 'select')) {\n      existingPath.options.select = true;\n    }\n\n    existingPath.options.$skipDiscriminatorCheck = true;\n  } else {\n    const baseSchemaAddition = {};\n    baseSchemaAddition[key] = {\n      default: void 0,\n      select: true,\n      $skipDiscriminatorCheck: true\n    };\n    baseSchemaAddition[key][model.schema.options.typeKey] = String;\n    model.schema.add(baseSchemaAddition);\n    defineKey({\n      prop: key,\n      prototype: model.prototype,\n      options: model.schema.options\n    });\n  }\n\n  if (schema.path(key) && schema.path(key).options.$skipDiscriminatorCheck !== true) {\n    throw new Error('Discriminator \"' + name + '\" cannot have field with name \"' + key + '\"');\n  }\n\n  let value = name;\n\n  if (typeof tiedValue === 'string' && tiedValue.length || tiedValue != null) {\n    value = tiedValue;\n  }\n\n  function merge(schema, baseSchema) {\n    // Retain original schema before merging base schema\n    schema._baseSchema = baseSchema;\n\n    if (baseSchema.paths._id && baseSchema.paths._id.options && !baseSchema.paths._id.options.auto) {\n      schema.remove('_id');\n    } // Find conflicting paths: if something is a path in the base schema\n    // and a nested path in the child schema, overwrite the base schema path.\n    // See gh-6076\n\n\n    const baseSchemaPaths = Object.keys(baseSchema.paths);\n    const conflictingPaths = [];\n\n    for (const path of baseSchemaPaths) {\n      if (schema.nested[path]) {\n        conflictingPaths.push(path);\n        continue;\n      }\n\n      if (path.indexOf('.') === -1) {\n        continue;\n      }\n\n      const sp = path.split('.').slice(0, -1);\n      let cur = '';\n\n      for (const piece of sp) {\n        cur += (cur.length ? '.' : '') + piece;\n\n        if (schema.paths[cur] instanceof Mixed || schema.singleNestedPaths[cur] instanceof Mixed) {\n          conflictingPaths.push(path);\n        }\n      }\n    }\n\n    utils.merge(schema, baseSchema, {\n      isDiscriminatorSchemaMerge: true,\n      omit: {\n        discriminators: true,\n        base: true\n      },\n      omitNested: conflictingPaths.reduce((cur, path) => {\n        cur['tree.' + path] = true;\n        return cur;\n      }, {})\n    }); // Clean up conflicting paths _after_ merging re: gh-6076\n\n    for (const conflictingPath of conflictingPaths) {\n      delete schema.paths[conflictingPath];\n    } // Rebuild schema models because schemas may have been merged re: #7884\n\n\n    schema.childSchemas.forEach(obj => {\n      obj.model.prototype.$__setSchema(obj.schema);\n    });\n    const obj = {};\n    obj[key] = {\n      default: value,\n      select: true,\n      set: function (newName) {\n        if (newName === value || Array.isArray(value) && utils.deepEqual(newName, value)) {\n          return value;\n        }\n\n        throw new Error('Can\\'t set discriminator key \"' + key + '\"');\n      },\n      $skipDiscriminatorCheck: true\n    };\n    obj[key][schema.options.typeKey] = existingPath ? existingPath.options[schema.options.typeKey] : String;\n    schema.add(obj);\n    schema.discriminatorMapping = {\n      key: key,\n      value: value,\n      isRoot: false\n    };\n\n    if (baseSchema.options.collection) {\n      schema.options.collection = baseSchema.options.collection;\n    }\n\n    const toJSON = schema.options.toJSON;\n    const toObject = schema.options.toObject;\n    const _id = schema.options._id;\n    const id = schema.options.id;\n    const keys = Object.keys(schema.options);\n    schema.options.discriminatorKey = baseSchema.options.discriminatorKey;\n\n    for (const _key of keys) {\n      if (!CUSTOMIZABLE_DISCRIMINATOR_OPTIONS[_key]) {\n        // Special case: compiling a model sets `pluralization = true` by default. Avoid throwing an error\n        // for that case. See gh-9238\n        if (_key === 'pluralization' && schema.options[_key] == true && baseSchema.options[_key] == null) {\n          continue;\n        }\n\n        if (!utils.deepEqual(schema.options[_key], baseSchema.options[_key])) {\n          throw new Error('Can\\'t customize discriminator option ' + _key + ' (can only modify ' + Object.keys(CUSTOMIZABLE_DISCRIMINATOR_OPTIONS).join(', ') + ')');\n        }\n      }\n    }\n\n    schema.options = utils.clone(baseSchema.options);\n    if (toJSON) schema.options.toJSON = toJSON;\n    if (toObject) schema.options.toObject = toObject;\n\n    if (typeof _id !== 'undefined') {\n      schema.options._id = _id;\n    }\n\n    schema.options.id = id;\n    schema.s.hooks = model.schema.s.hooks.merge(schema.s.hooks);\n    schema.plugins = Array.prototype.slice.call(baseSchema.plugins);\n    schema.callQueue = baseSchema.callQueue.concat(schema.callQueue);\n    delete schema._requiredpaths; // reset just in case Schema#requiredPaths() was called on either schema\n  } // merges base schema into new discriminator schema and sets new type field.\n\n\n  merge(schema, model.schema);\n\n  if (!model.discriminators) {\n    model.discriminators = {};\n  }\n\n  if (!model.schema.discriminatorMapping) {\n    model.schema.discriminatorMapping = {\n      key: key,\n      value: null,\n      isRoot: true\n    };\n  }\n\n  if (!model.schema.discriminators) {\n    model.schema.discriminators = {};\n  }\n\n  model.schema.discriminators[name] = schema;\n\n  if (model.discriminators[name]) {\n    throw new Error('Discriminator with name \"' + name + '\" already exists');\n  }\n\n  return schema;\n};","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/helpers/model/discriminator.js"],"names":["Mixed","require","defineKey","get","utils","CUSTOMIZABLE_DISCRIMINATOR_OPTIONS","toJSON","toObject","_id","id","module","exports","discriminator","model","name","schema","tiedValue","applyPlugins","instanceOfSchema","Error","discriminatorMapping","isRoot","applyPluginsToDiscriminators","base","_applyPlugins","skipTopLevel","key","options","discriminatorKey","existingPath","path","hasUserDefinedProperty","select","$skipDiscriminatorCheck","baseSchemaAddition","default","typeKey","String","add","prop","prototype","value","length","merge","baseSchema","_baseSchema","paths","auto","remove","baseSchemaPaths","Object","keys","conflictingPaths","nested","push","indexOf","sp","split","slice","cur","piece","singleNestedPaths","isDiscriminatorSchemaMerge","omit","discriminators","omitNested","reduce","conflictingPath","childSchemas","forEach","obj","$__setSchema","set","newName","Array","isArray","deepEqual","collection","_key","join","clone","s","hooks","plugins","call","callQueue","concat","_requiredpaths"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Mixed = require('../../schema/mixed');\nconst defineKey = require('../document/compile').defineKey;\nconst get = require('../get');\nconst utils = require('../../utils');\n\nconst CUSTOMIZABLE_DISCRIMINATOR_OPTIONS = {\n  toJSON: true,\n  toObject: true,\n  _id: true,\n  id: true\n};\n\n/*!\n * ignore\n */\n\nmodule.exports = function discriminator(model, name, schema, tiedValue, applyPlugins) {\n  if (!(schema && schema.instanceOfSchema)) {\n    throw new Error('You must pass a valid discriminator Schema');\n  }\n\n  if (model.schema.discriminatorMapping &&\n      !model.schema.discriminatorMapping.isRoot) {\n    throw new Error('Discriminator \"' + name +\n        '\" can only be a discriminator of the root model');\n  }\n\n  if (applyPlugins) {\n    const applyPluginsToDiscriminators = get(model.base,\n      'options.applyPluginsToDiscriminators', false);\n    // Even if `applyPluginsToDiscriminators` isn't set, we should still apply\n    // global plugins to schemas embedded in the discriminator schema (gh-7370)\n    model.base._applyPlugins(schema, {\n      skipTopLevel: !applyPluginsToDiscriminators\n    });\n  }\n\n  const key = model.schema.options.discriminatorKey;\n\n  const existingPath = model.schema.path(key);\n  if (existingPath != null) {\n    if (!utils.hasUserDefinedProperty(existingPath.options, 'select')) {\n      existingPath.options.select = true;\n    }\n    existingPath.options.$skipDiscriminatorCheck = true;\n  } else {\n    const baseSchemaAddition = {};\n    baseSchemaAddition[key] = {\n      default: void 0,\n      select: true,\n      $skipDiscriminatorCheck: true\n    };\n    baseSchemaAddition[key][model.schema.options.typeKey] = String;\n    model.schema.add(baseSchemaAddition);\n    defineKey({\n      prop: key,\n      prototype: model.prototype,\n      options: model.schema.options\n    });\n  }\n\n  if (schema.path(key) && schema.path(key).options.$skipDiscriminatorCheck !== true) {\n    throw new Error('Discriminator \"' + name +\n        '\" cannot have field with name \"' + key + '\"');\n  }\n\n  let value = name;\n  if ((typeof tiedValue === 'string' && tiedValue.length) || tiedValue != null) {\n    value = tiedValue;\n  }\n\n  function merge(schema, baseSchema) {\n    // Retain original schema before merging base schema\n    schema._baseSchema = baseSchema;\n    if (baseSchema.paths._id &&\n        baseSchema.paths._id.options &&\n        !baseSchema.paths._id.options.auto) {\n      schema.remove('_id');\n    }\n\n    // Find conflicting paths: if something is a path in the base schema\n    // and a nested path in the child schema, overwrite the base schema path.\n    // See gh-6076\n    const baseSchemaPaths = Object.keys(baseSchema.paths);\n    const conflictingPaths = [];\n\n    for (const path of baseSchemaPaths) {\n      if (schema.nested[path]) {\n        conflictingPaths.push(path);\n        continue;\n      }\n\n      if (path.indexOf('.') === -1) {\n        continue;\n      }\n      const sp = path.split('.').slice(0, -1);\n      let cur = '';\n      for (const piece of sp) {\n        cur += (cur.length ? '.' : '') + piece;\n        if (schema.paths[cur] instanceof Mixed ||\n            schema.singleNestedPaths[cur] instanceof Mixed) {\n          conflictingPaths.push(path);\n        }\n      }\n    }\n\n    utils.merge(schema, baseSchema, {\n      isDiscriminatorSchemaMerge: true,\n      omit: { discriminators: true, base: true },\n      omitNested: conflictingPaths.reduce((cur, path) => {\n        cur['tree.' + path] = true;\n        return cur;\n      }, {})\n    });\n\n    // Clean up conflicting paths _after_ merging re: gh-6076\n    for (const conflictingPath of conflictingPaths) {\n      delete schema.paths[conflictingPath];\n    }\n\n    // Rebuild schema models because schemas may have been merged re: #7884\n    schema.childSchemas.forEach(obj => {\n      obj.model.prototype.$__setSchema(obj.schema);\n    });\n\n    const obj = {};\n    obj[key] = {\n      default: value,\n      select: true,\n      set: function(newName) {\n        if (newName === value || (Array.isArray(value) && utils.deepEqual(newName, value))) {\n          return value;\n        }\n        throw new Error('Can\\'t set discriminator key \"' + key + '\"');\n      },\n      $skipDiscriminatorCheck: true\n    };\n    obj[key][schema.options.typeKey] = existingPath ? existingPath.options[schema.options.typeKey] : String;\n    schema.add(obj);\n\n\n    schema.discriminatorMapping = { key: key, value: value, isRoot: false };\n\n    if (baseSchema.options.collection) {\n      schema.options.collection = baseSchema.options.collection;\n    }\n\n    const toJSON = schema.options.toJSON;\n    const toObject = schema.options.toObject;\n    const _id = schema.options._id;\n    const id = schema.options.id;\n\n    const keys = Object.keys(schema.options);\n    schema.options.discriminatorKey = baseSchema.options.discriminatorKey;\n\n    for (const _key of keys) {\n      if (!CUSTOMIZABLE_DISCRIMINATOR_OPTIONS[_key]) {\n        // Special case: compiling a model sets `pluralization = true` by default. Avoid throwing an error\n        // for that case. See gh-9238\n        if (_key === 'pluralization' && schema.options[_key] == true && baseSchema.options[_key] == null) {\n          continue;\n        }\n\n        if (!utils.deepEqual(schema.options[_key], baseSchema.options[_key])) {\n          throw new Error('Can\\'t customize discriminator option ' + _key +\n            ' (can only modify ' +\n            Object.keys(CUSTOMIZABLE_DISCRIMINATOR_OPTIONS).join(', ') +\n            ')');\n        }\n      }\n    }\n    schema.options = utils.clone(baseSchema.options);\n    if (toJSON) schema.options.toJSON = toJSON;\n    if (toObject) schema.options.toObject = toObject;\n    if (typeof _id !== 'undefined') {\n      schema.options._id = _id;\n    }\n    schema.options.id = id;\n    schema.s.hooks = model.schema.s.hooks.merge(schema.s.hooks);\n\n    schema.plugins = Array.prototype.slice.call(baseSchema.plugins);\n    schema.callQueue = baseSchema.callQueue.concat(schema.callQueue);\n    delete schema._requiredpaths; // reset just in case Schema#requiredPaths() was called on either schema\n  }\n\n  // merges base schema into new discriminator schema and sets new type field.\n  merge(schema, model.schema);\n\n  if (!model.discriminators) {\n    model.discriminators = {};\n  }\n\n  if (!model.schema.discriminatorMapping) {\n    model.schema.discriminatorMapping = { key: key, value: null, isRoot: true };\n  }\n  if (!model.schema.discriminators) {\n    model.schema.discriminators = {};\n  }\n\n  model.schema.discriminators[name] = schema;\n\n  if (model.discriminators[name]) {\n    throw new Error('Discriminator with name \"' + name + '\" already exists');\n  }\n\n  return schema;\n};\n"]},"metadata":{},"sourceType":"script"}