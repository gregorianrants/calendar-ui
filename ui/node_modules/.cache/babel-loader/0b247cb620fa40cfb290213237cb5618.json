{"ast":null,"code":"const {\n  addDays,\n  add,\n  format,\n  nextMonday\n} = require(\"date-fns\");\n\nfunction mondayIndexed(sundayIndexed) {\n  return sundayIndexed === 0 ? 6 : sundayIndexed - 1;\n}\n\nfunction weekIndex(date) {\n  //returns index of day within week where week starts with index 0\n  return mondayIndexed(date.getDay());\n}\n\nfunction currentDateTime() {\n  return add(new Date(), {\n    minutes: new Date().getTimezoneOffset() * -1\n  });\n}\n\nfunction weekContaining(date) {\n  const daysOfWeek = [0, 1, 2, 3, 4, 5, 6];\n  const difference = daysOfWeek.map(day => day - weekIndex(date));\n  return difference.map(diff => addDays(date, diff));\n}\n\nfunction weekBoundaries(date) {\n  return {\n    'monday': weekContaining(date)[0],\n    'sunday': weekContaining(date)[6]\n  };\n}\n\nfunction dayOfWeek(date) {\n  return format(date, 'iii');\n}\n\nfunction monthAndYear(date) {\n  return `${format(date, 'MMM')} ${format(date, 'yyyy')}`;\n}\n\nfunction previousMonday(date) {\n  return nextMonday(addDays(date, -7));\n} //console.log(dayOfWeek(new Date()))\n//console.log(monthAndYear(new Date()))\n\n\nmodule.exports = {\n  currentDateTime,\n  weekContaining,\n  dayOfWeek,\n  monthAndYear,\n  weekBoundaries,\n  addDays,\n  previousMonday\n};","map":{"version":3,"sources":["/home/gregorian/calendar-ui/api/dateUtilities/dateUtilities.js"],"names":["addDays","add","format","nextMonday","require","mondayIndexed","sundayIndexed","weekIndex","date","getDay","currentDateTime","Date","minutes","getTimezoneOffset","weekContaining","daysOfWeek","difference","map","day","diff","weekBoundaries","dayOfWeek","monthAndYear","previousMonday","module","exports"],"mappings":"AAEA,MAAM;AAACA,EAAAA,OAAD;AAASC,EAAAA,GAAT;AAAaC,EAAAA,MAAb;AAAoBC,EAAAA;AAApB,IAAkCC,OAAO,CAAC,UAAD,CAA/C;;AAEA,SAASC,aAAT,CAAuBC,aAAvB,EAAsC;AAClC,SAAOA,aAAa,KAAK,CAAlB,GAAsB,CAAtB,GAA0BA,aAAa,GAAG,CAAjD;AACH;;AAED,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACrB;AACA,SAAOH,aAAa,CAACG,IAAI,CAACC,MAAL,EAAD,CAApB;AACH;;AAED,SAASC,eAAT,GAA2B;AACvB,SAAOT,GAAG,CAAC,IAAIU,IAAJ,EAAD,EAAa;AAACC,IAAAA,OAAO,EAAE,IAAID,IAAJ,GAAWE,iBAAX,KAAiC,CAAC;AAA5C,GAAb,CAAV;AACH;;AAED,SAASC,cAAT,CAAwBN,IAAxB,EAA8B;AAC1B,QAAMO,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAnB;AACA,QAAMC,UAAU,GAAGD,UAAU,CAACE,GAAX,CAAeC,GAAG,IAAIA,GAAG,GAAGX,SAAS,CAACC,IAAD,CAArC,CAAnB;AACA,SAAOQ,UAAU,CAACC,GAAX,CAAeE,IAAI,IAAInB,OAAO,CAACQ,IAAD,EAAOW,IAAP,CAA9B,CAAP;AACH;;AAED,SAASC,cAAT,CAAwBZ,IAAxB,EAA6B;AACzB,SAAO;AAAC,cAAUM,cAAc,CAACN,IAAD,CAAd,CAAqB,CAArB,CAAX;AAAoC,cAAUM,cAAc,CAACN,IAAD,CAAd,CAAqB,CAArB;AAA9C,GAAP;AACH;;AAED,SAASa,SAAT,CAAmBb,IAAnB,EAAwB;AACpB,SAAON,MAAM,CAACM,IAAD,EAAM,KAAN,CAAb;AACH;;AAED,SAASc,YAAT,CAAsBd,IAAtB,EAA2B;AACvB,SAAQ,GAAEN,MAAM,CAACM,IAAD,EAAM,KAAN,CAAa,IAAGN,MAAM,CAACM,IAAD,EAAM,MAAN,CAAc,EAApD;AACH;;AAED,SAASe,cAAT,CAAwBf,IAAxB,EAA6B;AACzB,SAAOL,UAAU,CAACH,OAAO,CAACQ,IAAD,EAAM,CAAC,CAAP,CAAR,CAAjB;AACH,C,CAED;AAEA;;;AAEAgB,MAAM,CAACC,OAAP,GAAiB;AACbf,EAAAA,eADa;AACGI,EAAAA,cADH;AACkBO,EAAAA,SADlB;AAC4BC,EAAAA,YAD5B;AACyCF,EAAAA,cADzC;AACwDpB,EAAAA,OADxD;AACgEuB,EAAAA;AADhE,CAAjB","sourcesContent":["\n\nconst {addDays,add,format,nextMonday} = require(\"date-fns\");\n\nfunction mondayIndexed(sundayIndexed) {\n    return sundayIndexed === 0 ? 6 : sundayIndexed - 1\n}\n\nfunction weekIndex(date) {\n    //returns index of day within week where week starts with index 0\n    return mondayIndexed(date.getDay())\n}\n\nfunction currentDateTime() {\n    return add(new Date(), {minutes: new Date().getTimezoneOffset() * -1})\n}\n\nfunction weekContaining(date) {\n    const daysOfWeek = [0, 1, 2, 3, 4, 5, 6]\n    const difference = daysOfWeek.map(day => day - weekIndex(date))\n    return difference.map(diff => addDays(date, diff))\n}\n\nfunction weekBoundaries(date){\n    return {'monday': weekContaining(date)[0], 'sunday': weekContaining(date)[6]}\n}\n\nfunction dayOfWeek(date){\n    return format(date,'iii')\n}\n\nfunction monthAndYear(date){\n    return `${format(date,'MMM')} ${format(date,'yyyy')}`\n}\n\nfunction previousMonday(date){\n    return nextMonday(addDays(date,-7))\n}\n\n//console.log(dayOfWeek(new Date()))\n\n//console.log(monthAndYear(new Date()))\n\nmodule.exports = {\n    currentDateTime,weekContaining,dayOfWeek,monthAndYear,weekBoundaries,addDays,previousMonday\n}\n\n"]},"metadata":{},"sourceType":"script"}