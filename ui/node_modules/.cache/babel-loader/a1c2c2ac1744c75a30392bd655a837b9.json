{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = require('./mongooseError');\n\nconst get = require('../helpers/get');\n\nconst util = require('util');\n/**\n * Casting Error constructor.\n *\n * @param {String} type\n * @param {String} value\n * @inherits MongooseError\n * @api private\n */\n\n\nclass CastError extends MongooseError {\n  constructor(type, value, path, reason, schemaType) {\n    // If no args, assume we'll `init()` later.\n    if (arguments.length > 0) {\n      const stringValue = getStringValue(value);\n      const valueType = getValueType(value);\n      const messageFormat = getMessageFormat(schemaType);\n      const msg = formatMessage(null, type, stringValue, path, messageFormat, valueType);\n      super(msg);\n      this.init(type, value, path, reason, schemaType);\n    } else {\n      super(formatMessage());\n    }\n  }\n\n  toJSON() {\n    return {\n      stringValue: this.stringValue,\n      valueType: this.valueType,\n      kind: this.kind,\n      value: this.value,\n      path: this.path,\n      reason: this.reason,\n      name: this.name,\n      message: this.message\n    };\n  }\n  /*!\n   * ignore\n   */\n\n\n  init(type, value, path, reason, schemaType) {\n    this.stringValue = getStringValue(value);\n    this.messageFormat = getMessageFormat(schemaType);\n    this.kind = type;\n    this.value = value;\n    this.path = path;\n    this.reason = reason;\n    this.valueType = getValueType(value);\n  }\n  /*!\n   * ignore\n   * @param {Readonly<CastError>} other\n   */\n\n\n  copy(other) {\n    this.messageFormat = other.messageFormat;\n    this.stringValue = other.stringValue;\n    this.kind = other.kind;\n    this.value = other.value;\n    this.path = other.path;\n    this.reason = other.reason;\n    this.message = other.message;\n    this.valueType = other.valueType;\n  }\n  /*!\n   * ignore\n   */\n\n\n  setModel(model) {\n    this.model = model;\n    this.message = formatMessage(model, this.kind, this.stringValue, this.path, this.messageFormat, this.valueType);\n  }\n\n}\n\nObject.defineProperty(CastError.prototype, 'name', {\n  value: 'CastError'\n});\n\nfunction getStringValue(value) {\n  let stringValue = util.inspect(value);\n  stringValue = stringValue.replace(/^'|'$/g, '\"');\n\n  if (!stringValue.startsWith('\"')) {\n    stringValue = '\"' + stringValue + '\"';\n  }\n\n  return stringValue;\n}\n\nfunction getValueType(value) {\n  if (value == null) {\n    return '' + value;\n  }\n\n  const t = typeof value;\n\n  if (t !== 'object') {\n    return t;\n  }\n\n  if (typeof value.constructor !== 'function') {\n    return t;\n  }\n\n  return value.constructor.name;\n}\n\nfunction getMessageFormat(schemaType) {\n  const messageFormat = get(schemaType, 'options.cast', null);\n\n  if (typeof messageFormat === 'string') {\n    return messageFormat;\n  }\n}\n/*!\n * ignore\n */\n\n\nfunction formatMessage(model, kind, stringValue, path, messageFormat, valueType) {\n  if (messageFormat != null) {\n    let ret = messageFormat.replace('{KIND}', kind).replace('{VALUE}', stringValue).replace('{PATH}', path);\n\n    if (model != null) {\n      ret = ret.replace('{MODEL}', model.modelName);\n    }\n\n    return ret;\n  } else {\n    const valueTypeMsg = valueType ? ' (type ' + valueType + ')' : '';\n    let ret = 'Cast to ' + kind + ' failed for value ' + stringValue + valueTypeMsg + ' at path \"' + path + '\"';\n\n    if (model != null) {\n      ret += ' for model \"' + model.modelName + '\"';\n    }\n\n    return ret;\n  }\n}\n/*!\n * exports\n */\n\n\nmodule.exports = CastError;","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/error/cast.js"],"names":["MongooseError","require","get","util","CastError","constructor","type","value","path","reason","schemaType","arguments","length","stringValue","getStringValue","valueType","getValueType","messageFormat","getMessageFormat","msg","formatMessage","init","toJSON","kind","name","message","copy","other","setModel","model","Object","defineProperty","prototype","inspect","replace","startsWith","t","ret","modelName","valueTypeMsg","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = require('./mongooseError');\nconst get = require('../helpers/get');\nconst util = require('util');\n\n/**\n * Casting Error constructor.\n *\n * @param {String} type\n * @param {String} value\n * @inherits MongooseError\n * @api private\n */\n\nclass CastError extends MongooseError {\n  constructor(type, value, path, reason, schemaType) {\n    // If no args, assume we'll `init()` later.\n    if (arguments.length > 0) {\n      const stringValue = getStringValue(value);\n      const valueType = getValueType(value);\n      const messageFormat = getMessageFormat(schemaType);\n      const msg = formatMessage(null, type, stringValue, path, messageFormat, valueType);\n      super(msg);\n      this.init(type, value, path, reason, schemaType);\n    } else {\n      super(formatMessage());\n    }\n  }\n\n  toJSON() {\n    return {\n      stringValue: this.stringValue,\n      valueType: this.valueType,\n      kind: this.kind,\n      value: this.value,\n      path: this.path,\n      reason: this.reason,\n      name: this.name,\n      message: this.message\n    };\n  }\n  /*!\n   * ignore\n   */\n  init(type, value, path, reason, schemaType) {\n    this.stringValue = getStringValue(value);\n    this.messageFormat = getMessageFormat(schemaType);\n    this.kind = type;\n    this.value = value;\n    this.path = path;\n    this.reason = reason;\n    this.valueType = getValueType(value);\n  }\n\n  /*!\n   * ignore\n   * @param {Readonly<CastError>} other\n   */\n  copy(other) {\n    this.messageFormat = other.messageFormat;\n    this.stringValue = other.stringValue;\n    this.kind = other.kind;\n    this.value = other.value;\n    this.path = other.path;\n    this.reason = other.reason;\n    this.message = other.message;\n    this.valueType = other.valueType;\n  }\n\n  /*!\n   * ignore\n   */\n  setModel(model) {\n    this.model = model;\n    this.message = formatMessage(model, this.kind, this.stringValue, this.path,\n      this.messageFormat, this.valueType);\n  }\n}\n\nObject.defineProperty(CastError.prototype, 'name', {\n  value: 'CastError'\n});\n\nfunction getStringValue(value) {\n  let stringValue = util.inspect(value);\n  stringValue = stringValue.replace(/^'|'$/g, '\"');\n  if (!stringValue.startsWith('\"')) {\n    stringValue = '\"' + stringValue + '\"';\n  }\n  return stringValue;\n}\n\nfunction getValueType(value) {\n  if (value == null) {\n    return '' + value;\n  }\n\n  const t = typeof value;\n  if (t !== 'object') {\n    return t;\n  }\n  if (typeof value.constructor !== 'function') {\n    return t;\n  }\n  return value.constructor.name;\n}\n\nfunction getMessageFormat(schemaType) {\n  const messageFormat = get(schemaType, 'options.cast', null);\n  if (typeof messageFormat === 'string') {\n    return messageFormat;\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction formatMessage(model, kind, stringValue, path, messageFormat, valueType) {\n  if (messageFormat != null) {\n    let ret = messageFormat.\n      replace('{KIND}', kind).\n      replace('{VALUE}', stringValue).\n      replace('{PATH}', path);\n    if (model != null) {\n      ret = ret.replace('{MODEL}', model.modelName);\n    }\n\n    return ret;\n  } else {\n    const valueTypeMsg = valueType ? ' (type ' + valueType + ')' : '';\n    let ret = 'Cast to ' + kind + ' failed for value ' +\n      stringValue + valueTypeMsg + ' at path \"' + path + '\"';\n    if (model != null) {\n      ret += ' for model \"' + model.modelName + '\"';\n    }\n    return ret;\n  }\n}\n\n/*!\n * exports\n */\n\nmodule.exports = CastError;\n"]},"metadata":{},"sourceType":"script"}