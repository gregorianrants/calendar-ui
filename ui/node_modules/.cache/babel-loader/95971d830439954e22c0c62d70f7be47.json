{"ast":null,"code":"const mongoose = require(\"mongoose\");\n\nconst cuid = require(\"cuid\");\n/*const addGcalEvent = require('./../googleCalendar')*/\n\n\nconst setHours = require(\"date-fns/setHours\");\n\nfunction buildSchema() {}\n\nlet Job = mongoose.model(\"Job\", jobSchema, \"jobs\");\n\nasync function list({\n  from,\n  to\n}) {\n  let data = await Job.find({\n    start: {\n      $gte: from\n    },\n    end: {\n      $lte: to\n    }\n  });\n  return data;\n}\n\nasync function create(data) {\n  let job = new Job(data);\n  await job.save(); //TODO add some validation start must be before end\n\n  return job;\n}\n\nasync function get(id) {\n  const job = await Job.findById(id);\n  return job;\n}\n\nasync function remove(id) {\n  let data = await Job.deleteOne({\n    _id: id\n  });\n  return data;\n}\n\nasync function edit(_id, change) {\n  const product = await get(_id);\n  Object.keys(change).forEach(function (key) {\n    product[key] = change[key];\n  });\n  await product.save();\n  return product;\n}\n\nasync function resetData(data) {\n  await Job.deleteMany();\n  console.log(data);\n  await Job.insertMany(data);\n}\n\nmodule.exports = {\n  list,\n  create,\n  get,\n  remove,\n  resetData,\n  edit,\n  jobSchema\n};\nexports.Job = Job;","map":{"version":3,"sources":["/home/gregorian/calendar-ui/api/model/job.js"],"names":["mongoose","require","cuid","setHours","buildSchema","Job","model","jobSchema","list","from","to","data","find","start","$gte","end","$lte","create","job","save","get","id","findById","remove","deleteOne","_id","edit","change","product","Object","keys","forEach","key","resetData","deleteMany","console","log","insertMany","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;AACA;;;AAEA,MAAME,QAAQ,GAAGF,OAAO,CAAC,mBAAD,CAAxB;;AAEA,SAASG,WAAT,GAAsB,CAErB;;AAID,IAAIC,GAAG,GAAGL,QAAQ,CAACM,KAAT,CAAe,KAAf,EAAsBC,SAAtB,EAAiC,MAAjC,CAAV;;AAEA,eAAeC,IAAf,CAAoB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAApB,EAAkC;AAChC,MAAIC,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAJ,CAAS;AACxBC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAEL;AAAR,KADiB;AAExBM,IAAAA,GAAG,EAAE;AAAEC,MAAAA,IAAI,EAAEN;AAAR;AAFmB,GAAT,CAAjB;AAIA,SAAOC,IAAP;AACD;;AAED,eAAeM,MAAf,CAAsBN,IAAtB,EAA4B;AAC1B,MAAIO,GAAG,GAAG,IAAIb,GAAJ,CAAQM,IAAR,CAAV;AACA,QAAMO,GAAG,CAACC,IAAJ,EAAN,CAF0B,CAER;;AAClB,SAAOD,GAAP;AACD;;AAED,eAAeE,GAAf,CAAmBC,EAAnB,EAAuB;AACrB,QAAMH,GAAG,GAAG,MAAMb,GAAG,CAACiB,QAAJ,CAAaD,EAAb,CAAlB;AACA,SAAOH,GAAP;AACD;;AAED,eAAeK,MAAf,CAAsBF,EAAtB,EAA0B;AACxB,MAAIV,IAAI,GAAG,MAAMN,GAAG,CAACmB,SAAJ,CAAc;AAAEC,IAAAA,GAAG,EAAEJ;AAAP,GAAd,CAAjB;AACA,SAAOV,IAAP;AACD;;AAED,eAAee,IAAf,CAAoBD,GAApB,EAAyBE,MAAzB,EAAiC;AAC/B,QAAMC,OAAO,GAAG,MAAMR,GAAG,CAACK,GAAD,CAAzB;AACAI,EAAAA,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,OAApB,CAA4B,UAAUC,GAAV,EAAe;AACzCJ,IAAAA,OAAO,CAACI,GAAD,CAAP,GAAeL,MAAM,CAACK,GAAD,CAArB;AACD,GAFD;AAGA,QAAMJ,OAAO,CAACT,IAAR,EAAN;AACA,SAAOS,OAAP;AACD;;AAED,eAAeK,SAAf,CAAyBtB,IAAzB,EAA+B;AAC7B,QAAMN,GAAG,CAAC6B,UAAJ,EAAN;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYzB,IAAZ;AACA,QAAMN,GAAG,CAACgC,UAAJ,CAAe1B,IAAf,CAAN;AACD;;AAED2B,MAAM,CAACC,OAAP,GAAiB;AACf/B,EAAAA,IADe;AAEfS,EAAAA,MAFe;AAGfG,EAAAA,GAHe;AAIfG,EAAAA,MAJe;AAKfU,EAAAA,SALe;AAMfP,EAAAA,IANe;AAOfnB,EAAAA;AAPe,CAAjB;AAUAgC,OAAO,CAAClC,GAAR,GAAcA,GAAd","sourcesContent":["const mongoose = require(\"mongoose\");\nconst cuid = require(\"cuid\");\n/*const addGcalEvent = require('./../googleCalendar')*/\n\nconst setHours = require(\"date-fns/setHours\");\n\nfunction buildSchema(){\n\n}\n\n\n\nlet Job = mongoose.model(\"Job\", jobSchema, \"jobs\");\n\nasync function list({ from, to }) {\n  let data = await Job.find({\n    start: { $gte: from },\n    end: { $lte: to },\n  });\n  return data;\n}\n\nasync function create(data) {\n  let job = new Job(data);\n  await job.save(); //TODO add some validation start must be before end\n  return job;\n}\n\nasync function get(id) {\n  const job = await Job.findById(id);\n  return job;\n}\n\nasync function remove(id) {\n  let data = await Job.deleteOne({ _id: id });\n  return data;\n}\n\nasync function edit(_id, change) {\n  const product = await get(_id);\n  Object.keys(change).forEach(function (key) {\n    product[key] = change[key];\n  });\n  await product.save();\n  return product;\n}\n\nasync function resetData(data) {\n  await Job.deleteMany();\n  console.log(data);\n  await Job.insertMany(data);\n}\n\nmodule.exports = {\n  list,\n  create,\n  get,\n  remove,\n  resetData,\n  edit,\n  jobSchema,\n};\n\nexports.Job = Job;\n"]},"metadata":{},"sourceType":"script"}