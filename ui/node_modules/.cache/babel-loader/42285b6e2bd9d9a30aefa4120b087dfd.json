{"ast":null,"code":"'use strict';\n\nconst ArrayMethods = require('../../array/methods');\n\nconst Document = require('../../../document');\n\nconst ObjectId = require('../../objectid');\n\nconst castObjectId = require('../../../cast/objectid');\n\nconst getDiscriminatorByValue = require('../../../helpers/discriminator/getDiscriminatorByValue');\n\nconst internalToObjectOptions = require('../../../options').internalToObjectOptions;\n\nconst utils = require('../../../utils');\n\nconst arrayParentSymbol = require('../../../helpers/symbols').arrayParentSymbol;\n\nconst arrayPathSymbol = require('../../../helpers/symbols').arrayPathSymbol;\n\nconst arraySchemaSymbol = require('../../../helpers/symbols').arraySchemaSymbol;\n\nconst documentArrayParent = require('../../../helpers/symbols').documentArrayParent;\n\nconst methods = {\n  /*!\n   * ignore\n   */\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  },\n\n  /**\n   * Overrides MongooseArray#cast\n   *\n   * @method _cast\n   * @api private\n   * @receiver MongooseDocumentArray\n   */\n  _cast(value, index) {\n    if (this[arraySchemaSymbol] == null) {\n      return value;\n    }\n\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    const isInstance = Constructor.$isMongooseDocumentArray ? value && value.isMongooseDocumentArray : value instanceof Constructor;\n\n    if (isInstance || // Hack re: #5001, see #5005\n    value && value.constructor && value.constructor.baseCasterConstructor === Constructor) {\n      if (!(value[documentArrayParent] && value.__parentArray)) {\n        // value may have been created using array.create()\n        value[documentArrayParent] = this[arrayParentSymbol];\n        value.__parentArray = this;\n      }\n\n      value.$setIndex(index);\n      return value;\n    }\n\n    if (value === undefined || value === null) {\n      return null;\n    } // handle cast('string') or cast(ObjectId) etc.\n    // only objects are permitted so we can safely assume that\n    // non-objects are to be interpreted as _id\n\n\n    if (Buffer.isBuffer(value) || value instanceof ObjectId || !utils.isObject(value)) {\n      value = {\n        _id: value\n      };\n    }\n\n    if (value && Constructor.discriminators && Constructor.schema && Constructor.schema.options && Constructor.schema.options.discriminatorKey) {\n      if (typeof value[Constructor.schema.options.discriminatorKey] === 'string' && Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, value[Constructor.schema.options.discriminatorKey]);\n\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    if (Constructor.$isMongooseDocumentArray) {\n      return Constructor.cast(value, this, undefined, undefined, index);\n    }\n\n    const ret = new Constructor(value, this, undefined, undefined, index);\n    ret.isNew = true;\n    return ret;\n  },\n\n  /**\n   * Searches array items for the first document with a matching _id.\n   *\n   * ####Example:\n   *\n   *     const embeddedDoc = m.array.id(some_id);\n   *\n   * @return {EmbeddedDocument|null} the subdocument or null if not found.\n   * @param {ObjectId|String|Number|Buffer} id\n   * @TODO cast to the _id based on schema for proper comparison\n   * @method id\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n  id(id) {\n    let casted;\n    let sid;\n\n    let _id;\n\n    try {\n      casted = castObjectId(id).toString();\n    } catch (e) {\n      casted = null;\n    }\n\n    for (const val of this) {\n      if (!val) {\n        continue;\n      }\n\n      _id = val.get('_id');\n\n      if (_id === null || typeof _id === 'undefined') {\n        continue;\n      } else if (_id instanceof Document) {\n        sid || (sid = String(id));\n\n        if (sid == _id._id) {\n          return val;\n        }\n      } else if (!(id instanceof ObjectId) && !(_id instanceof ObjectId)) {\n        if (id == _id || utils.deepEqual(id, _id)) {\n          return val;\n        }\n      } else if (casted == _id) {\n        return val;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns a native js Array of plain js objects\n   *\n   * ####NOTE:\n   *\n   * _Each sub-document is converted to a plain object by calling its `#toObject` method._\n   *\n   * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\n   * @return {Array}\n   * @method toObject\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n  toObject(options) {\n    // `[].concat` coerces the return value into a vanilla JS array, rather\n    // than a Mongoose array.\n    return [].concat(this.map(function (doc) {\n      if (doc == null) {\n        return null;\n      }\n\n      if (typeof doc.toObject !== 'function') {\n        return doc;\n      }\n\n      return doc.toObject(options);\n    }));\n  },\n\n  $toObject() {\n    return this.constructor.prototype.toObject.apply(this, arguments);\n  },\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @memberOf MongooseDocumentArray\n   */\n  push() {\n    const ret = ArrayMethods.push.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  },\n\n  /**\n   * Pulls items from the array atomically.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method pull\n   * @memberOf MongooseDocumentArray\n   */\n  pull() {\n    const ret = ArrayMethods.pull.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   */\n  shift() {\n    const ret = ArrayMethods.shift.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   */\n  splice() {\n    const ret = ArrayMethods.splice.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  },\n\n  /**\n   * Helper for console.log\n   *\n   * @method inspect\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n  inspect() {\n    return this.toObject();\n  },\n\n  /**\n   * Creates a subdocument casted to this schema.\n   *\n   * This is the same subdocument constructor used for casting.\n   *\n   * @param {Object} obj the value to cast to this arrays SubDocument schema\n   * @method create\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n  create(obj) {\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n\n    if (obj && Constructor.discriminators && Constructor.schema && Constructor.schema.options && Constructor.schema.options.discriminatorKey) {\n      if (typeof obj[Constructor.schema.options.discriminatorKey] === 'string' && Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, obj[Constructor.schema.options.discriminatorKey]);\n\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    return new Constructor(obj, this);\n  },\n\n  /*!\n   * ignore\n   */\n  notify(event) {\n    const _this = this;\n\n    return function notify(val, _arr) {\n      _arr = _arr || _this;\n      let i = _arr.length;\n\n      while (i--) {\n        if (_arr[i] == null) {\n          continue;\n        }\n\n        switch (event) {\n          // only swap for save event for now, we may change this to all event types later\n          case 'save':\n            val = _this[i];\n            break;\n\n          default:\n            // NO-OP\n            break;\n        }\n\n        if (_arr[i].isMongooseArray) {\n          notify(val, _arr[i]);\n        } else if (_arr[i]) {\n          _arr[i].emit(event, val);\n        }\n      }\n    };\n  },\n\n  _markModified(elem, embeddedPath) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n\n      if (arguments.length) {\n        if (embeddedPath != null) {\n          // an embedded doc bubbled up the change\n          const index = elem.__index;\n          dirtyPath = dirtyPath + '.' + index + '.' + embeddedPath;\n        } else {\n          // directly set an index\n          dirtyPath = dirtyPath + '.' + elem;\n        }\n      }\n\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n\n      parent.markModified(dirtyPath, arguments.length > 0 ? elem : parent);\n    }\n\n    return this;\n  }\n\n};\nmodule.exports = methods;\n/*!\n * If this is a document array, each element may contain single\n * populated paths, so we need to modify the top-level document's\n * populated cache. See gh-8247, gh-8265.\n */\n\nfunction _updateParentPopulated(arr) {\n  const parent = arr[arrayParentSymbol];\n  if (!parent || parent.$__.populated == null) return;\n  const populatedPaths = Object.keys(parent.$__.populated).filter(p => p.startsWith(arr[arrayPathSymbol] + '.'));\n\n  for (const path of populatedPaths) {\n    const remnant = path.slice((arr[arrayPathSymbol] + '.').length);\n\n    if (!Array.isArray(parent.$__.populated[path].value)) {\n      continue;\n    }\n\n    parent.$__.populated[path].value = arr.map(val => val.$populated(remnant));\n  }\n}","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/types/DocumentArray/methods/index.js"],"names":["ArrayMethods","require","Document","ObjectId","castObjectId","getDiscriminatorByValue","internalToObjectOptions","utils","arrayParentSymbol","arrayPathSymbol","arraySchemaSymbol","documentArrayParent","methods","toBSON","toObject","_cast","value","index","Constructor","casterConstructor","isInstance","$isMongooseDocumentArray","isMongooseDocumentArray","constructor","baseCasterConstructor","__parentArray","$setIndex","undefined","Buffer","isBuffer","isObject","_id","discriminators","schema","options","discriminatorKey","constructorByValue","cast","ret","isNew","id","casted","sid","toString","e","val","get","String","deepEqual","concat","map","doc","$toObject","prototype","apply","arguments","push","_updateParentPopulated","pull","shift","splice","inspect","create","obj","notify","event","_this","_arr","i","length","isMongooseArray","emit","_markModified","elem","embeddedPath","parent","dirtyPath","__index","endsWith","markModified","module","exports","arr","$__","populated","populatedPaths","Object","keys","filter","p","startsWith","path","remnant","slice","Array","isArray","$populated"],"mappings":"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","sourcesContent":["'use strict';\n\nconst ArrayMethods = require('../../array/methods');\nconst Document = require('../../../document');\nconst ObjectId = require('../../objectid');\nconst castObjectId = require('../../../cast/objectid');\nconst getDiscriminatorByValue = require('../../../helpers/discriminator/getDiscriminatorByValue');\nconst internalToObjectOptions = require('../../../options').internalToObjectOptions;\nconst utils = require('../../../utils');\n\nconst arrayParentSymbol = require('../../../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../../../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../../../helpers/symbols').arraySchemaSymbol;\nconst documentArrayParent = require('../../../helpers/symbols').documentArrayParent;\n\nconst methods = {\n  /*!\n   * ignore\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  },\n\n  /**\n   * Overrides MongooseArray#cast\n   *\n   * @method _cast\n   * @api private\n   * @receiver MongooseDocumentArray\n   */\n\n  _cast(value, index) {\n    if (this[arraySchemaSymbol] == null) {\n      return value;\n    }\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    const isInstance = Constructor.$isMongooseDocumentArray ?\n      value && value.isMongooseDocumentArray :\n      value instanceof Constructor;\n    if (isInstance ||\n        // Hack re: #5001, see #5005\n        (value && value.constructor && value.constructor.baseCasterConstructor === Constructor)) {\n      if (!(value[documentArrayParent] && value.__parentArray)) {\n        // value may have been created using array.create()\n        value[documentArrayParent] = this[arrayParentSymbol];\n        value.__parentArray = this;\n      }\n      value.$setIndex(index);\n      return value;\n    }\n\n    if (value === undefined || value === null) {\n      return null;\n    }\n\n    // handle cast('string') or cast(ObjectId) etc.\n    // only objects are permitted so we can safely assume that\n    // non-objects are to be interpreted as _id\n    if (Buffer.isBuffer(value) ||\n        value instanceof ObjectId || !utils.isObject(value)) {\n      value = { _id: value };\n    }\n\n    if (value &&\n        Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        Constructor.schema.options.discriminatorKey) {\n      if (typeof value[Constructor.schema.options.discriminatorKey] === 'string' &&\n          Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, value[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    if (Constructor.$isMongooseDocumentArray) {\n      return Constructor.cast(value, this, undefined, undefined, index);\n    }\n    const ret = new Constructor(value, this, undefined, undefined, index);\n    ret.isNew = true;\n    return ret;\n  },\n\n  /**\n   * Searches array items for the first document with a matching _id.\n   *\n   * ####Example:\n   *\n   *     const embeddedDoc = m.array.id(some_id);\n   *\n   * @return {EmbeddedDocument|null} the subdocument or null if not found.\n   * @param {ObjectId|String|Number|Buffer} id\n   * @TODO cast to the _id based on schema for proper comparison\n   * @method id\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  id(id) {\n    let casted;\n    let sid;\n    let _id;\n\n    try {\n      casted = castObjectId(id).toString();\n    } catch (e) {\n      casted = null;\n    }\n\n    for (const val of this) {\n      if (!val) {\n        continue;\n      }\n\n      _id = val.get('_id');\n\n      if (_id === null || typeof _id === 'undefined') {\n        continue;\n      } else if (_id instanceof Document) {\n        sid || (sid = String(id));\n        if (sid == _id._id) {\n          return val;\n        }\n      } else if (!(id instanceof ObjectId) && !(_id instanceof ObjectId)) {\n        if (id == _id || utils.deepEqual(id, _id)) {\n          return val;\n        }\n      } else if (casted == _id) {\n        return val;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns a native js Array of plain js objects\n   *\n   * ####NOTE:\n   *\n   * _Each sub-document is converted to a plain object by calling its `#toObject` method._\n   *\n   * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\n   * @return {Array}\n   * @method toObject\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  toObject(options) {\n    // `[].concat` coerces the return value into a vanilla JS array, rather\n    // than a Mongoose array.\n    return [].concat(this.map(function(doc) {\n      if (doc == null) {\n        return null;\n      }\n      if (typeof doc.toObject !== 'function') {\n        return doc;\n      }\n      return doc.toObject(options);\n    }));\n  },\n\n  $toObject() {\n    return this.constructor.prototype.toObject.apply(this, arguments);\n  },\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @memberOf MongooseDocumentArray\n   */\n\n  push() {\n    const ret = ArrayMethods.push.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  },\n\n  /**\n   * Pulls items from the array atomically.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method pull\n   * @memberOf MongooseDocumentArray\n   */\n\n  pull() {\n    const ret = ArrayMethods.pull.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   */\n\n  shift() {\n    const ret = ArrayMethods.shift.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   */\n\n  splice() {\n    const ret = ArrayMethods.splice.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  },\n\n  /**\n   * Helper for console.log\n   *\n   * @method inspect\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  inspect() {\n    return this.toObject();\n  },\n\n  /**\n   * Creates a subdocument casted to this schema.\n   *\n   * This is the same subdocument constructor used for casting.\n   *\n   * @param {Object} obj the value to cast to this arrays SubDocument schema\n   * @method create\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  create(obj) {\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    if (obj &&\n        Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        Constructor.schema.options.discriminatorKey) {\n      if (typeof obj[Constructor.schema.options.discriminatorKey] === 'string' &&\n          Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, obj[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    return new Constructor(obj, this);\n  },\n\n  /*!\n   * ignore\n   */\n\n  notify(event) {\n    const _this = this;\n    return function notify(val, _arr) {\n      _arr = _arr || _this;\n      let i = _arr.length;\n      while (i--) {\n        if (_arr[i] == null) {\n          continue;\n        }\n        switch (event) {\n          // only swap for save event for now, we may change this to all event types later\n          case 'save':\n            val = _this[i];\n            break;\n          default:\n            // NO-OP\n            break;\n        }\n\n        if (_arr[i].isMongooseArray) {\n          notify(val, _arr[i]);\n        } else if (_arr[i]) {\n          _arr[i].emit(event, val);\n        }\n      }\n    };\n  },\n\n  _markModified(elem, embeddedPath) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n\n      if (arguments.length) {\n        if (embeddedPath != null) {\n          // an embedded doc bubbled up the change\n          const index = elem.__index;\n          dirtyPath = dirtyPath + '.' + index + '.' + embeddedPath;\n        } else {\n          // directly set an index\n          dirtyPath = dirtyPath + '.' + elem;\n        }\n      }\n\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n\n      parent.markModified(dirtyPath, arguments.length > 0 ? elem : parent);\n    }\n\n    return this;\n  }\n};\n\nmodule.exports = methods;\n\n/*!\n * If this is a document array, each element may contain single\n * populated paths, so we need to modify the top-level document's\n * populated cache. See gh-8247, gh-8265.\n */\n\nfunction _updateParentPopulated(arr) {\n  const parent = arr[arrayParentSymbol];\n  if (!parent || parent.$__.populated == null) return;\n\n  const populatedPaths = Object.keys(parent.$__.populated).\n    filter(p => p.startsWith(arr[arrayPathSymbol] + '.'));\n\n  for (const path of populatedPaths) {\n    const remnant = path.slice((arr[arrayPathSymbol] + '.').length);\n    if (!Array.isArray(parent.$__.populated[path].value)) {\n      continue;\n    }\n\n    parent.$__.populated[path].value = arr.map(val => val.$populated(remnant));\n  }\n}"]},"metadata":{},"sourceType":"script"}