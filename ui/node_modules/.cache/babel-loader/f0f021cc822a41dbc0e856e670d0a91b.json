{"ast":null,"code":"'use strict';\n\nconst clone = require('../helpers/clone');\n\nclass PopulateOptions {\n  constructor(obj) {\n    this._docs = {};\n    this._childDocs = [];\n\n    if (obj == null) {\n      return;\n    }\n\n    obj = clone(obj);\n    Object.assign(this, obj);\n\n    if (typeof obj.subPopulate === 'object') {\n      this.populate = obj.subPopulate;\n    }\n\n    if (obj.perDocumentLimit != null && obj.limit != null) {\n      throw new Error('Can not use `limit` and `perDocumentLimit` at the same time. Path: `' + obj.path + '`.');\n    }\n  }\n\n}\n/**\n * The connection used to look up models by name. If not specified, Mongoose\n * will default to using the connection associated with the model in\n * `PopulateOptions#model`.\n *\n * @memberOf PopulateOptions\n * @property {Connection} connection\n * @api public\n */\n\n\nmodule.exports = PopulateOptions;","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mongoose/lib/options/PopulateOptions.js"],"names":["clone","require","PopulateOptions","constructor","obj","_docs","_childDocs","Object","assign","subPopulate","populate","perDocumentLimit","limit","Error","path","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAArB;;AAEA,MAAMC,eAAN,CAAsB;AACpBC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,UAAL,GAAkB,EAAlB;;AAEA,QAAIF,GAAG,IAAI,IAAX,EAAiB;AACf;AACD;;AACDA,IAAAA,GAAG,GAAGJ,KAAK,CAACI,GAAD,CAAX;AACAG,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBJ,GAApB;;AACA,QAAI,OAAOA,GAAG,CAACK,WAAX,KAA2B,QAA/B,EAAyC;AACvC,WAAKC,QAAL,GAAgBN,GAAG,CAACK,WAApB;AACD;;AAGD,QAAIL,GAAG,CAACO,gBAAJ,IAAwB,IAAxB,IAAgCP,GAAG,CAACQ,KAAJ,IAAa,IAAjD,EAAuD;AACrD,YAAM,IAAIC,KAAJ,CAAU,yEAAyET,GAAG,CAACU,IAA7E,GAAoF,IAA9F,CAAN;AACD;AACF;;AAlBmB;AAqBtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBd,eAAjB","sourcesContent":["'use strict';\n\nconst clone = require('../helpers/clone');\n\nclass PopulateOptions {\n  constructor(obj) {\n    this._docs = {};\n    this._childDocs = [];\n\n    if (obj == null) {\n      return;\n    }\n    obj = clone(obj);\n    Object.assign(this, obj);\n    if (typeof obj.subPopulate === 'object') {\n      this.populate = obj.subPopulate;\n    }\n\n\n    if (obj.perDocumentLimit != null && obj.limit != null) {\n      throw new Error('Can not use `limit` and `perDocumentLimit` at the same time. Path: `' + obj.path + '`.');\n    }\n  }\n}\n\n/**\n * The connection used to look up models by name. If not specified, Mongoose\n * will default to using the connection associated with the model in\n * `PopulateOptions#model`.\n *\n * @memberOf PopulateOptions\n * @property {Connection} connection\n * @api public\n */\n\nmodule.exports = PopulateOptions;"]},"metadata":{},"sourceType":"script"}