{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nconst slice = require('sliced');\n\nconst assert = require('assert');\n\nconst util = require('util');\n\nconst utils = require('./utils');\n\nconst debug = require('debug')('mquery');\n/* global Map */\n\n/**\n * Query constructor used for building queries.\n *\n * ####Example:\n *\n *     var query = new Query({ name: 'mquery' });\n *     query.setOptions({ collection: moduleCollection })\n *     query.where('age').gte(21).exec(callback);\n *\n * @param {Object} [criteria]\n * @param {Object} [options]\n * @api public\n */\n\n\nfunction Query(criteria, options) {\n  if (!(this instanceof Query)) return new Query(criteria, options);\n  const proto = this.constructor.prototype;\n  this.op = proto.op || undefined;\n  this.options = Object.assign({}, proto.options);\n  this._conditions = proto._conditions ? utils.clone(proto._conditions) : {};\n  this._fields = proto._fields ? utils.clone(proto._fields) : undefined;\n  this._update = proto._update ? utils.clone(proto._update) : undefined;\n  this._path = proto._path || undefined;\n  this._distinct = proto._distinct || undefined;\n  this._collection = proto._collection || undefined;\n  this._traceFunction = proto._traceFunction || undefined;\n\n  if (options) {\n    this.setOptions(options);\n  }\n\n  if (criteria) {\n    if (criteria.find && criteria.remove && criteria.update) {\n      // quack quack!\n      this.collection(criteria);\n    } else {\n      this.find(criteria);\n    }\n  }\n}\n/**\n * This is a parameter that the user can set which determines if mquery\n * uses $within or $geoWithin for queries. It defaults to true which\n * means $geoWithin will be used. If using MongoDB < 2.4 you should\n * set this to false.\n *\n * @api public\n * @property use$geoWithin\n */\n\n\nlet $withinCmd = '$geoWithin';\nObject.defineProperty(Query, 'use$geoWithin', {\n  get: function () {\n    return $withinCmd == '$geoWithin';\n  },\n  set: function (v) {\n    if (true === v) {\n      // mongodb >= 2.4\n      $withinCmd = '$geoWithin';\n    } else {\n      $withinCmd = '$within';\n    }\n  }\n});\n/**\n * Converts this query to a constructor function with all arguments and options retained.\n *\n * ####Example\n *\n *     // Create a query that will read documents with a \"video\" category from\n *     // `aCollection` on the primary node in the replica-set unless it is down,\n *     // in which case we'll read from a secondary node.\n *     var query = mquery({ category: 'video' })\n *     query.setOptions({ collection: aCollection, read: 'primaryPreferred' });\n *\n *     // create a constructor based off these settings\n *     var Video = query.toConstructor();\n *\n *     // Video is now a subclass of mquery() and works the same way but with the\n *     // default query parameters and options set.\n *\n *     // run a query with the previous settings but filter for movies with names\n *     // that start with \"Life\".\n *     Video().where({ name: /^Life/ }).exec(cb);\n *\n * @return {Query} new Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  function CustomQuery(criteria, options) {\n    if (!(this instanceof CustomQuery)) return new CustomQuery(criteria, options);\n    Query.call(this, criteria, options);\n  }\n\n  utils.inherits(CustomQuery, Query); // set inherited defaults\n\n  const p = CustomQuery.prototype;\n  p.options = {};\n  p.setOptions(this.options);\n  p.op = this.op;\n  p._conditions = utils.clone(this._conditions);\n  p._fields = utils.clone(this._fields);\n  p._update = utils.clone(this._update);\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p._traceFunction = this._traceFunction;\n  return CustomQuery;\n};\n/**\n * Sets query options.\n *\n * ####Options:\n *\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors) *\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D) *\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D) *\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D) *\n * - [maxScan](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan) *\n * - [maxTime](http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS) *\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D) *\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment) *\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D) *\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint) *\n * - [slaveOk](http://docs.mongodb.org/manual/applications/replication/#read-preference) *\n * - [safe](http://www.mongodb.org/display/DOCS/getLastError+Command)\n * - collection the collection to query against\n *\n * _* denotes a query helper method is also available_\n *\n * @param {Object} options\n * @api public\n */\n\n\nQuery.prototype.setOptions = function (options) {\n  if (!(options && utils.isObject(options))) return this; // set arbitrary options\n\n  const methods = utils.keys(options);\n  let method;\n\n  for (let i = 0; i < methods.length; ++i) {\n    method = methods[i]; // use methods if exist (safer option manipulation)\n\n    if ('function' == typeof this[method]) {\n      const args = utils.isArray(options[method]) ? options[method] : [options[method]];\n      this[method].apply(this, args);\n    } else {\n      this.options[method] = options[method];\n    }\n  }\n\n  return this;\n};\n/**\n * Sets this Querys collection.\n *\n * @param {Collection} coll\n * @return {Query} this\n */\n\n\nQuery.prototype.collection = function collection(coll) {\n  this._collection = new Query.Collection(coll);\n  return this;\n};\n/**\n * Adds a collation to this op (MongoDB 3.4 and up)\n *\n * ####Example\n *\n *     query.find().collation({ locale: \"en_US\", strength: 1 })\n *\n * @param {Object} value\n * @return {Query} this\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\n * @api public\n */\n\n\nQuery.prototype.collation = function (value) {\n  this.options.collation = value;\n  return this;\n};\n/**\n * Specifies a `$where` condition\n *\n * Use `$where` when you need to select documents using a JavaScript expression.\n *\n * ####Example\n *\n *     query.$where('this.comments.length > 10 || this.name.length > 5')\n *\n *     query.$where(function () {\n *       return this.comments.length > 10 || this.name.length > 5;\n *     })\n *\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @method $where\n * @api public\n */\n\n\nQuery.prototype.$where = function (js) {\n  this._conditions.$where = js;\n  return this;\n};\n/**\n * Specifies a `path` for use with chaining.\n *\n * ####Example\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec(callback)\n *\n * @param {String} [path]\n * @param {Object} [val]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.where = function () {\n  if (!arguments.length) return this;\n  if (!this.op) this.op = 'find';\n  const type = typeof arguments[0];\n\n  if ('string' == type) {\n    this._path = arguments[0];\n\n    if (2 === arguments.length) {\n      this._conditions[this._path] = arguments[1];\n    }\n\n    return this;\n  }\n\n  if ('object' == type && !Array.isArray(arguments[0])) {\n    return this.merge(arguments[0]);\n  }\n\n  throw new TypeError('path must be a string or object');\n};\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * ####Example\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.equals = function equals(val) {\n  this._ensurePath('equals');\n\n  const path = this._path;\n  this._conditions[path] = val;\n  return this;\n};\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n * This is alias of `equals`\n *\n * ####Example\n *\n *     User.where('age').eq(49);\n *\n *     // is the same as\n *\n *     User.shere('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.eq = function eq(val) {\n  this._ensurePath('eq');\n\n  const path = this._path;\n  this._conditions[path] = val;\n  return this;\n};\n/**\n * Specifies arguments for an `$or` condition.\n *\n * ####Example\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.or = function or(array) {\n  const or = this._conditions.$or || (this._conditions.$or = []);\n  if (!utils.isArray(array)) array = [array];\n  or.push.apply(or, array);\n  return this;\n};\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * ####Example\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.nor = function nor(array) {\n  const nor = this._conditions.$nor || (this._conditions.$nor = []);\n  if (!utils.isArray(array)) array = [array];\n  nor.push.apply(nor, array);\n  return this;\n};\n/**\n * Specifies arguments for a `$and` condition.\n *\n * ####Example\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.and = function and(array) {\n  const and = this._conditions.$and || (this._conditions.$and = []);\n  if (!Array.isArray(array)) array = [array];\n  and.push.apply(and, array);\n  return this;\n};\n/**\n * Specifies a $gt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $gte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $ne query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method ne\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $in query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method in\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $nin query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method nin\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $all query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method all\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $size query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method size\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $regex query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method regex\n * @memberOf Query\n * @param {String} [path]\n * @param {String|RegExp} val\n * @api public\n */\n\n/**\n * Specifies a $maxDistance query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method maxDistance\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/*!\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\n *\n *     Thing.where('type').nin(array)\n */\n\n\n'gt gte lt lte ne in nin all regex size maxDistance minDistance'.split(' ').forEach(function ($conditional) {\n  Query.prototype[$conditional] = function () {\n    let path, val;\n\n    if (1 === arguments.length) {\n      this._ensurePath($conditional);\n\n      val = arguments[0];\n      path = this._path;\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n\n    const conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ? this._conditions[path] : this._conditions[path] = {};\n    conds['$' + $conditional] = val;\n    return this;\n  };\n});\n/**\n * Specifies a `$mod` condition\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.mod = function () {\n  let val, path;\n\n  if (1 === arguments.length) {\n    this._ensurePath('mod');\n\n    val = arguments[0];\n    path = this._path;\n  } else if (2 === arguments.length && !utils.isArray(arguments[1])) {\n    this._ensurePath('mod');\n\n    val = slice(arguments);\n    path = this._path;\n  } else if (3 === arguments.length) {\n    val = slice(arguments, 1);\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n};\n/**\n * Specifies an `$exists` condition\n *\n * ####Example\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.exists = function () {\n  let path, val;\n\n  if (0 === arguments.length) {\n    this._ensurePath('exists');\n\n    path = this._path;\n    val = true;\n  } else if (1 === arguments.length) {\n    if ('boolean' === typeof arguments[0]) {\n      this._ensurePath('exists');\n\n      path = this._path;\n      val = arguments[0];\n    } else {\n      path = arguments[0];\n      val = true;\n    }\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$exists = val;\n  return this;\n};\n/**\n * Specifies an `$elemMatch` condition\n *\n * ####Example\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @param {String|Object|Function} path\n * @param {Object|Function} criteria\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.elemMatch = function () {\n  if (null == arguments[0]) throw new TypeError('Invalid argument');\n  let fn, path, criteria;\n\n  if ('function' === typeof arguments[0]) {\n    this._ensurePath('elemMatch');\n\n    path = this._path;\n    fn = arguments[0];\n  } else if (utils.isObject(arguments[0])) {\n    this._ensurePath('elemMatch');\n\n    path = this._path;\n    criteria = arguments[0];\n  } else if ('function' === typeof arguments[1]) {\n    path = arguments[0];\n    fn = arguments[1];\n  } else if (arguments[1] && utils.isObject(arguments[1])) {\n    path = arguments[0];\n    criteria = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  if (fn) {\n    criteria = new Query();\n    fn(criteria);\n    criteria = criteria._conditions;\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$elemMatch = criteria;\n  return this;\n}; // Spatial queries\n\n/**\n * Sugar for geo-spatial queries.\n *\n * ####Example\n *\n *     query.within().box()\n *     query.within().circle()\n *     query.within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * ####NOTE:\n *\n * Must be used after `where()`.\n *\n * @memberOf Query\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.within = function within() {\n  // opinionated, must be used after where\n  this._ensurePath('within');\n\n  this._geoComparison = $withinCmd;\n\n  if (0 === arguments.length) {\n    return this;\n  }\n\n  if (2 === arguments.length) {\n    return this.box.apply(this, arguments);\n  } else if (2 < arguments.length) {\n    return this.polygon.apply(this, arguments);\n  }\n\n  const area = arguments[0];\n  if (!area) throw new TypeError('Invalid argument');\n  if (area.center) return this.circle(area);\n  if (area.box) return this.box.apply(this, area.box);\n  if (area.polygon) return this.polygon.apply(this, area.polygon);\n  if (area.type && area.coordinates) return this.geometry(area);\n  throw new TypeError('Invalid argument');\n};\n/**\n * Specifies a $box condition\n *\n * ####Example\n *\n *     var lowerLeft = [40.73083, -73.99756]\n *     var upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box('loc', lowerLeft, upperRight )\n *\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see Query#within #query_Query-within\n * @param {String} path\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.box = function () {\n  let path, box;\n\n  if (3 === arguments.length) {\n    // box('loc', [], [])\n    path = arguments[0];\n    box = [arguments[1], arguments[2]];\n  } else if (2 === arguments.length) {\n    // box([], [])\n    this._ensurePath('box');\n\n    path = this._path;\n    box = [arguments[0], arguments[1]];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = {\n    $box: box\n  };\n  return this;\n};\n/**\n * Specifies a $polygon condition\n *\n * ####Example\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @param {String|Array} [path]\n * @param {Array|Object} [val]\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n\nQuery.prototype.polygon = function () {\n  let val, path;\n\n  if ('string' == typeof arguments[0]) {\n    // polygon('loc', [],[],[])\n    path = arguments[0];\n    val = slice(arguments, 1);\n  } else {\n    // polygon([],[],[])\n    this._ensurePath('polygon');\n\n    path = this._path;\n    val = slice(arguments);\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = {\n    $polygon: val\n  };\n  return this;\n};\n/**\n * Specifies a $center or $centerSphere condition.\n *\n * ####Example\n *\n *     var area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n *     // for spherical calculations\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n\nQuery.prototype.circle = function () {\n  let path, val;\n\n  if (1 === arguments.length) {\n    this._ensurePath('circle');\n\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  if (!('radius' in val && val.center)) throw new Error('center and radius are required');\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  const type = val.spherical ? '$centerSphere' : '$center';\n  const wKey = this._geoComparison || $withinCmd;\n  conds[wKey] = {};\n  conds[wKey][type] = [val.center, val.radius];\n  if ('unique' in val) conds[wKey].$uniqueDocs = !!val.unique;\n  return this;\n};\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *     query.near({ center: { type: 'Point', coordinates: [..] }})\n *     query.near().geometry({ type: 'Point', coordinates: [..] })\n *\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n\nQuery.prototype.near = function near() {\n  let path, val;\n  this._geoComparison = '$near';\n\n  if (0 === arguments.length) {\n    return this;\n  } else if (1 === arguments.length) {\n    this._ensurePath('near');\n\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  if (!val.center) {\n    throw new Error('center is required');\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  const type = val.spherical ? '$nearSphere' : '$near'; // center could be a GeoJSON object or an Array\n\n  if (Array.isArray(val.center)) {\n    conds[type] = val.center;\n    const radius = 'maxDistance' in val ? val.maxDistance : null;\n\n    if (null != radius) {\n      conds.$maxDistance = radius;\n    }\n\n    if (null != val.minDistance) {\n      conds.$minDistance = val.minDistance;\n    }\n  } else {\n    // GeoJSON?\n    if (val.center.type != 'Point' || !Array.isArray(val.center.coordinates)) {\n      throw new Error(util.format('Invalid GeoJSON specified for %s', type));\n    }\n\n    conds[type] = {\n      $geometry: val.center\n    }; // MongoDB 2.6 insists on maxDistance being in $near / $nearSphere\n\n    if ('maxDistance' in val) {\n      conds[type]['$maxDistance'] = val.maxDistance;\n    }\n\n    if ('minDistance' in val) {\n      conds[type]['$minDistance'] = val.minDistance;\n    }\n  }\n\n  return this;\n};\n/**\n * Declares an intersects query for `geometry()`.\n *\n * ####Example\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * @param {Object} [arg]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.intersects = function intersects() {\n  // opinionated, must be used after where\n  this._ensurePath('intersects');\n\n  this._geoComparison = '$geoIntersects';\n\n  if (0 === arguments.length) {\n    return this;\n  }\n\n  const area = arguments[0];\n  if (null != area && area.type && area.coordinates) return this.geometry(area);\n  throw new TypeError('Invalid argument');\n};\n/**\n * Specifies a `$geometry` condition\n *\n * ####Example\n *\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     var polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * ####NOTE:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * The most recent path passed to `where()` is used.\n *\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @api public\n */\n\n\nQuery.prototype.geometry = function geometry() {\n  if (!('$within' == this._geoComparison || '$geoWithin' == this._geoComparison || '$near' == this._geoComparison || '$geoIntersects' == this._geoComparison)) {\n    throw new Error('geometry() must come after `within()`, `intersects()`, or `near()');\n  }\n\n  let val, path;\n\n  if (1 === arguments.length) {\n    this._ensurePath('geometry');\n\n    path = this._path;\n    val = arguments[0];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  if (!(val.type && Array.isArray(val.coordinates))) {\n    throw new TypeError('Invalid argument');\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison] = {\n    $geometry: val\n  };\n  return this;\n}; // end spatial\n\n/**\n * Specifies which document fields to include or exclude\n *\n * ####String syntax\n *\n * When passing a string, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included.\n *\n * ####Example\n *\n *     // include a and b, exclude c\n *     query.select('a b -c');\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({a: 1, b: 1, c: 0});\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\n\nQuery.prototype.select = function select() {\n  let arg = arguments[0];\n  if (!arg) return this;\n\n  if (arguments.length !== 1) {\n    throw new Error('Invalid select: select only takes 1 argument');\n  }\n\n  this._validate('select');\n\n  const fields = this._fields || (this._fields = {});\n  const type = typeof arg;\n  let i, len;\n\n  if (('string' == type || utils.isArgumentsObject(arg)) && 'number' == typeof arg.length || Array.isArray(arg)) {\n    if ('string' == type) arg = arg.split(/\\s+/);\n\n    for (i = 0, len = arg.length; i < len; ++i) {\n      let field = arg[i];\n      if (!field) continue;\n      const include = '-' == field[0] ? 0 : 1;\n      if (include === 0) field = field.substring(1);\n      fields[field] = include;\n    }\n\n    return this;\n  }\n\n  if (utils.isObject(arg)) {\n    const keys = utils.keys(arg);\n\n    for (i = 0; i < keys.length; ++i) {\n      fields[keys[i]] = arg[keys[i]];\n    }\n\n    return this;\n  }\n\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n};\n/**\n * Specifies a $slice condition for a `path`\n *\n * ####Example\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @api public\n */\n\n\nQuery.prototype.slice = function () {\n  if (0 === arguments.length) return this;\n\n  this._validate('slice');\n\n  let path, val;\n\n  if (1 === arguments.length) {\n    const arg = arguments[0];\n\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const keys = Object.keys(arg);\n      const numKeys = keys.length;\n\n      for (let i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n\n      return this;\n    }\n\n    this._ensurePath('slice');\n\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n\n      path = this._path;\n      val = slice(arguments);\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (3 === arguments.length) {\n    path = arguments[0];\n    val = slice(arguments, 1);\n  }\n\n  const myFields = this._fields || (this._fields = {});\n  myFields[path] = {\n    $slice: val\n  };\n  return this;\n};\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\n *\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n *\n * ####Example\n *\n *     // these are equivalent\n *     query.sort({ field: 'asc', test: -1 });\n *     query.sort('field -test');\n *     query.sort([['field', 1], ['test', -1]]);\n *\n * ####Note\n *\n *  - The array syntax `.sort([['field', 1], ['test', -1]])` can only be used with [mongodb driver >= 2.0.46](https://github.com/mongodb/node-mongodb-native/blob/2.1/HISTORY.md#2046-2015-10-15).\n *  - Cannot be used with `distinct()`\n *\n * @param {Object|String|Array} arg\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.sort = function (arg) {\n  if (!arg) return this;\n  let i, len, field;\n\n  this._validate('sort');\n\n  const type = typeof arg; // .sort([['field', 1], ['test', -1]])\n\n  if (Array.isArray(arg)) {\n    len = arg.length;\n\n    for (i = 0; i < arg.length; ++i) {\n      if (!Array.isArray(arg[i])) {\n        throw new Error('Invalid sort() argument, must be array of arrays');\n      }\n\n      _pushArr(this.options, arg[i][0], arg[i][1]);\n    }\n\n    return this;\n  } // .sort('field -test')\n\n\n  if (1 === arguments.length && 'string' == type) {\n    arg = arg.split(/\\s+/);\n    len = arg.length;\n\n    for (i = 0; i < len; ++i) {\n      field = arg[i];\n      if (!field) continue;\n      const ascend = '-' == field[0] ? -1 : 1;\n      if (ascend === -1) field = field.substring(1);\n      push(this.options, field, ascend);\n    }\n\n    return this;\n  } // .sort({ field: 1, test: -1 })\n\n\n  if (utils.isObject(arg)) {\n    const keys = utils.keys(arg);\n\n    for (i = 0; i < keys.length; ++i) {\n      field = keys[i];\n      push(this.options, field, arg[field]);\n    }\n\n    return this;\n  }\n\n  if (typeof Map !== 'undefined' && arg instanceof Map) {\n    _pushMap(this.options, arg);\n\n    return this;\n  }\n\n  throw new TypeError('Invalid sort() argument. Must be a string, object, or array.');\n};\n/*!\n * @ignore\n */\n\n\nconst _validSortValue = {\n  1: 1,\n  '-1': -1,\n  asc: 1,\n  ascending: 1,\n  desc: -1,\n  descending: -1\n};\n\nfunction push(opts, field, value) {\n  if (Array.isArray(opts.sort)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or object:' + '\\n- `.sort([[\\'field\\', 1], [\\'test\\', -1]])`' + '\\n- `.sort({ field: 1, test: -1 })`');\n  }\n\n  let s;\n\n  if (value && value.$meta) {\n    s = opts.sort || (opts.sort = {});\n    s[field] = {\n      $meta: value.$meta\n    };\n    return;\n  }\n\n  s = opts.sort || (opts.sort = {});\n  let val = String(value || 1).toLowerCase();\n  val = _validSortValue[val];\n  if (!val) throw new TypeError('Invalid sort value: { ' + field + ': ' + value + ' }');\n  s[field] = val;\n}\n\nfunction _pushArr(opts, field, value) {\n  opts.sort = opts.sort || [];\n\n  if (!Array.isArray(opts.sort)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or object:' + '\\n- `.sort([[\\'field\\', 1], [\\'test\\', -1]])`' + '\\n- `.sort({ field: 1, test: -1 })`');\n  }\n\n  let val = String(value || 1).toLowerCase();\n  val = _validSortValue[val];\n  if (!val) throw new TypeError('Invalid sort value: [ ' + field + ', ' + value + ' ]');\n  opts.sort.push([field, val]);\n}\n\nfunction _pushMap(opts, map) {\n  opts.sort = opts.sort || new Map();\n\n  if (!(opts.sort instanceof Map)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or ' + 'object or map consistently');\n  }\n\n  map.forEach(function (value, key) {\n    let val = String(value || 1).toLowerCase();\n    val = _validSortValue[val];\n    if (!val) throw new TypeError('Invalid sort value: < ' + key + ': ' + value + ' >');\n    opts.sort.set(key, val);\n  });\n}\n/**\n * Specifies the limit option.\n *\n * ####Example\n *\n *     query.limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D\n * @api public\n */\n\n/**\n * Specifies the skip option.\n *\n * ####Example\n *\n *     query.skip(100).limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D\n * @api public\n */\n\n/**\n * Specifies the maxScan option.\n *\n * ####Example\n *\n *     query.maxScan(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method maxScan\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan\n * @api public\n */\n\n/**\n * Specifies the batchSize option.\n *\n * ####Example\n *\n *     query.batchSize(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D\n * @api public\n */\n\n/**\n * Specifies the `comment` option.\n *\n * ####Example\n *\n *     query.comment('login query')\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment\n * @api public\n */\n\n/*!\n * limit, skip, maxScan, batchSize, comment\n *\n * Sets these associated options.\n *\n *     query.comment('feed query');\n */\n\n\n['limit', 'skip', 'maxScan', 'batchSize', 'comment'].forEach(function (method) {\n  Query.prototype[method] = function (v) {\n    this._validate(method);\n\n    this.options[method] = v;\n    return this;\n  };\n});\n/**\n * Specifies the maxTimeMS option.\n *\n * ####Example\n *\n *     query.maxTime(100)\n *     query.maxTimeMS(100)\n *\n * @method maxTime\n * @memberOf Query\n * @param {Number} ms\n * @see mongodb http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS\n * @api public\n */\n\nQuery.prototype.maxTime = Query.prototype.maxTimeMS = function (ms) {\n  this._validate('maxTime');\n\n  this.options.maxTimeMS = ms;\n  return this;\n};\n/**\n * Specifies this query as a `snapshot` query.\n *\n * ####Example\n *\n *     mquery().snapshot() // true\n *     mquery().snapshot(true)\n *     mquery().snapshot(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.snapshot = function () {\n  this._validate('snapshot');\n\n  this.options.snapshot = arguments.length ? !!arguments[0] : true;\n  return this;\n};\n/**\n * Sets query hints.\n *\n * ####Example\n *\n *     query.hint({ indexA: 1, indexB: -1});\n *     query.hint('indexA_1_indexB_1');\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|string} val a hint object or the index name\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint\n * @api public\n */\n\n\nQuery.prototype.hint = function () {\n  if (0 === arguments.length) return this;\n\n  this._validate('hint');\n\n  const arg = arguments[0];\n\n  if (utils.isObject(arg)) {\n    const hint = this.options.hint || (this.options.hint = {}); // must keep object keys in order so don't use Object.keys()\n\n    for (const k in arg) {\n      hint[k] = arg[k];\n    }\n\n    return this;\n  }\n\n  if (typeof arg === 'string') {\n    this.options.hint = arg;\n    return this;\n  }\n\n  throw new TypeError('Invalid hint. ' + arg);\n};\n/**\n * Requests acknowledgement that this operation has been persisted to MongoDB's\n * on-disk journal.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the `j` value if it is specified in writeConcern options\n *\n * ####Example:\n *\n *     mquery().w(2).j(true).wtimeout(2000);\n *\n * @method j\n * @memberOf Query\n * @instance\n * @param {boolean} val\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#j-option\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.j = function j(val) {\n  this.options.j = val;\n  return this;\n};\n/**\n * Sets the slaveOk option. _Deprecated_ in MongoDB 2.2 in favor of read preferences.\n *\n * ####Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see read()\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.slaveOk = function (v) {\n  this.options.slaveOk = arguments.length ? !!v : true;\n  return this;\n};\n/**\n * Sets the readPreference option for the query.\n *\n * ####Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // you can also use mongodb.ReadPreference class to also specify tags\n *     new Query().read(mongodb.ReadPreference('secondary', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }]))\n *\n *     new Query().setReadPreference('primary') // alias of .read()\n *\n * ####Preferences:\n *\n *     primary - (default)  Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * Read more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @param {String|ReadPreference} pref one of the listed preference options or their aliases\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.read = Query.prototype.setReadPreference = function (pref) {\n  if (arguments.length > 1 && !Query.prototype.read.deprecationWarningIssued) {\n    console.error('Deprecation warning: \\'tags\\' argument is not supported anymore in Query.read() method. Please use mongodb.ReadPreference object instead.');\n    Query.prototype.read.deprecationWarningIssued = true;\n  }\n\n  this.options.readPreference = utils.readPref(pref);\n  return this;\n};\n/**\n * Sets the readConcern option for the query.\n *\n * ####Example:\n *\n *     new Query().readConcern('local')\n *     new Query().readConcern('l')  // same as local\n *\n *     new Query().readConcern('available')\n *     new Query().readConcern('a')  // same as available\n *\n *     new Query().readConcern('majority')\n *     new Query().readConcern('m')  // same as majority\n *\n *     new Query().readConcern('linearizable')\n *     new Query().readConcern('lz') // same as linearizable\n *\n *     new Query().readConcern('snapshot')\n *     new Query().readConcern('s')  // same as snapshot\n *\n *     new Query().r('s') // r is alias of readConcern\n *\n *\n * ####Read Concern Level:\n *\n *     local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.\n *     linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.\n *     snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern \"majority\", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.\n\n\n *\n *\n * Aliases\n *\n *     l   local\n *     a   available\n *     m   majority\n *     lz  linearizable\n *     s   snapshot\n *\n * Read more about how to use read concern [here](https://docs.mongodb.com/manual/reference/read-concern/).\n *\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.readConcern = Query.prototype.r = function (level) {\n  this.options.readConcern = utils.readConcern(level);\n  return this;\n};\n/**\n * Sets tailable option.\n *\n * ####Example\n *\n *     query.tailable() <== true\n *     query.tailable(true)\n *     query.tailable(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} v defaults to true\n * @see mongodb http://www.mongodb.org/display/DOCS/Tailable+Cursors\n * @api public\n */\n\n\nQuery.prototype.tailable = function () {\n  this._validate('tailable');\n\n  this.options.tailable = arguments.length ? !!arguments[0] : true;\n  return this;\n};\n/**\n * Sets the specified number of `mongod` servers, or tag set of `mongod` servers,\n * that must acknowledge this write before this write is considered successful.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the `w` value if it is specified in writeConcern options\n *\n * ####Example:\n *\n * mquery().writeConcern(0)\n * mquery().writeConcern(1)\n * mquery().writeConcern({ w: 1, j: true, wtimeout: 2000 })\n * mquery().writeConcern('majority')\n * mquery().writeConcern('m') // same as majority\n * mquery().writeConcern('tagSetName') // if the tag set is 'm', use .writeConcern({ w: 'm' }) instead\n * mquery().w(1) // w is alias of writeConcern\n *\n * @method writeConcern\n * @memberOf Query\n * @instance\n * @param {String|number|object} concern 0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://docs.mongodb.com/manual/reference/write-concern/#w-option).\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#w-option\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.writeConcern = Query.prototype.w = function writeConcern(concern) {\n  if ('object' === typeof concern) {\n    if ('undefined' !== typeof concern.j) this.options.j = concern.j;\n    if ('undefined' !== typeof concern.w) this.options.w = concern.w;\n    if ('undefined' !== typeof concern.wtimeout) this.options.wtimeout = concern.wtimeout;\n  } else {\n    this.options.w = 'm' === concern ? 'majority' : concern;\n  }\n\n  return this;\n};\n/**\n * Specifies a time limit, in milliseconds, for the write concern.\n * If `ms > 1`, it is maximum amount of time to wait for this write\n * to propagate through the replica set before this operation fails.\n * The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to `wtimeout` value if it is specified in writeConcern\n *\n * ####Example:\n *\n *     mquery().w(2).j(true).wtimeout(2000)\n *\n * @method wtimeout\n * @memberOf Query\n * @instance\n * @param {number} ms number of milliseconds to wait\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#wtimeout\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.wtimeout = Query.prototype.wTimeout = function wtimeout(ms) {\n  this.options.wtimeout = ms;\n  return this;\n};\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\n\nQuery.prototype.merge = function (source) {\n  if (!source) return this;\n  if (!Query.canMerge(source)) throw new TypeError('Invalid argument. Expected instanceof mquery or plain object');\n\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions);\n    }\n\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields);\n    }\n\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options);\n    }\n\n    if (source._update) {\n      this._update || (this._update = {});\n      utils.mergeClone(this._update, source._update);\n    }\n\n    if (source._distinct) {\n      this._distinct = source._distinct;\n    }\n\n    return this;\n  } // plain object\n\n\n  utils.merge(this._conditions, source);\n  return this;\n};\n/**\n * Finds documents.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.find()\n *     query.find(callback)\n *     query.find({ name: 'Burning Lights' }, callback)\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.find = function (criteria, callback) {\n  this.op = 'find';\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n  const conds = this._conditions;\n\n  const options = this._optionsForExec();\n\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n\n  debug('find', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('find', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.find(conds, options, utils.tick(callback));\n\n  return this;\n};\n/**\n * Returns the query cursor\n *\n * ####Examples\n *\n *     query.find().cursor();\n *     query.cursor({ name: 'Burning Lights' });\n *\n * @param {Object} [criteria] mongodb selector\n * @return {Object} cursor\n * @api public\n */\n\n\nQuery.prototype.cursor = function cursor(criteria) {\n  if (this.op) {\n    if (this.op !== 'find') {\n      throw new TypeError('.cursor only support .find method');\n    }\n  } else {\n    this.find(criteria);\n  }\n\n  const conds = this._conditions;\n\n  const options = this._optionsForExec();\n\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n\n  debug('findCursor', this._collection.collectionName, conds, options);\n  return this._collection.findCursor(conds, options);\n};\n/**\n * Executes the query as a findOne() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.findOne().where('name', /^Burning/);\n *\n *     query.findOne({ name: /^Burning/ })\n *\n *     query.findOne({ name: /^Burning/ }, callback); // executes\n *\n *     query.findOne(function (err, doc) {\n *       if (err) return handleError(err);\n *       if (doc) {\n *         // doc may be null if no document matched\n *\n *       }\n *     });\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.findOne = function (criteria, callback) {\n  this.op = 'findOne';\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n  const conds = this._conditions;\n\n  const options = this._optionsForExec();\n\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n\n  debug('findOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('findOne', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.findOne(conds, options, utils.tick(callback));\n\n  return this;\n};\n/**\n * Exectues the query as a count() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.count().where('color', 'black').exec(callback);\n *\n *     query.count({ color: 'black' }).count(callback)\n *\n *     query.count({ color: 'black' }, callback)\n *\n *     query.where('color', 'black').count(function (err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     })\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Count\n * @api public\n */\n\n\nQuery.prototype.count = function (criteria, callback) {\n  this.op = 'count';\n\n  this._validate();\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n\n  const conds = this._conditions,\n        options = this._optionsForExec();\n\n  debug('count', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('count', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.count(conds, options, utils.tick(callback));\n\n  return this;\n};\n/**\n * Declares or executes a distinct() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     distinct(criteria, field, fn)\n *     distinct(criteria, field)\n *     distinct(field, fn)\n *     distinct(field)\n *     distinct(fn)\n *     distinct()\n *\n * @param {Object|Query} [criteria]\n * @param {String} [field]\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Distinct\n * @api public\n */\n\n\nQuery.prototype.distinct = function (criteria, field, callback) {\n  this.op = 'distinct';\n\n  this._validate();\n\n  if (!callback) {\n    switch (typeof field) {\n      case 'function':\n        callback = field;\n\n        if ('string' == typeof criteria) {\n          field = criteria;\n          criteria = undefined;\n        }\n\n        break;\n\n      case 'undefined':\n      case 'string':\n        break;\n\n      default:\n        throw new TypeError('Invalid `field` argument. Must be string or function');\n    }\n\n    switch (typeof criteria) {\n      case 'function':\n        callback = criteria;\n        criteria = field = undefined;\n        break;\n\n      case 'string':\n        field = criteria;\n        criteria = undefined;\n        break;\n    }\n  }\n\n  if ('string' == typeof field) {\n    this._distinct = field;\n  }\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  if (!this._distinct) {\n    throw new Error('No value for `distinct` has been declared');\n  }\n\n  const conds = this._conditions,\n        options = this._optionsForExec();\n\n  debug('distinct', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('distinct', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.distinct(this._distinct, conds, options, utils.tick(callback));\n\n  return this;\n};\n/**\n * Declare and/or execute this query as an update() operation. By default,\n * `update()` only modifies the _first_ document that matches `criteria`.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     mquery({ _id: id }).update({ title: 'words' }, ...)\n *\n * becomes\n *\n *     collection.update({ _id: id }, { $set: { title: 'words' }}, ...)\n *\n * ####Note\n *\n * Passing an empty object `{}` as the doc will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call update() and then execute it by using the `exec()` method.\n *\n *     var q = mquery(collection).where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\n *\n *     var q = mquery(collection).where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed as unsafe\n *\n *     // keys that are not $atomic ops become $set.\n *     // this executes the same command as the previous example.\n *     q.update({ name: 'bob' }).where({ _id: id }).exec();\n *\n *     var q = mquery(collection).update(); // not executed\n *\n *     // overwriting with empty docs\n *     var q.where({ _id: id }).setOptions({ overwrite: true })\n *     q.update({ }, callback); // executes\n *\n *     // multi update with overwrite to empty doc\n *     var q = mquery(collection).where({ _id: id });\n *     q.setOptions({ multi: true, overwrite: true })\n *     q.update({ });\n *     q.update(callback); // executed\n *\n *     // multi updates\n *     mquery()\n *       .collection(coll)\n *       .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n *     // more multi updates\n *     mquery({ })\n *       .collection(coll)\n *       .setOptions({ multi: true })\n *       .update({ $set: { arr: [] }}, callback)\n *\n *     // single update by default\n *     mquery({ email: 'address@example.com' })\n *      .collection(coll)\n *      .update({ $inc: { counter: 1 }}, callback)\n *\n *     // summary\n *     update(criteria, doc, opts, cb) // executes\n *     update(criteria, doc, opts)\n *     update(criteria, doc, cb) // executes\n *     update(criteria, doc)\n *     update(doc, cb) // executes\n *     update(doc)\n *     update(cb) // executes\n *     update(true) // executes (unsafe write)\n *     update()\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.update = function update(criteria, doc, options, callback) {\n  var force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n\n      break;\n\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n\n      break;\n\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n\n  }\n\n  return _update(this, 'update', criteria, doc, options, force, callback);\n};\n/**\n * Declare and/or execute this query as an `updateMany()` operation. Identical\n * to `update()` except `updateMany()` will update _all_ documents that match\n * `criteria`, rather than just the first one.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     // Update every document whose `title` contains 'test'\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.updateMany = function updateMany(criteria, doc, options, callback) {\n  let force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n\n      break;\n\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n\n      break;\n\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n\n  }\n\n  return _update(this, 'updateMany', criteria, doc, options, force, callback);\n};\n/**\n * Declare and/or execute this query as an `updateOne()` operation. Identical\n * to `update()` except `updateOne()` will _always_ update just one document,\n * regardless of the `multi` option.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     // Update the first document whose `title` contains 'test'\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.updateOne = function updateOne(criteria, doc, options, callback) {\n  let force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n\n      break;\n\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n\n      break;\n\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n\n  }\n\n  return _update(this, 'updateOne', criteria, doc, options, force, callback);\n};\n/**\n * Declare and/or execute this query as an `replaceOne()` operation. Similar\n * to `updateOne()`, except `replaceOne()` is not allowed to use atomic\n * modifiers (`$set`, `$push`, etc.). Calling `replaceOne()` will always\n * replace the existing doc.\n *\n * ####Example\n *\n *     // Replace the document with `_id` 1 with `{ _id: 1, year: 2017 }`\n *     mquery().replaceOne({ _id: 1 }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.replaceOne = function replaceOne(criteria, doc, options, callback) {\n  let force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n\n      break;\n\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n\n      break;\n\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n\n  }\n\n  this.setOptions({\n    overwrite: true\n  });\n  return _update(this, 'replaceOne', criteria, doc, options, force, callback);\n};\n/*!\n * Internal helper for update, updateMany, updateOne\n */\n\n\nfunction _update(query, op, criteria, doc, options, force, callback) {\n  query.op = op;\n\n  if (Query.canMerge(criteria)) {\n    query.merge(criteria);\n  }\n\n  if (doc) {\n    query._mergeUpdate(doc);\n  }\n\n  if (utils.isObject(options)) {\n    // { overwrite: true }\n    query.setOptions(options);\n  } // we are done if we don't have callback and they are\n  // not forcing an unsafe write.\n\n\n  if (!(force || callback)) {\n    return query;\n  }\n\n  if (!query._update || !query.options.overwrite && 0 === utils.keys(query._update).length) {\n    callback && utils.soon(callback.bind(null, null, 0));\n    return query;\n  }\n\n  options = query._optionsForExec();\n  if (!callback) options.safe = false;\n  criteria = query._conditions;\n  doc = query._updateForExec();\n  debug('update', query._collection.collectionName, criteria, doc, options);\n  callback = query._wrapCallback(op, callback, {\n    conditions: criteria,\n    doc: doc,\n    options: options\n  });\n\n  query._collection[op](criteria, doc, options, utils.tick(callback));\n\n  return query;\n}\n/**\n * Declare and/or execute this query as a remove() operation.\n *\n * ####Example\n *\n *     mquery(collection).remove({ artist: 'Anne Murray' }, callback)\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call remove() and then execute it by using the `exec()` method.\n *\n *     // not executed\n *     var query = mquery(collection).remove({ name: 'Anne Murray' })\n *\n *     // executed\n *     mquery(collection).remove({ name: 'Anne Murray' }, callback)\n *     mquery(collection).remove({ name: 'Anne Murray' }).remove(callback)\n *\n *     // executed without a callback (unsafe write)\n *     query.exec()\n *\n *     // summary\n *     query.remove(conds, fn); // executes\n *     query.remove(conds)\n *     query.remove(fn) // executes\n *     query.remove()\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.remove = function (criteria, callback) {\n  this.op = 'remove';\n  let force;\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n\n  if (!(force || callback)) return this;\n\n  const options = this._optionsForExec();\n\n  if (!callback) options.safe = false;\n  const conds = this._conditions;\n  debug('remove', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('remove', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.remove(conds, options, utils.tick(callback));\n\n  return this;\n};\n/**\n * Declare and/or execute this query as a `deleteOne()` operation. Behaves like\n * `remove()`, except for ignores the `justOne` option and always deletes at\n * most one document.\n *\n * ####Example\n *\n *     mquery(collection).deleteOne({ artist: 'Anne Murray' }, callback)\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.deleteOne = function (criteria, callback) {\n  this.op = 'deleteOne';\n  let force;\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n\n  if (!(force || callback)) return this;\n\n  const options = this._optionsForExec();\n\n  if (!callback) options.safe = false;\n  delete options.justOne;\n  const conds = this._conditions;\n  debug('deleteOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('deleteOne', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.deleteOne(conds, options, utils.tick(callback));\n\n  return this;\n};\n/**\n * Declare and/or execute this query as a `deleteMany()` operation. Behaves like\n * `remove()`, except for ignores the `justOne` option and always deletes\n * _every_ document that matches `criteria`.\n *\n * ####Example\n *\n *     mquery(collection).deleteMany({ artist: 'Anne Murray' }, callback)\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.deleteMany = function (criteria, callback) {\n  this.op = 'deleteMany';\n  let force;\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n\n  if (!(force || callback)) return this;\n\n  const options = this._optionsForExec();\n\n  if (!callback) options.safe = false;\n  delete options.justOne;\n  const conds = this._conditions;\n  debug('deleteOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('deleteOne', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.deleteMany(conds, options, utils.tick(callback));\n\n  return this;\n};\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `new`: bool - true to return the modified document rather than the original. defaults to true\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * ####Examples\n *\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update, callback) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update, callback)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate(callback)                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @param {Object|Query} [query]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.findOneAndUpdate = function (criteria, doc, options, callback) {\n  this.op = 'findOneAndUpdate';\n\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = {};\n      }\n\n      break;\n\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n\n      options = undefined;\n      break;\n\n    case 1:\n      if ('function' == typeof criteria) {\n        callback = criteria;\n        criteria = options = doc = undefined;\n      } else {\n        doc = criteria;\n        criteria = options = undefined;\n      }\n\n  }\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } // apply doc\n\n\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  options && this.setOptions(options);\n  if (!callback) return this;\n  const conds = this._conditions;\n\n  const update = this._updateForExec();\n\n  options = this._optionsForExec();\n  return this._collection.findOneAndUpdate(conds, update, options, utils.tick(callback));\n};\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * ####Examples\n *\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     A.where().findOneAndRemove(conditions, callback) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     A.where().findOneAndRemove(callback)   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *     A.where().findOneAndDelete()           // alias of .findOneAndRemove()\n *\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\n\nQuery.prototype.findOneAndRemove = Query.prototype.findOneAndDelete = function (conditions, options, callback) {\n  this.op = 'findOneAndRemove';\n\n  this._validate();\n\n  if ('function' == typeof options) {\n    callback = options;\n    options = undefined;\n  } else if ('function' == typeof conditions) {\n    callback = conditions;\n    conditions = undefined;\n  } // apply conditions\n\n\n  if (Query.canMerge(conditions)) {\n    this.merge(conditions);\n  } // apply options\n\n\n  options && this.setOptions(options);\n  if (!callback) return this;\n  options = this._optionsForExec();\n  const conds = this._conditions;\n  return this._collection.findOneAndDelete(conds, options, utils.tick(callback));\n};\n/**\n * Wrap callback to add tracing\n *\n * @param {Function} callback\n * @param {Object} [queryInfo]\n * @api private\n */\n\n\nQuery.prototype._wrapCallback = function (method, callback, queryInfo) {\n  const traceFunction = this._traceFunction || Query.traceFunction;\n\n  if (traceFunction) {\n    queryInfo.collectionName = this._collection.collectionName;\n    const traceCallback = traceFunction && traceFunction.call(null, method, queryInfo, this);\n    const startTime = new Date().getTime();\n    return function wrapperCallback(err, result) {\n      if (traceCallback) {\n        const millis = new Date().getTime() - startTime;\n        traceCallback.call(null, err, result, millis);\n      }\n\n      if (callback) {\n        callback.apply(null, arguments);\n      }\n    };\n  }\n\n  return callback;\n};\n/**\n * Add trace function that gets called when the query is executed.\n * The function will be called with (method, queryInfo, query) and\n * should return a callback function which will be called\n * with (err, result, millis) when the query is complete.\n *\n * queryInfo is an object containing: {\n *   collectionName: <name of the collection>,\n *   conditions: <query criteria>,\n *   options: <comment, fields, readPreference, etc>,\n *   doc: [document to update, if applicable]\n * }\n *\n * NOTE: Does not trace stream queries.\n *\n * @param {Function} traceFunction\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.setTraceFunction = function (traceFunction) {\n  this._traceFunction = traceFunction;\n  return this;\n};\n/**\n * Executes the query\n *\n * ####Examples\n *\n *     query.exec();\n *     query.exec(callback);\n *     query.exec('update');\n *     query.exec('find', callback);\n *\n * @param {String|Function} [operation]\n * @param {Function} [callback]\n * @api public\n */\n\n\nQuery.prototype.exec = function exec(op, callback) {\n  switch (typeof op) {\n    case 'function':\n      callback = op;\n      op = null;\n      break;\n\n    case 'string':\n      this.op = op;\n      break;\n  }\n\n  assert.ok(this.op, 'Missing query type: (find, update, etc)');\n\n  if ('update' == this.op || 'remove' == this.op) {\n    callback || (callback = true);\n  }\n\n  const _this = this;\n\n  if ('function' == typeof callback) {\n    this[this.op](callback);\n  } else {\n    return new Query.Promise(function (success, error) {\n      _this[_this.op](function (err, val) {\n        if (err) error(err);else success(val);\n        success = error = null;\n      });\n    });\n  }\n};\n/**\n * Returns a thunk which when called runs this.exec()\n *\n * The thunk receives a callback function which will be\n * passed to `this.exec()`\n *\n * @return {Function}\n * @api public\n */\n\n\nQuery.prototype.thunk = function () {\n  const _this = this;\n\n  return function (cb) {\n    _this.exec(cb);\n  };\n};\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\n\nQuery.prototype.then = function (resolve, reject) {\n  const _this = this;\n\n  const promise = new Query.Promise(function (success, error) {\n    _this.exec(function (err, val) {\n      if (err) error(err);else success(val);\n      success = error = null;\n    });\n  });\n  return promise.then(resolve, reject);\n};\n/**\n * Returns a cursor for the given `find` query.\n *\n * @throws Error if operation is not a find\n * @returns {Cursor} MongoDB driver cursor\n */\n\n\nQuery.prototype.cursor = function () {\n  if ('find' != this.op) throw new Error('cursor() is only available for find');\n  const conds = this._conditions;\n\n  const options = this._optionsForExec();\n\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n\n  debug('cursor', this._collection.collectionName, conds, options);\n  return this._collection.findCursor(conds, options);\n};\n/**\n * Determines if field selection has been made.\n *\n * @return {Boolean}\n * @api public\n */\n\n\nQuery.prototype.selected = function selected() {\n  return !!(this._fields && Object.keys(this._fields).length > 0);\n};\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *     query.selectedExlusively() // false\n *\n * @returns {Boolean}\n */\n\n\nQuery.prototype.selectedInclusively = function selectedInclusively() {\n  if (!this._fields) return false;\n  const keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    if (0 === this._fields[key]) return false;\n\n    if (this._fields[key] && typeof this._fields[key] === 'object' && this._fields[key].$meta) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExlusively() // false\n *     query.select('-name')\n *     query.selectedExlusively() // true\n *     query.selectedInclusively() // false\n *\n * @returns {Boolean}\n */\n\n\nQuery.prototype.selectedExclusively = function selectedExclusively() {\n  if (!this._fields) return false;\n  const keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    if (0 === this._fields[key]) return true;\n  }\n\n  return false;\n};\n/**\n * Merges `doc` with the current update object.\n *\n * @param {Object} doc\n */\n\n\nQuery.prototype._mergeUpdate = function (doc) {\n  if (!this._update) this._update = {};\n\n  if (doc instanceof Query) {\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else {\n    utils.mergeClone(this._update, doc);\n  }\n};\n/**\n * Returns default options.\n *\n * @return {Object}\n * @api private\n */\n\n\nQuery.prototype._optionsForExec = function () {\n  const options = utils.clone(this.options);\n  return options;\n};\n/**\n * Returns fields selection for this query.\n *\n * @return {Object}\n * @api private\n */\n\n\nQuery.prototype._fieldsForExec = function () {\n  return utils.clone(this._fields);\n};\n/**\n * Return an update document with corrected $set operations.\n *\n * @api private\n */\n\n\nQuery.prototype._updateForExec = function () {\n  const update = utils.clone(this._update);\n  const ops = utils.keys(update);\n  const ret = {};\n\n  for (const op of ops) {\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n\n      ret.$set[op] = update[op];\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n\n  this._compiledUpdate = ret;\n  return ret;\n};\n/**\n * Make sure _path is set.\n *\n * @parmam {String} method\n */\n\n\nQuery.prototype._ensurePath = function (method) {\n  if (!this._path) {\n    const msg = method + '() must be used after where() ' + 'when called with these arguments';\n    throw new Error(msg);\n  }\n};\n/*!\n * Permissions\n */\n\n\nQuery.permissions = require('./permissions');\n\nQuery._isPermitted = function (a, b) {\n  const denied = Query.permissions[b];\n  if (!denied) return true;\n  return true !== denied[a];\n};\n\nQuery.prototype._validate = function (action) {\n  let fail;\n  let validator;\n\n  if (undefined === action) {\n    validator = Query.permissions[this.op];\n    if ('function' != typeof validator) return true;\n    fail = validator(this);\n  } else if (!Query._isPermitted(action, this.op)) {\n    fail = action;\n  }\n\n  if (fail) {\n    throw new Error(fail + ' cannot be used with ' + this.op);\n  }\n};\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @param {Object} conds\n * @return {Boolean}\n */\n\n\nQuery.canMerge = function (conds) {\n  return conds instanceof Query || utils.isObject(conds);\n};\n/**\n * Set a trace function that will get called whenever a\n * query is executed.\n *\n * See `setTraceFunction()` for details.\n *\n * @param {Object} conds\n * @return {Boolean}\n */\n\n\nQuery.setGlobalTraceFunction = function (traceFunction) {\n  Query.traceFunction = traceFunction;\n};\n/*!\n * Exports.\n */\n\n\nQuery.utils = utils;\nQuery.env = require('./env');\nQuery.Collection = require('./collection');\nQuery.BaseCollection = require('./collection/collection');\nQuery.Promise = Promise;\nmodule.exports = exports = Query; // TODO\n// test utils","map":{"version":3,"sources":["/home/gregorian/calendar-ui/node_modules/mquery/lib/mquery.js"],"names":["slice","require","assert","util","utils","debug","Query","criteria","options","proto","constructor","prototype","op","undefined","Object","assign","_conditions","clone","_fields","_update","_path","_distinct","_collection","_traceFunction","setOptions","find","remove","update","collection","$withinCmd","defineProperty","get","set","v","toConstructor","CustomQuery","call","inherits","p","isObject","methods","keys","method","i","length","args","isArray","apply","coll","Collection","collation","value","$where","js","where","arguments","type","Array","merge","TypeError","equals","val","_ensurePath","path","eq","or","array","$or","push","nor","$nor","and","$and","split","forEach","$conditional","conds","mod","$mod","exists","$exists","elemMatch","fn","$elemMatch","within","_geoComparison","box","polygon","area","center","circle","coordinates","geometry","$box","$polygon","Error","spherical","wKey","radius","$uniqueDocs","unique","near","maxDistance","$maxDistance","minDistance","$minDistance","format","$geometry","intersects","select","arg","_validate","fields","len","isArgumentsObject","field","include","substring","numKeys","myFields","$slice","sort","_pushArr","ascend","Map","_pushMap","_validSortValue","asc","ascending","desc","descending","opts","s","$meta","String","toLowerCase","map","key","maxTime","maxTimeMS","ms","snapshot","hint","k","j","slaveOk","read","setReadPreference","pref","deprecationWarningIssued","console","error","readPreference","readPref","readConcern","r","level","tailable","writeConcern","w","concern","wtimeout","wTimeout","source","canMerge","mergeClone","callback","_optionsForExec","$useProjection","projection","_fieldsForExec","collectionName","_wrapCallback","conditions","tick","cursor","findCursor","findOne","count","distinct","doc","force","updateMany","updateOne","replaceOne","overwrite","query","_mergeUpdate","soon","bind","safe","_updateForExec","deleteOne","justOne","deleteMany","findOneAndUpdate","findOneAndRemove","findOneAndDelete","queryInfo","traceFunction","traceCallback","startTime","Date","getTime","wrapperCallback","err","result","millis","setTraceFunction","exec","ok","_this","Promise","success","thunk","cb","then","resolve","reject","promise","selected","selectedInclusively","selectedExclusively","ops","ret","$set","indexOf","_compiledUpdate","msg","permissions","_isPermitted","a","b","denied","action","fail","validator","setGlobalTraceFunction","env","BaseCollection","module","exports"],"mappings":"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IAAP;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA5D,KAAK,CAACK,SAAN,CAAgB0D,GAAhB,GAAsB,SAASA,GAAT,CAAaH,KAAb,EAAoB;AACxC,QAAMG,GAAG,GAAG,KAAKrD,WAAL,CAAiBsD,IAAjB,KAA0B,KAAKtD,WAAL,CAAiBsD,IAAjB,GAAwB,EAAlD,CAAZ;AACA,MAAI,CAAClE,KAAK,CAAC0C,OAAN,CAAcoB,KAAd,CAAL,EAA2BA,KAAK,GAAG,CAACA,KAAD,CAAR;AAC3BG,EAAAA,GAAG,CAACD,IAAJ,CAASrB,KAAT,CAAesB,GAAf,EAAoBH,KAApB;AACA,SAAO,IAAP;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA5D,KAAK,CAACK,SAAN,CAAgB4D,GAAhB,GAAsB,SAASA,GAAT,CAAaL,KAAb,EAAoB;AACxC,QAAMK,GAAG,GAAG,KAAKvD,WAAL,CAAiBwD,IAAjB,KAA0B,KAAKxD,WAAL,CAAiBwD,IAAjB,GAAwB,EAAlD,CAAZ;AACA,MAAI,CAACf,KAAK,CAACX,OAAN,CAAcoB,KAAd,CAAL,EAA2BA,KAAK,GAAG,CAACA,KAAD,CAAR;AAC3BK,EAAAA,GAAG,CAACH,IAAJ,CAASrB,KAAT,CAAewB,GAAf,EAAoBL,KAApB;AACA,SAAO,IAAP;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;A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AI,CAACA,GAAL,EAAU,MAAM,IAAIF,SAAJ,CAAc,2BAA2B8E,GAA3B,GAAiC,IAAjC,GAAwCtF,KAAxC,GAAgD,IAA9D,CAAN;AAEVgF,IAAAA,IAAI,CAACV,IAAL,CAAUzF,GAAV,CAAcyG,GAAd,EAAmB5E,GAAnB;AACD,GAND;AAOD;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,CAAC,OAAD,EAAU,MAAV,EAAkB,SAAlB,EAA6B,WAA7B,EAA0C,SAA1C,EAAqDa,OAArD,CAA6D,UAAShC,MAAT,EAAiB;AAC5EpC,EAAAA,KAAK,CAACK,SAAN,CAAgB+B,MAAhB,IAA0B,UAAST,CAAT,EAAY;AACpC,SAAK8E,SAAL,CAAerE,MAAf;;AACA,SAAKlC,OAAL,CAAakC,MAAb,IAAuBT,CAAvB;AACA,WAAO,IAAP;AACD,GAJD;AAKD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA3B,KAAK,CAACK,SAAN,CAAgB+H,OAAhB,GAA0BpI,KAAK,CAACK,SAAN,CAAgBgI,SAAhB,GAA4B,UAASC,EAAT,EAAa;AACjE,OAAK7B,SAAL,CAAe,SAAf;;AACA,OAAKvG,OAAL,CAAamI,SAAb,GAAyBC,EAAzB;AACA,SAAO,IAAP;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAtI,KAAK,CAACK,SAAN,CAAgBkI,QAAhB,GAA2B,YAAW;AACpC,OAAK9B,SAAL,CAAe,UAAf;;AAEA,OAAKvG,OAAL,CAAaqI,QAAb,GAAwBtF,SAAS,CAACX,MAAV,GACpB,CAAC,CAACW,SAAS,CAAC,CAAD,CADS,GAEpB,IAFJ;AAIA,SAAO,IAAP;AACD,CARD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAjD,KAAK,CAACK,SAAN,CAAgBmI,IAAhB,GAAuB,YAAW;AAChC,MAAI,MAAMvF,SAAS,CAACX,MAApB,EAA4B,OAAO,IAAP;;AAE5B,OAAKmE,SAAL,CAAe,MAAf;;AAEA,QAAMD,GAAG,GAAGvD,SAAS,CAAC,CAAD,CAArB;;AACA,MAAInD,KAAK,CAACmC,QAAN,CAAeuE,GAAf,CAAJ,EAAyB;AACvB,UAAMgC,IAAI,GAAG,KAAKtI,OAAL,CAAasI,IAAb,KAAsB,KAAKtI,OAAL,CAAasI,IAAb,GAAoB,EAA1C,CAAb,CADuB,CAGvB;;AACA,SAAK,MAAMC,CAAX,IAAgBjC,GAAhB,EAAqB;AACnBgC,MAAAA,IAAI,CAACC,CAAD,CAAJ,GAAUjC,GAAG,CAACiC,CAAD,CAAb;AACD;;AAED,WAAO,IAAP;AACD;;AACD,MAAI,OAAOjC,GAAP,KAAe,QAAnB,EAA6B;AAC3B,SAAKtG,OAAL,CAAasI,IAAb,GAAoBhC,GAApB;AACA,WAAO,IAAP;AACD;;AAED,QAAM,IAAInD,SAAJ,CAAc,mBAAmBmD,GAAjC,CAAN;AACD,CAtBD;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAxG,KAAK,CAACK,SAAN,CAAgBqI,CAAhB,GAAoB,SAASA,CAAT,CAAWnF,GAAX,EAAgB;AAClC,OAAKrD,OAAL,CAAawI,CAAb,GAAiBnF,GAAjB;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAvD,KAAK,CAACK,SAAN,CAAgBsI,OAAhB,GAA0B,UAAShH,CAAT,EAAY;AACpC,OAAKzB,OAAL,CAAayI,OAAb,GAAuB1F,SAAS,CAACX,MAAV,GAAmB,CAAC,CAACX,CAArB,GAAyB,IAAhD;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA3B,KAAK,CAACK,SAAN,CAAgBuI,IAAhB,GAAuB5I,KAAK,CAACK,SAAN,CAAgBwI,iBAAhB,GAAoC,UAASC,IAAT,EAAe;AACxE,MAAI7F,SAAS,CAACX,MAAV,GAAmB,CAAnB,IAAwB,CAACtC,KAAK,CAACK,SAAN,CAAgBuI,IAAhB,CAAqBG,wBAAlD,EAA4E;AAC1EC,IAAAA,OAAO,CAACC,KAAR,CAAc,2IAAd;AACAjJ,IAAAA,KAAK,CAACK,SAAN,CAAgBuI,IAAhB,CAAqBG,wBAArB,GAAgD,IAAhD;AACD;;AACD,OAAK7I,OAAL,CAAagJ,cAAb,GAA8BpJ,KAAK,CAACqJ,QAAN,CAAeL,IAAf,CAA9B;AACA,SAAO,IAAP;AACD,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\n\nconst slice = require('sliced');\nconst assert = require('assert');\nconst util = require('util');\nconst utils = require('./utils');\nconst debug = require('debug')('mquery');\n\n/* global Map */\n\n/**\n * Query constructor used for building queries.\n *\n * ####Example:\n *\n *     var query = new Query({ name: 'mquery' });\n *     query.setOptions({ collection: moduleCollection })\n *     query.where('age').gte(21).exec(callback);\n *\n * @param {Object} [criteria]\n * @param {Object} [options]\n * @api public\n */\n\nfunction Query(criteria, options) {\n  if (!(this instanceof Query))\n    return new Query(criteria, options);\n\n  const proto = this.constructor.prototype;\n\n  this.op = proto.op || undefined;\n\n  this.options = Object.assign({}, proto.options);\n\n  this._conditions = proto._conditions\n    ? utils.clone(proto._conditions)\n    : {};\n\n  this._fields = proto._fields\n    ? utils.clone(proto._fields)\n    : undefined;\n\n  this._update = proto._update\n    ? utils.clone(proto._update)\n    : undefined;\n\n  this._path = proto._path || undefined;\n  this._distinct = proto._distinct || undefined;\n  this._collection = proto._collection || undefined;\n  this._traceFunction = proto._traceFunction || undefined;\n\n  if (options) {\n    this.setOptions(options);\n  }\n\n  if (criteria) {\n    if (criteria.find && criteria.remove && criteria.update) {\n      // quack quack!\n      this.collection(criteria);\n    } else {\n      this.find(criteria);\n    }\n  }\n}\n\n/**\n * This is a parameter that the user can set which determines if mquery\n * uses $within or $geoWithin for queries. It defaults to true which\n * means $geoWithin will be used. If using MongoDB < 2.4 you should\n * set this to false.\n *\n * @api public\n * @property use$geoWithin\n */\n\nlet $withinCmd = '$geoWithin';\nObject.defineProperty(Query, 'use$geoWithin', {\n  get: function() { return $withinCmd == '$geoWithin'; },\n  set: function(v) {\n    if (true === v) {\n      // mongodb >= 2.4\n      $withinCmd = '$geoWithin';\n    } else {\n      $withinCmd = '$within';\n    }\n  }\n});\n\n/**\n * Converts this query to a constructor function with all arguments and options retained.\n *\n * ####Example\n *\n *     // Create a query that will read documents with a \"video\" category from\n *     // `aCollection` on the primary node in the replica-set unless it is down,\n *     // in which case we'll read from a secondary node.\n *     var query = mquery({ category: 'video' })\n *     query.setOptions({ collection: aCollection, read: 'primaryPreferred' });\n *\n *     // create a constructor based off these settings\n *     var Video = query.toConstructor();\n *\n *     // Video is now a subclass of mquery() and works the same way but with the\n *     // default query parameters and options set.\n *\n *     // run a query with the previous settings but filter for movies with names\n *     // that start with \"Life\".\n *     Video().where({ name: /^Life/ }).exec(cb);\n *\n * @return {Query} new Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  function CustomQuery(criteria, options) {\n    if (!(this instanceof CustomQuery))\n      return new CustomQuery(criteria, options);\n    Query.call(this, criteria, options);\n  }\n\n  utils.inherits(CustomQuery, Query);\n\n  // set inherited defaults\n  const p = CustomQuery.prototype;\n\n  p.options = {};\n  p.setOptions(this.options);\n\n  p.op = this.op;\n  p._conditions = utils.clone(this._conditions);\n  p._fields = utils.clone(this._fields);\n  p._update = utils.clone(this._update);\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p._traceFunction = this._traceFunction;\n\n  return CustomQuery;\n};\n\n/**\n * Sets query options.\n *\n * ####Options:\n *\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors) *\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D) *\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D) *\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D) *\n * - [maxScan](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan) *\n * - [maxTime](http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS) *\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D) *\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment) *\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D) *\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint) *\n * - [slaveOk](http://docs.mongodb.org/manual/applications/replication/#read-preference) *\n * - [safe](http://www.mongodb.org/display/DOCS/getLastError+Command)\n * - collection the collection to query against\n *\n * _* denotes a query helper method is also available_\n *\n * @param {Object} options\n * @api public\n */\n\nQuery.prototype.setOptions = function(options) {\n  if (!(options && utils.isObject(options)))\n    return this;\n\n  // set arbitrary options\n  const methods = utils.keys(options);\n  let method;\n\n  for (let i = 0; i < methods.length; ++i) {\n    method = methods[i];\n\n    // use methods if exist (safer option manipulation)\n    if ('function' == typeof this[method]) {\n      const args = utils.isArray(options[method])\n        ? options[method]\n        : [options[method]];\n      this[method].apply(this, args);\n    } else {\n      this.options[method] = options[method];\n    }\n  }\n\n  return this;\n};\n\n/**\n * Sets this Querys collection.\n *\n * @param {Collection} coll\n * @return {Query} this\n */\n\nQuery.prototype.collection = function collection(coll) {\n  this._collection = new Query.Collection(coll);\n\n  return this;\n};\n\n/**\n * Adds a collation to this op (MongoDB 3.4 and up)\n *\n * ####Example\n *\n *     query.find().collation({ locale: \"en_US\", strength: 1 })\n *\n * @param {Object} value\n * @return {Query} this\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\n * @api public\n */\n\nQuery.prototype.collation = function(value) {\n  this.options.collation = value;\n  return this;\n};\n\n/**\n * Specifies a `$where` condition\n *\n * Use `$where` when you need to select documents using a JavaScript expression.\n *\n * ####Example\n *\n *     query.$where('this.comments.length > 10 || this.name.length > 5')\n *\n *     query.$where(function () {\n *       return this.comments.length > 10 || this.name.length > 5;\n *     })\n *\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @method $where\n * @api public\n */\n\nQuery.prototype.$where = function(js) {\n  this._conditions.$where = js;\n  return this;\n};\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * ####Example\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec(callback)\n *\n * @param {String} [path]\n * @param {Object} [val]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.where = function() {\n  if (!arguments.length) return this;\n  if (!this.op) this.op = 'find';\n\n  const type = typeof arguments[0];\n\n  if ('string' == type) {\n    this._path = arguments[0];\n\n    if (2 === arguments.length) {\n      this._conditions[this._path] = arguments[1];\n    }\n\n    return this;\n  }\n\n  if ('object' == type && !Array.isArray(arguments[0])) {\n    return this.merge(arguments[0]);\n  }\n\n  throw new TypeError('path must be a string or object');\n};\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * ####Example\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.equals = function equals(val) {\n  this._ensurePath('equals');\n  const path = this._path;\n  this._conditions[path] = val;\n  return this;\n};\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n * This is alias of `equals`\n *\n * ####Example\n *\n *     User.where('age').eq(49);\n *\n *     // is the same as\n *\n *     User.shere('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.eq = function eq(val) {\n  this._ensurePath('eq');\n  const path = this._path;\n  this._conditions[path] = val;\n  return this;\n};\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * ####Example\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.or = function or(array) {\n  const or = this._conditions.$or || (this._conditions.$or = []);\n  if (!utils.isArray(array)) array = [array];\n  or.push.apply(or, array);\n  return this;\n};\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * ####Example\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.nor = function nor(array) {\n  const nor = this._conditions.$nor || (this._conditions.$nor = []);\n  if (!utils.isArray(array)) array = [array];\n  nor.push.apply(nor, array);\n  return this;\n};\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * ####Example\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.and = function and(array) {\n  const and = this._conditions.$and || (this._conditions.$and = []);\n  if (!Array.isArray(array)) array = [array];\n  and.push.apply(and, array);\n  return this;\n};\n\n/**\n * Specifies a $gt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $gte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $ne query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method ne\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $in query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method in\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $nin query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method nin\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $all query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method all\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $size query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method size\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $regex query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method regex\n * @memberOf Query\n * @param {String} [path]\n * @param {String|RegExp} val\n * @api public\n */\n\n/**\n * Specifies a $maxDistance query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method maxDistance\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/*!\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\n *\n *     Thing.where('type').nin(array)\n */\n\n'gt gte lt lte ne in nin all regex size maxDistance minDistance'.split(' ').forEach(function($conditional) {\n  Query.prototype[$conditional] = function() {\n    let path, val;\n\n    if (1 === arguments.length) {\n      this._ensurePath($conditional);\n      val = arguments[0];\n      path = this._path;\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n\n    const conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ?\n      this._conditions[path] :\n      (this._conditions[path] = {});\n    conds['$' + $conditional] = val;\n    return this;\n  };\n});\n\n/**\n * Specifies a `$mod` condition\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.mod = function() {\n  let val, path;\n\n  if (1 === arguments.length) {\n    this._ensurePath('mod');\n    val = arguments[0];\n    path = this._path;\n  } else if (2 === arguments.length && !utils.isArray(arguments[1])) {\n    this._ensurePath('mod');\n    val = slice(arguments);\n    path = this._path;\n  } else if (3 === arguments.length) {\n    val = slice(arguments, 1);\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n};\n\n/**\n * Specifies an `$exists` condition\n *\n * ####Example\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.exists = function() {\n  let path, val;\n\n  if (0 === arguments.length) {\n    this._ensurePath('exists');\n    path = this._path;\n    val = true;\n  } else if (1 === arguments.length) {\n    if ('boolean' === typeof arguments[0]) {\n      this._ensurePath('exists');\n      path = this._path;\n      val = arguments[0];\n    } else {\n      path = arguments[0];\n      val = true;\n    }\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$exists = val;\n  return this;\n};\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * ####Example\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @param {String|Object|Function} path\n * @param {Object|Function} criteria\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.elemMatch = function() {\n  if (null == arguments[0])\n    throw new TypeError('Invalid argument');\n\n  let fn, path, criteria;\n\n  if ('function' === typeof arguments[0]) {\n    this._ensurePath('elemMatch');\n    path = this._path;\n    fn = arguments[0];\n  } else if (utils.isObject(arguments[0])) {\n    this._ensurePath('elemMatch');\n    path = this._path;\n    criteria = arguments[0];\n  } else if ('function' === typeof arguments[1]) {\n    path = arguments[0];\n    fn = arguments[1];\n  } else if (arguments[1] && utils.isObject(arguments[1])) {\n    path = arguments[0];\n    criteria = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  if (fn) {\n    criteria = new Query;\n    fn(criteria);\n    criteria = criteria._conditions;\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$elemMatch = criteria;\n  return this;\n};\n\n// Spatial queries\n\n/**\n * Sugar for geo-spatial queries.\n *\n * ####Example\n *\n *     query.within().box()\n *     query.within().circle()\n *     query.within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * ####NOTE:\n *\n * Must be used after `where()`.\n *\n * @memberOf Query\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.within = function within() {\n  // opinionated, must be used after where\n  this._ensurePath('within');\n  this._geoComparison = $withinCmd;\n\n  if (0 === arguments.length) {\n    return this;\n  }\n\n  if (2 === arguments.length) {\n    return this.box.apply(this, arguments);\n  } else if (2 < arguments.length) {\n    return this.polygon.apply(this, arguments);\n  }\n\n  const area = arguments[0];\n\n  if (!area)\n    throw new TypeError('Invalid argument');\n\n  if (area.center)\n    return this.circle(area);\n\n  if (area.box)\n    return this.box.apply(this, area.box);\n\n  if (area.polygon)\n    return this.polygon.apply(this, area.polygon);\n\n  if (area.type && area.coordinates)\n    return this.geometry(area);\n\n  throw new TypeError('Invalid argument');\n};\n\n/**\n * Specifies a $box condition\n *\n * ####Example\n *\n *     var lowerLeft = [40.73083, -73.99756]\n *     var upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box('loc', lowerLeft, upperRight )\n *\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see Query#within #query_Query-within\n * @param {String} path\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.box = function() {\n  let path, box;\n\n  if (3 === arguments.length) {\n    // box('loc', [], [])\n    path = arguments[0];\n    box = [arguments[1], arguments[2]];\n  } else if (2 === arguments.length) {\n    // box([], [])\n    this._ensurePath('box');\n    path = this._path;\n    box = [arguments[0], arguments[1]];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = { $box: box };\n  return this;\n};\n\n/**\n * Specifies a $polygon condition\n *\n * ####Example\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @param {String|Array} [path]\n * @param {Array|Object} [val]\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.polygon = function() {\n  let val, path;\n\n  if ('string' == typeof arguments[0]) {\n    // polygon('loc', [],[],[])\n    path = arguments[0];\n    val = slice(arguments, 1);\n  } else {\n    // polygon([],[],[])\n    this._ensurePath('polygon');\n    path = this._path;\n    val = slice(arguments);\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = { $polygon: val };\n  return this;\n};\n\n/**\n * Specifies a $center or $centerSphere condition.\n *\n * ####Example\n *\n *     var area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n *     // for spherical calculations\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.circle = function() {\n  let path, val;\n\n  if (1 === arguments.length) {\n    this._ensurePath('circle');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  if (!('radius' in val && val.center))\n    throw new Error('center and radius are required');\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n\n  const type = val.spherical\n    ? '$centerSphere'\n    : '$center';\n\n  const wKey = this._geoComparison || $withinCmd;\n  conds[wKey] = {};\n  conds[wKey][type] = [val.center, val.radius];\n\n  if ('unique' in val)\n    conds[wKey].$uniqueDocs = !!val.unique;\n\n  return this;\n};\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *     query.near({ center: { type: 'Point', coordinates: [..] }})\n *     query.near().geometry({ type: 'Point', coordinates: [..] })\n *\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.near = function near() {\n  let path, val;\n\n  this._geoComparison = '$near';\n\n  if (0 === arguments.length) {\n    return this;\n  } else if (1 === arguments.length) {\n    this._ensurePath('near');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  if (!val.center) {\n    throw new Error('center is required');\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n\n  const type = val.spherical\n    ? '$nearSphere'\n    : '$near';\n\n  // center could be a GeoJSON object or an Array\n  if (Array.isArray(val.center)) {\n    conds[type] = val.center;\n\n    const radius = 'maxDistance' in val\n      ? val.maxDistance\n      : null;\n\n    if (null != radius) {\n      conds.$maxDistance = radius;\n    }\n    if (null != val.minDistance) {\n      conds.$minDistance = val.minDistance;\n    }\n  } else {\n    // GeoJSON?\n    if (val.center.type != 'Point' || !Array.isArray(val.center.coordinates)) {\n      throw new Error(util.format('Invalid GeoJSON specified for %s', type));\n    }\n    conds[type] = { $geometry: val.center };\n\n    // MongoDB 2.6 insists on maxDistance being in $near / $nearSphere\n    if ('maxDistance' in val) {\n      conds[type]['$maxDistance'] = val.maxDistance;\n    }\n    if ('minDistance' in val) {\n      conds[type]['$minDistance'] = val.minDistance;\n    }\n  }\n\n  return this;\n};\n\n/**\n * Declares an intersects query for `geometry()`.\n *\n * ####Example\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * @param {Object} [arg]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.intersects = function intersects() {\n  // opinionated, must be used after where\n  this._ensurePath('intersects');\n\n  this._geoComparison = '$geoIntersects';\n\n  if (0 === arguments.length) {\n    return this;\n  }\n\n  const area = arguments[0];\n\n  if (null != area && area.type && area.coordinates)\n    return this.geometry(area);\n\n  throw new TypeError('Invalid argument');\n};\n\n/**\n * Specifies a `$geometry` condition\n *\n * ####Example\n *\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     var polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * ####NOTE:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * The most recent path passed to `where()` is used.\n *\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @api public\n */\n\nQuery.prototype.geometry = function geometry() {\n  if (!('$within' == this._geoComparison ||\n        '$geoWithin' == this._geoComparison ||\n        '$near' == this._geoComparison ||\n        '$geoIntersects' == this._geoComparison)) {\n    throw new Error('geometry() must come after `within()`, `intersects()`, or `near()');\n  }\n\n  let val, path;\n\n  if (1 === arguments.length) {\n    this._ensurePath('geometry');\n    path = this._path;\n    val = arguments[0];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n\n  if (!(val.type && Array.isArray(val.coordinates))) {\n    throw new TypeError('Invalid argument');\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison] = { $geometry: val };\n\n  return this;\n};\n\n// end spatial\n\n/**\n * Specifies which document fields to include or exclude\n *\n * ####String syntax\n *\n * When passing a string, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included.\n *\n * ####Example\n *\n *     // include a and b, exclude c\n *     query.select('a b -c');\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({a: 1, b: 1, c: 0});\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\nQuery.prototype.select = function select() {\n  let arg = arguments[0];\n  if (!arg) return this;\n\n  if (arguments.length !== 1) {\n    throw new Error('Invalid select: select only takes 1 argument');\n  }\n\n  this._validate('select');\n\n  const fields = this._fields || (this._fields = {});\n  const type = typeof arg;\n  let i, len;\n\n  if (('string' == type || utils.isArgumentsObject(arg)) &&\n    'number' == typeof arg.length || Array.isArray(arg)) {\n    if ('string' == type)\n      arg = arg.split(/\\s+/);\n\n    for (i = 0, len = arg.length; i < len; ++i) {\n      let field = arg[i];\n      if (!field) continue;\n      const include = '-' == field[0] ? 0 : 1;\n      if (include === 0) field = field.substring(1);\n      fields[field] = include;\n    }\n\n    return this;\n  }\n\n  if (utils.isObject(arg)) {\n    const keys = utils.keys(arg);\n    for (i = 0; i < keys.length; ++i) {\n      fields[keys[i]] = arg[keys[i]];\n    }\n    return this;\n  }\n\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n};\n\n/**\n * Specifies a $slice condition for a `path`\n *\n * ####Example\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @api public\n */\n\nQuery.prototype.slice = function() {\n  if (0 === arguments.length)\n    return this;\n\n  this._validate('slice');\n\n  let path, val;\n\n  if (1 === arguments.length) {\n    const arg = arguments[0];\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const keys = Object.keys(arg);\n      const numKeys = keys.length;\n      for (let i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n      return this;\n    }\n    this._ensurePath('slice');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n      path = this._path;\n      val = slice(arguments);\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (3 === arguments.length) {\n    path = arguments[0];\n    val = slice(arguments, 1);\n  }\n\n  const myFields = this._fields || (this._fields = {});\n  myFields[path] = { $slice: val };\n  return this;\n};\n\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\n *\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n *\n * ####Example\n *\n *     // these are equivalent\n *     query.sort({ field: 'asc', test: -1 });\n *     query.sort('field -test');\n *     query.sort([['field', 1], ['test', -1]]);\n *\n * ####Note\n *\n *  - The array syntax `.sort([['field', 1], ['test', -1]])` can only be used with [mongodb driver >= 2.0.46](https://github.com/mongodb/node-mongodb-native/blob/2.1/HISTORY.md#2046-2015-10-15).\n *  - Cannot be used with `distinct()`\n *\n * @param {Object|String|Array} arg\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.sort = function(arg) {\n  if (!arg) return this;\n  let i, len, field;\n\n  this._validate('sort');\n\n  const type = typeof arg;\n\n  // .sort([['field', 1], ['test', -1]])\n  if (Array.isArray(arg)) {\n    len = arg.length;\n    for (i = 0; i < arg.length; ++i) {\n      if (!Array.isArray(arg[i])) {\n        throw new Error('Invalid sort() argument, must be array of arrays');\n      }\n      _pushArr(this.options, arg[i][0], arg[i][1]);\n    }\n    return this;\n  }\n\n  // .sort('field -test')\n  if (1 === arguments.length && 'string' == type) {\n    arg = arg.split(/\\s+/);\n    len = arg.length;\n    for (i = 0; i < len; ++i) {\n      field = arg[i];\n      if (!field) continue;\n      const ascend = '-' == field[0] ? -1 : 1;\n      if (ascend === -1) field = field.substring(1);\n      push(this.options, field, ascend);\n    }\n\n    return this;\n  }\n\n  // .sort({ field: 1, test: -1 })\n  if (utils.isObject(arg)) {\n    const keys = utils.keys(arg);\n    for (i = 0; i < keys.length; ++i) {\n      field = keys[i];\n      push(this.options, field, arg[field]);\n    }\n\n    return this;\n  }\n\n  if (typeof Map !== 'undefined' && arg instanceof Map) {\n    _pushMap(this.options, arg);\n    return this;\n  }\n  throw new TypeError('Invalid sort() argument. Must be a string, object, or array.');\n};\n\n/*!\n * @ignore\n */\n\nconst _validSortValue = {\n  1: 1,\n  '-1': -1,\n  asc: 1,\n  ascending: 1,\n  desc: -1,\n  descending: -1\n};\n\nfunction push(opts, field, value) {\n  if (Array.isArray(opts.sort)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or object:' +\n      '\\n- `.sort([[\\'field\\', 1], [\\'test\\', -1]])`' +\n      '\\n- `.sort({ field: 1, test: -1 })`');\n  }\n\n  let s;\n  if (value && value.$meta) {\n    s = opts.sort || (opts.sort = {});\n    s[field] = { $meta: value.$meta };\n    return;\n  }\n\n  s = opts.sort || (opts.sort = {});\n  let val = String(value || 1).toLowerCase();\n  val = _validSortValue[val];\n  if (!val) throw new TypeError('Invalid sort value: { ' + field + ': ' + value + ' }');\n\n  s[field] = val;\n}\n\nfunction _pushArr(opts, field, value) {\n  opts.sort = opts.sort || [];\n  if (!Array.isArray(opts.sort)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or object:' +\n      '\\n- `.sort([[\\'field\\', 1], [\\'test\\', -1]])`' +\n      '\\n- `.sort({ field: 1, test: -1 })`');\n  }\n\n  let val = String(value || 1).toLowerCase();\n  val = _validSortValue[val];\n  if (!val) throw new TypeError('Invalid sort value: [ ' + field + ', ' + value + ' ]');\n\n  opts.sort.push([field, val]);\n}\n\nfunction _pushMap(opts, map) {\n  opts.sort = opts.sort || new Map();\n  if (!(opts.sort instanceof Map)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or ' +\n      'object or map consistently');\n  }\n  map.forEach(function(value, key) {\n    let val = String(value || 1).toLowerCase();\n    val = _validSortValue[val];\n    if (!val) throw new TypeError('Invalid sort value: < ' + key + ': ' + value + ' >');\n\n    opts.sort.set(key, val);\n  });\n}\n\n\n\n/**\n * Specifies the limit option.\n *\n * ####Example\n *\n *     query.limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the skip option.\n *\n * ####Example\n *\n *     query.skip(100).limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the maxScan option.\n *\n * ####Example\n *\n *     query.maxScan(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method maxScan\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan\n * @api public\n */\n/**\n * Specifies the batchSize option.\n *\n * ####Example\n *\n *     query.batchSize(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the `comment` option.\n *\n * ####Example\n *\n *     query.comment('login query')\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment\n * @api public\n */\n\n/*!\n * limit, skip, maxScan, batchSize, comment\n *\n * Sets these associated options.\n *\n *     query.comment('feed query');\n */\n\n['limit', 'skip', 'maxScan', 'batchSize', 'comment'].forEach(function(method) {\n  Query.prototype[method] = function(v) {\n    this._validate(method);\n    this.options[method] = v;\n    return this;\n  };\n});\n\n/**\n * Specifies the maxTimeMS option.\n *\n * ####Example\n *\n *     query.maxTime(100)\n *     query.maxTimeMS(100)\n *\n * @method maxTime\n * @memberOf Query\n * @param {Number} ms\n * @see mongodb http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS\n * @api public\n */\n\nQuery.prototype.maxTime = Query.prototype.maxTimeMS = function(ms) {\n  this._validate('maxTime');\n  this.options.maxTimeMS = ms;\n  return this;\n};\n\n/**\n * Specifies this query as a `snapshot` query.\n *\n * ####Example\n *\n *     mquery().snapshot() // true\n *     mquery().snapshot(true)\n *     mquery().snapshot(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.snapshot = function() {\n  this._validate('snapshot');\n\n  this.options.snapshot = arguments.length\n    ? !!arguments[0]\n    : true;\n\n  return this;\n};\n\n/**\n * Sets query hints.\n *\n * ####Example\n *\n *     query.hint({ indexA: 1, indexB: -1});\n *     query.hint('indexA_1_indexB_1');\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|string} val a hint object or the index name\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint\n * @api public\n */\n\nQuery.prototype.hint = function() {\n  if (0 === arguments.length) return this;\n\n  this._validate('hint');\n\n  const arg = arguments[0];\n  if (utils.isObject(arg)) {\n    const hint = this.options.hint || (this.options.hint = {});\n\n    // must keep object keys in order so don't use Object.keys()\n    for (const k in arg) {\n      hint[k] = arg[k];\n    }\n\n    return this;\n  }\n  if (typeof arg === 'string') {\n    this.options.hint = arg;\n    return this;\n  }\n\n  throw new TypeError('Invalid hint. ' + arg);\n};\n\n/**\n * Requests acknowledgement that this operation has been persisted to MongoDB's\n * on-disk journal.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the `j` value if it is specified in writeConcern options\n *\n * ####Example:\n *\n *     mquery().w(2).j(true).wtimeout(2000);\n *\n * @method j\n * @memberOf Query\n * @instance\n * @param {boolean} val\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#j-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.j = function j(val) {\n  this.options.j = val;\n  return this;\n};\n\n/**\n * Sets the slaveOk option. _Deprecated_ in MongoDB 2.2 in favor of read preferences.\n *\n * ####Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see read()\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.slaveOk = function(v) {\n  this.options.slaveOk = arguments.length ? !!v : true;\n  return this;\n};\n\n/**\n * Sets the readPreference option for the query.\n *\n * ####Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // you can also use mongodb.ReadPreference class to also specify tags\n *     new Query().read(mongodb.ReadPreference('secondary', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }]))\n *\n *     new Query().setReadPreference('primary') // alias of .read()\n *\n * ####Preferences:\n *\n *     primary - (default)  Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * Read more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @param {String|ReadPreference} pref one of the listed preference options or their aliases\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.read = Query.prototype.setReadPreference = function(pref) {\n  if (arguments.length > 1 && !Query.prototype.read.deprecationWarningIssued) {\n    console.error('Deprecation warning: \\'tags\\' argument is not supported anymore in Query.read() method. Please use mongodb.ReadPreference object instead.');\n    Query.prototype.read.deprecationWarningIssued = true;\n  }\n  this.options.readPreference = utils.readPref(pref);\n  return this;\n};\n\n/**\n * Sets the readConcern option for the query.\n *\n * ####Example:\n *\n *     new Query().readConcern('local')\n *     new Query().readConcern('l')  // same as local\n *\n *     new Query().readConcern('available')\n *     new Query().readConcern('a')  // same as available\n *\n *     new Query().readConcern('majority')\n *     new Query().readConcern('m')  // same as majority\n *\n *     new Query().readConcern('linearizable')\n *     new Query().readConcern('lz') // same as linearizable\n *\n *     new Query().readConcern('snapshot')\n *     new Query().readConcern('s')  // same as snapshot\n *\n *     new Query().r('s') // r is alias of readConcern\n *\n *\n * ####Read Concern Level:\n *\n *     local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.\n *     linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.\n *     snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern \"majority\", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.\n\n\n *\n *\n * Aliases\n *\n *     l   local\n *     a   available\n *     m   majority\n *     lz  linearizable\n *     s   snapshot\n *\n * Read more about how to use read concern [here](https://docs.mongodb.com/manual/reference/read-concern/).\n *\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.readConcern = Query.prototype.r = function(level) {\n  this.options.readConcern = utils.readConcern(level);\n  return this;\n};\n\n/**\n * Sets tailable option.\n *\n * ####Example\n *\n *     query.tailable() <== true\n *     query.tailable(true)\n *     query.tailable(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} v defaults to true\n * @see mongodb http://www.mongodb.org/display/DOCS/Tailable+Cursors\n * @api public\n */\n\nQuery.prototype.tailable = function() {\n  this._validate('tailable');\n\n  this.options.tailable = arguments.length\n    ? !!arguments[0]\n    : true;\n\n  return this;\n};\n\n/**\n * Sets the specified number of `mongod` servers, or tag set of `mongod` servers,\n * that must acknowledge this write before this write is considered successful.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the `w` value if it is specified in writeConcern options\n *\n * ####Example:\n *\n * mquery().writeConcern(0)\n * mquery().writeConcern(1)\n * mquery().writeConcern({ w: 1, j: true, wtimeout: 2000 })\n * mquery().writeConcern('majority')\n * mquery().writeConcern('m') // same as majority\n * mquery().writeConcern('tagSetName') // if the tag set is 'm', use .writeConcern({ w: 'm' }) instead\n * mquery().w(1) // w is alias of writeConcern\n *\n * @method writeConcern\n * @memberOf Query\n * @instance\n * @param {String|number|object} concern 0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://docs.mongodb.com/manual/reference/write-concern/#w-option).\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#w-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.writeConcern = Query.prototype.w = function writeConcern(concern) {\n  if ('object' === typeof concern) {\n    if ('undefined' !== typeof concern.j) this.options.j = concern.j;\n    if ('undefined' !== typeof concern.w) this.options.w = concern.w;\n    if ('undefined' !== typeof concern.wtimeout) this.options.wtimeout = concern.wtimeout;\n  } else {\n    this.options.w = 'm' === concern ? 'majority' : concern;\n  }\n  return this;\n};\n\n/**\n * Specifies a time limit, in milliseconds, for the write concern.\n * If `ms > 1`, it is maximum amount of time to wait for this write\n * to propagate through the replica set before this operation fails.\n * The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to `wtimeout` value if it is specified in writeConcern\n *\n * ####Example:\n *\n *     mquery().w(2).j(true).wtimeout(2000)\n *\n * @method wtimeout\n * @memberOf Query\n * @instance\n * @param {number} ms number of milliseconds to wait\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#wtimeout\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.wtimeout = Query.prototype.wTimeout = function wtimeout(ms) {\n  this.options.wtimeout = ms;\n  return this;\n};\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\nQuery.prototype.merge = function(source) {\n  if (!source)\n    return this;\n\n  if (!Query.canMerge(source))\n    throw new TypeError('Invalid argument. Expected instanceof mquery or plain object');\n\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions);\n    }\n\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields);\n    }\n\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options);\n    }\n\n    if (source._update) {\n      this._update || (this._update = {});\n      utils.mergeClone(this._update, source._update);\n    }\n\n    if (source._distinct) {\n      this._distinct = source._distinct;\n    }\n\n    return this;\n  }\n\n  // plain object\n  utils.merge(this._conditions, source);\n\n  return this;\n};\n\n/**\n * Finds documents.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.find()\n *     query.find(callback)\n *     query.find({ name: 'Burning Lights' }, callback)\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function(criteria, callback) {\n  this.op = 'find';\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n\n  debug('find', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('find', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.find(conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\n * Returns the query cursor\n *\n * ####Examples\n *\n *     query.find().cursor();\n *     query.cursor({ name: 'Burning Lights' });\n *\n * @param {Object} [criteria] mongodb selector\n * @return {Object} cursor\n * @api public\n */\n\nQuery.prototype.cursor = function cursor(criteria) {\n  if (this.op) {\n    if (this.op !== 'find') {\n      throw new TypeError('.cursor only support .find method');\n    }\n  } else {\n    this.find(criteria);\n  }\n\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n\n  debug('findCursor', this._collection.collectionName, conds, options);\n  return this._collection.findCursor(conds, options);\n};\n\n/**\n * Executes the query as a findOne() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.findOne().where('name', /^Burning/);\n *\n *     query.findOne({ name: /^Burning/ })\n *\n *     query.findOne({ name: /^Burning/ }, callback); // executes\n *\n *     query.findOne(function (err, doc) {\n *       if (err) return handleError(err);\n *       if (doc) {\n *         // doc may be null if no document matched\n *\n *       }\n *     });\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOne = function(criteria, callback) {\n  this.op = 'findOne';\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n\n  debug('findOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('findOne', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.findOne(conds, options, utils.tick(callback));\n\n  return this;\n};\n\n/**\n * Exectues the query as a count() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.count().where('color', 'black').exec(callback);\n *\n *     query.count({ color: 'black' }).count(callback)\n *\n *     query.count({ color: 'black' }, callback)\n *\n *     query.where('color', 'black').count(function (err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     })\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Count\n * @api public\n */\n\nQuery.prototype.count = function(criteria, callback) {\n  this.op = 'count';\n  this._validate();\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n\n  const conds = this._conditions,\n      options = this._optionsForExec();\n\n  debug('count', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('count', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.count(conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\n * Declares or executes a distinct() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     distinct(criteria, field, fn)\n *     distinct(criteria, field)\n *     distinct(field, fn)\n *     distinct(field)\n *     distinct(fn)\n *     distinct()\n *\n * @param {Object|Query} [criteria]\n * @param {String} [field]\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Distinct\n * @api public\n */\n\nQuery.prototype.distinct = function(criteria, field, callback) {\n  this.op = 'distinct';\n  this._validate();\n\n  if (!callback) {\n    switch (typeof field) {\n      case 'function':\n        callback = field;\n        if ('string' == typeof criteria) {\n          field = criteria;\n          criteria = undefined;\n        }\n        break;\n      case 'undefined':\n      case 'string':\n        break;\n      default:\n        throw new TypeError('Invalid `field` argument. Must be string or function');\n    }\n\n    switch (typeof criteria) {\n      case 'function':\n        callback = criteria;\n        criteria = field = undefined;\n        break;\n      case 'string':\n        field = criteria;\n        criteria = undefined;\n        break;\n    }\n  }\n\n  if ('string' == typeof field) {\n    this._distinct = field;\n  }\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  if (!this._distinct) {\n    throw new Error('No value for `distinct` has been declared');\n  }\n\n  const conds = this._conditions,\n      options = this._optionsForExec();\n\n  debug('distinct', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('distinct', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.distinct(this._distinct, conds, options, utils.tick(callback));\n\n  return this;\n};\n\n/**\n * Declare and/or execute this query as an update() operation. By default,\n * `update()` only modifies the _first_ document that matches `criteria`.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     mquery({ _id: id }).update({ title: 'words' }, ...)\n *\n * becomes\n *\n *     collection.update({ _id: id }, { $set: { title: 'words' }}, ...)\n *\n * ####Note\n *\n * Passing an empty object `{}` as the doc will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call update() and then execute it by using the `exec()` method.\n *\n *     var q = mquery(collection).where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\n *\n *     var q = mquery(collection).where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed as unsafe\n *\n *     // keys that are not $atomic ops become $set.\n *     // this executes the same command as the previous example.\n *     q.update({ name: 'bob' }).where({ _id: id }).exec();\n *\n *     var q = mquery(collection).update(); // not executed\n *\n *     // overwriting with empty docs\n *     var q.where({ _id: id }).setOptions({ overwrite: true })\n *     q.update({ }, callback); // executes\n *\n *     // multi update with overwrite to empty doc\n *     var q = mquery(collection).where({ _id: id });\n *     q.setOptions({ multi: true, overwrite: true })\n *     q.update({ });\n *     q.update(callback); // executed\n *\n *     // multi updates\n *     mquery()\n *       .collection(coll)\n *       .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n *     // more multi updates\n *     mquery({ })\n *       .collection(coll)\n *       .setOptions({ multi: true })\n *       .update({ $set: { arr: [] }}, callback)\n *\n *     // single update by default\n *     mquery({ email: 'address@example.com' })\n *      .collection(coll)\n *      .update({ $inc: { counter: 1 }}, callback)\n *\n *     // summary\n *     update(criteria, doc, opts, cb) // executes\n *     update(criteria, doc, opts)\n *     update(criteria, doc, cb) // executes\n *     update(criteria, doc)\n *     update(doc, cb) // executes\n *     update(doc)\n *     update(cb) // executes\n *     update(true) // executes (unsafe write)\n *     update()\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.update = function update(criteria, doc, options, callback) {\n  var force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n\n  return _update(this, 'update', criteria, doc, options, force, callback);\n};\n\n/**\n * Declare and/or execute this query as an `updateMany()` operation. Identical\n * to `update()` except `updateMany()` will update _all_ documents that match\n * `criteria`, rather than just the first one.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     // Update every document whose `title` contains 'test'\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.updateMany = function updateMany(criteria, doc, options, callback) {\n  let force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n\n  return _update(this, 'updateMany', criteria, doc, options, force, callback);\n};\n\n/**\n * Declare and/or execute this query as an `updateOne()` operation. Identical\n * to `update()` except `updateOne()` will _always_ update just one document,\n * regardless of the `multi` option.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     // Update the first document whose `title` contains 'test'\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.updateOne = function updateOne(criteria, doc, options, callback) {\n  let force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n\n  return _update(this, 'updateOne', criteria, doc, options, force, callback);\n};\n\n/**\n * Declare and/or execute this query as an `replaceOne()` operation. Similar\n * to `updateOne()`, except `replaceOne()` is not allowed to use atomic\n * modifiers (`$set`, `$push`, etc.). Calling `replaceOne()` will always\n * replace the existing doc.\n *\n * ####Example\n *\n *     // Replace the document with `_id` 1 with `{ _id: 1, year: 2017 }`\n *     mquery().replaceOne({ _id: 1 }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.replaceOne = function replaceOne(criteria, doc, options, callback) {\n  let force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n\n  this.setOptions({ overwrite: true });\n  return _update(this, 'replaceOne', criteria, doc, options, force, callback);\n};\n\n\n/*!\n * Internal helper for update, updateMany, updateOne\n */\n\nfunction _update(query, op, criteria, doc, options, force, callback) {\n  query.op = op;\n\n  if (Query.canMerge(criteria)) {\n    query.merge(criteria);\n  }\n\n  if (doc) {\n    query._mergeUpdate(doc);\n  }\n\n  if (utils.isObject(options)) {\n    // { overwrite: true }\n    query.setOptions(options);\n  }\n\n  // we are done if we don't have callback and they are\n  // not forcing an unsafe write.\n  if (!(force || callback)) {\n    return query;\n  }\n\n  if (!query._update ||\n      !query.options.overwrite && 0 === utils.keys(query._update).length) {\n    callback && utils.soon(callback.bind(null, null, 0));\n    return query;\n  }\n\n  options = query._optionsForExec();\n  if (!callback) options.safe = false;\n\n  criteria = query._conditions;\n  doc = query._updateForExec();\n\n  debug('update', query._collection.collectionName, criteria, doc, options);\n  callback = query._wrapCallback(op, callback, {\n    conditions: criteria,\n    doc: doc,\n    options: options\n  });\n\n  query._collection[op](criteria, doc, options, utils.tick(callback));\n\n  return query;\n}\n\n/**\n * Declare and/or execute this query as a remove() operation.\n *\n * ####Example\n *\n *     mquery(collection).remove({ artist: 'Anne Murray' }, callback)\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call remove() and then execute it by using the `exec()` method.\n *\n *     // not executed\n *     var query = mquery(collection).remove({ name: 'Anne Murray' })\n *\n *     // executed\n *     mquery(collection).remove({ name: 'Anne Murray' }, callback)\n *     mquery(collection).remove({ name: 'Anne Murray' }).remove(callback)\n *\n *     // executed without a callback (unsafe write)\n *     query.exec()\n *\n *     // summary\n *     query.remove(conds, fn); // executes\n *     query.remove(conds)\n *     query.remove(fn) // executes\n *     query.remove()\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.remove = function(criteria, callback) {\n  this.op = 'remove';\n  let force;\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n\n  if (!(force || callback))\n    return this;\n\n  const options = this._optionsForExec();\n  if (!callback) options.safe = false;\n\n  const conds = this._conditions;\n\n  debug('remove', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('remove', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.remove(conds, options, utils.tick(callback));\n\n  return this;\n};\n\n/**\n * Declare and/or execute this query as a `deleteOne()` operation. Behaves like\n * `remove()`, except for ignores the `justOne` option and always deletes at\n * most one document.\n *\n * ####Example\n *\n *     mquery(collection).deleteOne({ artist: 'Anne Murray' }, callback)\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.deleteOne = function(criteria, callback) {\n  this.op = 'deleteOne';\n  let force;\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n\n  if (!(force || callback))\n    return this;\n\n  const options = this._optionsForExec();\n  if (!callback) options.safe = false;\n  delete options.justOne;\n\n  const conds = this._conditions;\n\n  debug('deleteOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('deleteOne', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.deleteOne(conds, options, utils.tick(callback));\n\n  return this;\n};\n\n/**\n * Declare and/or execute this query as a `deleteMany()` operation. Behaves like\n * `remove()`, except for ignores the `justOne` option and always deletes\n * _every_ document that matches `criteria`.\n *\n * ####Example\n *\n *     mquery(collection).deleteMany({ artist: 'Anne Murray' }, callback)\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.deleteMany = function(criteria, callback) {\n  this.op = 'deleteMany';\n  let force;\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n\n  if (!(force || callback))\n    return this;\n\n  const options = this._optionsForExec();\n  if (!callback) options.safe = false;\n  delete options.justOne;\n\n  const conds = this._conditions;\n\n  debug('deleteOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('deleteOne', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.deleteMany(conds, options, utils.tick(callback));\n\n  return this;\n};\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `new`: bool - true to return the modified document rather than the original. defaults to true\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * ####Examples\n *\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update, callback) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update, callback)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate(callback)                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @param {Object|Query} [query]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndUpdate = function(criteria, doc, options, callback) {\n  this.op = 'findOneAndUpdate';\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      options = undefined;\n      break;\n    case 1:\n      if ('function' == typeof criteria) {\n        callback = criteria;\n        criteria = options = doc = undefined;\n      } else {\n        doc = criteria;\n        criteria = options = undefined;\n      }\n  }\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  // apply doc\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  options && this.setOptions(options);\n\n  if (!callback) return this;\n\n  const conds = this._conditions;\n  const update = this._updateForExec();\n  options = this._optionsForExec();\n\n  return this._collection.findOneAndUpdate(conds, update, options, utils.tick(callback));\n};\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * ####Examples\n *\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     A.where().findOneAndRemove(conditions, callback) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     A.where().findOneAndRemove(callback)   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *     A.where().findOneAndDelete()           // alias of .findOneAndRemove()\n *\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndRemove = Query.prototype.findOneAndDelete = function(conditions, options, callback) {\n  this.op = 'findOneAndRemove';\n  this._validate();\n\n  if ('function' == typeof options) {\n    callback = options;\n    options = undefined;\n  } else if ('function' == typeof conditions) {\n    callback = conditions;\n    conditions = undefined;\n  }\n\n  // apply conditions\n  if (Query.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  // apply options\n  options && this.setOptions(options);\n\n  if (!callback) return this;\n\n  options = this._optionsForExec();\n  const conds = this._conditions;\n\n  return this._collection.findOneAndDelete(conds, options, utils.tick(callback));\n};\n\n/**\n * Wrap callback to add tracing\n *\n * @param {Function} callback\n * @param {Object} [queryInfo]\n * @api private\n */\nQuery.prototype._wrapCallback = function(method, callback, queryInfo) {\n  const traceFunction = this._traceFunction || Query.traceFunction;\n\n  if (traceFunction) {\n    queryInfo.collectionName = this._collection.collectionName;\n\n    const traceCallback = traceFunction &&\n      traceFunction.call(null, method, queryInfo, this);\n\n    const startTime = new Date().getTime();\n\n    return function wrapperCallback(err, result) {\n      if (traceCallback) {\n        const millis = new Date().getTime() - startTime;\n        traceCallback.call(null, err, result, millis);\n      }\n\n      if (callback) {\n        callback.apply(null, arguments);\n      }\n    };\n  }\n\n  return callback;\n};\n\n/**\n * Add trace function that gets called when the query is executed.\n * The function will be called with (method, queryInfo, query) and\n * should return a callback function which will be called\n * with (err, result, millis) when the query is complete.\n *\n * queryInfo is an object containing: {\n *   collectionName: <name of the collection>,\n *   conditions: <query criteria>,\n *   options: <comment, fields, readPreference, etc>,\n *   doc: [document to update, if applicable]\n * }\n *\n * NOTE: Does not trace stream queries.\n *\n * @param {Function} traceFunction\n * @return {Query} this\n * @api public\n */\nQuery.prototype.setTraceFunction = function(traceFunction) {\n  this._traceFunction = traceFunction;\n  return this;\n};\n\n/**\n * Executes the query\n *\n * ####Examples\n *\n *     query.exec();\n *     query.exec(callback);\n *     query.exec('update');\n *     query.exec('find', callback);\n *\n * @param {String|Function} [operation]\n * @param {Function} [callback]\n * @api public\n */\n\nQuery.prototype.exec = function exec(op, callback) {\n  switch (typeof op) {\n    case 'function':\n      callback = op;\n      op = null;\n      break;\n    case 'string':\n      this.op = op;\n      break;\n  }\n\n  assert.ok(this.op, 'Missing query type: (find, update, etc)');\n\n  if ('update' == this.op || 'remove' == this.op) {\n    callback || (callback = true);\n  }\n\n  const _this = this;\n\n  if ('function' == typeof callback) {\n    this[this.op](callback);\n  } else {\n    return new Query.Promise(function(success, error) {\n      _this[_this.op](function(err, val) {\n        if (err) error(err);\n        else success(val);\n        success = error = null;\n      });\n    });\n  }\n};\n\n/**\n * Returns a thunk which when called runs this.exec()\n *\n * The thunk receives a callback function which will be\n * passed to `this.exec()`\n *\n * @return {Function}\n * @api public\n */\n\nQuery.prototype.thunk = function() {\n  const _this = this;\n  return function(cb) {\n    _this.exec(cb);\n  };\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.then = function(resolve, reject) {\n  const _this = this;\n  const promise = new Query.Promise(function(success, error) {\n    _this.exec(function(err, val) {\n      if (err) error(err);\n      else success(val);\n      success = error = null;\n    });\n  });\n  return promise.then(resolve, reject);\n};\n\n/**\n * Returns a cursor for the given `find` query.\n *\n * @throws Error if operation is not a find\n * @returns {Cursor} MongoDB driver cursor\n */\n\nQuery.prototype.cursor = function() {\n  if ('find' != this.op)\n    throw new Error('cursor() is only available for find');\n\n  const conds = this._conditions;\n\n  const options = this._optionsForExec();\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n\n  debug('cursor', this._collection.collectionName, conds, options);\n\n  return this._collection.findCursor(conds, options);\n};\n\n/**\n * Determines if field selection has been made.\n *\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selected = function selected() {\n  return !!(this._fields && Object.keys(this._fields).length > 0);\n};\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *     query.selectedExlusively() // false\n *\n * @returns {Boolean}\n */\n\nQuery.prototype.selectedInclusively = function selectedInclusively() {\n  if (!this._fields) return false;\n\n  const keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    if (0 === this._fields[key]) return false;\n    if (this._fields[key] &&\n        typeof this._fields[key] === 'object' &&\n        this._fields[key].$meta) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExlusively() // false\n *     query.select('-name')\n *     query.selectedExlusively() // true\n *     query.selectedInclusively() // false\n *\n * @returns {Boolean}\n */\n\nQuery.prototype.selectedExclusively = function selectedExclusively() {\n  if (!this._fields) return false;\n\n  const keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    if (0 === this._fields[key]) return true;\n  }\n\n  return false;\n};\n\n/**\n * Merges `doc` with the current update object.\n *\n * @param {Object} doc\n */\n\nQuery.prototype._mergeUpdate = function(doc) {\n  if (!this._update) this._update = {};\n  if (doc instanceof Query) {\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else {\n    utils.mergeClone(this._update, doc);\n  }\n};\n\n/**\n * Returns default options.\n *\n * @return {Object}\n * @api private\n */\n\nQuery.prototype._optionsForExec = function() {\n  const options = utils.clone(this.options);\n  return options;\n};\n\n/**\n * Returns fields selection for this query.\n *\n * @return {Object}\n * @api private\n */\n\nQuery.prototype._fieldsForExec = function() {\n  return utils.clone(this._fields);\n};\n\n/**\n * Return an update document with corrected $set operations.\n *\n * @api private\n */\n\nQuery.prototype._updateForExec = function() {\n  const update = utils.clone(this._update);\n  const ops = utils.keys(update);\n  const ret = {};\n\n  for (const op of ops) {\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = update[op];\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n\n  this._compiledUpdate = ret;\n  return ret;\n};\n\n/**\n * Make sure _path is set.\n *\n * @parmam {String} method\n */\n\nQuery.prototype._ensurePath = function(method) {\n  if (!this._path) {\n    const msg = method + '() must be used after where() '\n                     + 'when called with these arguments';\n    throw new Error(msg);\n  }\n};\n\n/*!\n * Permissions\n */\n\nQuery.permissions = require('./permissions');\n\nQuery._isPermitted = function(a, b) {\n  const denied = Query.permissions[b];\n  if (!denied) return true;\n  return true !== denied[a];\n};\n\nQuery.prototype._validate = function(action) {\n  let fail;\n  let validator;\n\n  if (undefined === action) {\n\n    validator = Query.permissions[this.op];\n    if ('function' != typeof validator) return true;\n\n    fail = validator(this);\n\n  } else if (!Query._isPermitted(action, this.op)) {\n    fail = action;\n  }\n\n  if (fail) {\n    throw new Error(fail + ' cannot be used with ' + this.op);\n  }\n};\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @param {Object} conds\n * @return {Boolean}\n */\n\nQuery.canMerge = function(conds) {\n  return conds instanceof Query || utils.isObject(conds);\n};\n\n/**\n * Set a trace function that will get called whenever a\n * query is executed.\n *\n * See `setTraceFunction()` for details.\n *\n * @param {Object} conds\n * @return {Boolean}\n */\nQuery.setGlobalTraceFunction = function(traceFunction) {\n  Query.traceFunction = traceFunction;\n};\n\n/*!\n * Exports.\n */\n\nQuery.utils = utils;\nQuery.env = require('./env');\nQuery.Collection = require('./collection');\nQuery.BaseCollection = require('./collection/collection');\nQuery.Promise = Promise;\nmodule.exports = exports = Query;\n\n// TODO\n// test utils\n"]},"metadata":{},"sourceType":"script"}