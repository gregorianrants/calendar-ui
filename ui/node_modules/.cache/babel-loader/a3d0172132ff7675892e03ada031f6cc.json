{"ast":null,"code":"var _jsxFileName = \"/home/gregorian/calendar-ui/ui/src/components/Event.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport useDrag from \"./useDrag\";\nimport styled from \"styled-components\";\nimport { editJob } from \"../Model/Jobs\";\nimport { fromTop, fromBottom, roundToNearest } from \"../utilities/utilities\";\nimport settingsContext from \"./Contexts\";\nimport { getTimeFromPosition } from \"../utilities/timeConversions.js\";\nimport { mergeDateAndTime } from \"../utilities/dateUtilities\";\nimport useDetectBottomEdge from \"./useDetectBottomEdge\";\nimport { editJobThunk } from \"./Calendar/calendarSlice\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledEvent = styled.div`\n  position: absolute;\n  background-color: ${props => props.backgroundColor};\n  border: 0.5px solid white;\n  cursor: ${props => props.overEdge ? \"row-resize\" : \"default\"};\n`;\n_c = StyledEvent;\nexport default function Event({\n  top: topProp,\n  bottom: bottomProp,\n  left,\n  right,\n  _id,\n  start,\n  end,\n  backgroundColor = \"red\",\n  updateEvent,\n  updateDisplayEvent\n}) {\n  _s();\n\n  const [top, setTop] = React.useState(topProp);\n  const [bottom, setBottom] = React.useState(bottomProp);\n  const {\n    hourHeight\n  } = React.useContext(settingsContext);\n  React.useEffect(() => {\n    setTop(topProp);\n    setBottom(bottomProp);\n  }, [topProp, bottomProp]);\n  /*\n    TODO: write code that doesnt need this comment to make sense, once you can figure out how to.\n    this is used to detect whehter mouse cursor is over bottom edge and its value is then used to set\n    correct cursor in css\n    it is also used as last arg to useDrag and is checked when the drag is started to see what\n    drag behaviour is used*/\n\n  const {\n    isCursorOverEdgeState,\n    handleMouseMove,\n    handleMouseLeave\n  } = useDetectBottomEdge();\n\n  function startTime(top) {\n    return getTimeFromPosition(top, hourHeight * 24);\n  }\n\n  function endTime(bottom) {\n    return getTimeFromPosition(hourHeight * 24 - bottom, hourHeight * 24);\n  }\n\n  const eventHeight = React.useRef(0);\n  const initialTop = React.useRef(0);\n  const initialBottom = React.useRef(0);\n  const onDragStart = React.useCallback(() => {\n    initialTop.current = top;\n    initialBottom.current = bottom;\n    eventHeight.current = fromTop(bottom, 24 * hourHeight) - top;\n  }, [top, bottom, hourHeight]);\n\n  const onDragBottomEdge = (translationY, movementY) => {\n    const trackedBottom = initialBottom.current - translationY;\n    const snappedBottom = roundToNearest(trackedBottom, hourHeight);\n    if (fromTop(snappedBottom, hourHeight * 24) > top) setBottom(snappedBottom);\n  };\n\n  const onDragElement = translationY => {\n    const tracked = initialTop.current + translationY;\n    const snappedTop = roundToNearest(tracked, hourHeight);\n    setTop(snappedTop);\n    const bottom = fromBottom(snappedTop + eventHeight.current, hourHeight * 24);\n    setBottom(bottom);\n  };\n\n  const onDragEnd = totalTranslationY => {\n    console.log(totalTranslationY);\n\n    if (totalTranslationY !== 0) {\n      //TODO do i want to allow a little bit of movement then set back to original value if movement is small\n      // editJob({\n      //   _id,\n      //   data: {\n      //     start: mergeDateAndTime(start, startTime(top)),\n      //     end: mergeDateAndTime(end, endTime(bottom)),\n      //   },\n      // })\n      //   .then((data) => {\n      //     console.log(data);\n      //     updateEvent(data.data._id, data.data); //TODO sort out this double use of data looks silly\n      //   })\n      //   .catch(console.error);\n      dispatchEvent(editJobThunk(_id));\n    } else {\n      console.log(\"heloooooo\");\n      updateDisplayEvent(_id);\n    }\n  };\n\n  const drag = useDrag(onDragStart, onDragElement, onDragBottomEdge, onDragEnd, isCursorOverEdgeState);\n  return /*#__PURE__*/_jsxDEV(StyledEvent, {\n    \"data-component\": \"event\",\n    \"data-id\": _id,\n    className: \"event\",\n    onMouseDown: e => {\n      drag(e);\n    },\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    overEdge: isCursorOverEdgeState,\n    draggable: \"false\",\n    backgroundColor: backgroundColor,\n    style: {\n      backgroundColor: backgroundColor,\n      top: top + \"px\",\n      bottom: bottom + \"px\",\n      left,\n      right\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Event, \"4ybnvkMJbwa/q+XMYC70gDsOQp4=\", false, function () {\n  return [useDetectBottomEdge, useDrag];\n});\n\n_c2 = Event;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledEvent\");\n$RefreshReg$(_c2, \"Event\");","map":{"version":3,"sources":["/home/gregorian/calendar-ui/ui/src/components/Event.js"],"names":["React","useDrag","styled","editJob","fromTop","fromBottom","roundToNearest","settingsContext","getTimeFromPosition","mergeDateAndTime","useDetectBottomEdge","editJobThunk","useDispatch","StyledEvent","div","props","backgroundColor","overEdge","Event","top","topProp","bottom","bottomProp","left","right","_id","start","end","updateEvent","updateDisplayEvent","setTop","useState","setBottom","hourHeight","useContext","useEffect","isCursorOverEdgeState","handleMouseMove","handleMouseLeave","startTime","endTime","eventHeight","useRef","initialTop","initialBottom","onDragStart","useCallback","current","onDragBottomEdge","translationY","movementY","trackedBottom","snappedBottom","onDragElement","tracked","snappedTop","onDragEnd","totalTranslationY","console","log","dispatchEvent","drag","e"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport useDrag from \"./useDrag\";\nimport styled from \"styled-components\";\nimport { editJob } from \"../Model/Jobs\";\n\nimport { fromTop, fromBottom, roundToNearest } from \"../utilities/utilities\";\nimport settingsContext from \"./Contexts\";\n\nimport { getTimeFromPosition } from \"../utilities/timeConversions.js\";\nimport { mergeDateAndTime } from \"../utilities/dateUtilities\";\nimport useDetectBottomEdge from \"./useDetectBottomEdge\";\n\nimport { editJobThunk } from \"./Calendar/calendarSlice\";\nimport { useDispatch } from \"react-redux\";\n\nconst StyledEvent = styled.div`\n  position: absolute;\n  background-color: ${(props) => props.backgroundColor};\n  border: 0.5px solid white;\n  cursor: ${(props) => (props.overEdge ? \"row-resize\" : \"default\")};\n`;\n\nexport default function Event({\n  top: topProp,\n  bottom: bottomProp,\n  left,\n  right,\n  _id,\n  start,\n  end,\n  backgroundColor = \"red\",\n  updateEvent,\n  updateDisplayEvent,\n}) {\n  const [top, setTop] = React.useState(topProp);\n  const [bottom, setBottom] = React.useState(bottomProp);\n  const { hourHeight } = React.useContext(settingsContext);\n\n  React.useEffect(() => {\n    setTop(topProp);\n    setBottom(bottomProp);\n  }, [topProp, bottomProp]);\n\n  /*\n    TODO: write code that doesnt need this comment to make sense, once you can figure out how to.\n    this is used to detect whehter mouse cursor is over bottom edge and its value is then used to set\n    correct cursor in css\n    it is also used as last arg to useDrag and is checked when the drag is started to see what\n    drag behaviour is used*/\n  const { isCursorOverEdgeState, handleMouseMove, handleMouseLeave } =\n    useDetectBottomEdge();\n\n  function startTime(top) {\n    return getTimeFromPosition(top, hourHeight * 24);\n  }\n\n  function endTime(bottom) {\n    return getTimeFromPosition(hourHeight * 24 - bottom, hourHeight * 24);\n  }\n\n  const eventHeight = React.useRef(0);\n  const initialTop = React.useRef(0);\n  const initialBottom = React.useRef(0);\n\n  const onDragStart = React.useCallback(() => {\n    initialTop.current = top;\n    initialBottom.current = bottom;\n    eventHeight.current = fromTop(bottom, 24 * hourHeight) - top;\n  }, [top, bottom, hourHeight]);\n\n  const onDragBottomEdge = (translationY, movementY) => {\n    const trackedBottom = initialBottom.current - translationY;\n    const snappedBottom = roundToNearest(trackedBottom, hourHeight);\n    if (fromTop(snappedBottom, hourHeight * 24) > top) setBottom(snappedBottom);\n  };\n\n  const onDragElement = (translationY) => {\n    const tracked = initialTop.current + translationY;\n    const snappedTop = roundToNearest(tracked, hourHeight);\n    setTop(snappedTop);\n    const bottom = fromBottom(\n      snappedTop + eventHeight.current,\n      hourHeight * 24\n    );\n    setBottom(bottom);\n  };\n\n  const onDragEnd = (totalTranslationY) => {\n    console.log(totalTranslationY);\n    if (totalTranslationY !== 0) {\n      //TODO do i want to allow a little bit of movement then set back to original value if movement is small\n      // editJob({\n      //   _id,\n      //   data: {\n      //     start: mergeDateAndTime(start, startTime(top)),\n      //     end: mergeDateAndTime(end, endTime(bottom)),\n      //   },\n      // })\n      //   .then((data) => {\n      //     console.log(data);\n      //     updateEvent(data.data._id, data.data); //TODO sort out this double use of data looks silly\n      //   })\n      //   .catch(console.error);\n\n      dispatchEvent(editJobThunk(\n        _id,\n      ))\n    } else {\n      console.log(\"heloooooo\");\n      updateDisplayEvent(_id);\n    }\n  };\n\n  const drag = useDrag(\n    onDragStart,\n    onDragElement,\n    onDragBottomEdge,\n    onDragEnd,\n    isCursorOverEdgeState\n  );\n\n  return (\n    <StyledEvent\n      data-component={\"event\"}\n      data-id={_id}\n      className=\"event\"\n      onMouseDown={(e) => {\n        drag(e);\n      }}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={handleMouseLeave}\n      overEdge={isCursorOverEdgeState}\n      draggable=\"false\"\n      backgroundColor={backgroundColor}\n      style={{\n        backgroundColor: backgroundColor,\n        top: top + \"px\",\n        bottom: bottom + \"px\",\n        left,\n        right,\n      }}\n    ></StyledEvent>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}