[{"/home/gregorian/calendar-ui/ui/src/index.js":"1","/home/gregorian/calendar-ui/ui/src/reportWebVitals.js":"2","/home/gregorian/calendar-ui/ui/src/App.js":"3","/home/gregorian/calendar-ui/ui/src/components/Contexts.js":"4","/home/gregorian/calendar-ui/ui/src/components/Calendar/Calendar.js":"5","/home/gregorian/calendar-ui/ui/src/utilities/dateUtilities.js":"6","/home/gregorian/calendar-ui/ui/src/components/Week.js":"7","/home/gregorian/calendar-ui/ui/src/components/DayLabels.js":"8","/home/gregorian/calendar-ui/ui/src/components/Header.js":"9","/home/gregorian/calendar-ui/ui/src/components/HourTicks.js":"10","/home/gregorian/calendar-ui/ui/src/components/Calendar/reducer.js":"11","/home/gregorian/calendar-ui/ui/src/components/forms/NewJobModal.js":"12","/home/gregorian/calendar-ui/ui/src/components/forms/JobModal.js":"13","/home/gregorian/calendar-ui/ui/src/Model/Jobs.js":"14","/home/gregorian/calendar-ui/ui/src/useGapi/useGapi.js":"15","/home/gregorian/calendar-ui/ui/src/components/Day.js":"16","/home/gregorian/calendar-ui/ui/src/components/forms/Modal.js":"17","/home/gregorian/calendar-ui/ui/src/components/forms/JobForm.js":"18","/home/gregorian/calendar-ui/ui/src/useGapi/constants.js":"19","/home/gregorian/calendar-ui/ui/src/useGapi/reshape.js":"20","/home/gregorian/calendar-ui/ui/src/useGapi/eventType.js":"21","/home/gregorian/calendar-ui/ui/src/components/Events.js":"22","/home/gregorian/calendar-ui/ui/src/components/Hours.js":"23","/home/gregorian/calendar-ui/ui/src/components/forms/StartEndInput.js":"24","/home/gregorian/calendar-ui/ui/src/components/forms/AddressInput.js":"25","/home/gregorian/calendar-ui/ui/src/components/forms/reducer.js":"26","/home/gregorian/calendar-ui/ui/src/components/hooks/useInput.js":"27","/home/gregorian/calendar-ui/ui/src/components/hooks/useArray.js":"28","/home/gregorian/calendar-ui/ui/src/utilities/batchProcess.js":"29","/home/gregorian/calendar-ui/ui/src/eventGeometry/eventGeometry.js":"30","/home/gregorian/calendar-ui/ui/src/utilities/timeConversions.js":"31","/home/gregorian/calendar-ui/ui/src/eventGeometry/groupEvents.js":"32","/home/gregorian/calendar-ui/ui/src/components/Event.js":"33","/home/gregorian/calendar-ui/ui/src/components/gcalEvent.js":"34","/home/gregorian/calendar-ui/ui/src/components/useDetectBottomEdge.js":"35","/home/gregorian/calendar-ui/ui/src/utilities/utilities.js":"36","/home/gregorian/calendar-ui/ui/src/components/useDrag.js":"37","/home/gregorian/calendar-ui/ui/src/utilities/processMongooseError.js":"38","/home/gregorian/calendar-ui/ui/src/app/store.js":"39","/home/gregorian/calendar-ui/ui/src/components/Calendar/calendarSlice.js":"40","/home/gregorian/calendar-ui/ui/src/components/forms/JobDetails.js":"41"},{"size":713,"mtime":1636222402569,"results":"42","hashOfConfig":"43"},{"size":362,"mtime":1635084169605,"results":"44","hashOfConfig":"43"},{"size":2610,"mtime":1636387736811,"results":"45","hashOfConfig":"43"},{"size":107,"mtime":1635084169605,"results":"46","hashOfConfig":"43"},{"size":3350,"mtime":1636386352541,"results":"47","hashOfConfig":"43"},{"size":1773,"mtime":1635084169605,"results":"48","hashOfConfig":"43"},{"size":801,"mtime":1636386253501,"results":"49","hashOfConfig":"43"},{"size":1111,"mtime":1635084169605,"results":"50","hashOfConfig":"43"},{"size":854,"mtime":1635084169605,"results":"51","hashOfConfig":"43"},{"size":2226,"mtime":1635084169605,"results":"52","hashOfConfig":"43"},{"size":1633,"mtime":1635084169605,"results":"53","hashOfConfig":"43"},{"size":823,"mtime":1636386112521,"results":"54","hashOfConfig":"43"},{"size":9074,"mtime":1636386362001,"results":"55","hashOfConfig":"43"},{"size":1640,"mtime":1636377931247,"results":"56","hashOfConfig":"43"},{"size":3804,"mtime":1635084169605,"results":"57","hashOfConfig":"43"},{"size":985,"mtime":1636386245491,"results":"58","hashOfConfig":"43"},{"size":504,"mtime":1635084169605,"results":"59","hashOfConfig":"43"},{"size":8672,"mtime":1636386165011,"results":"60","hashOfConfig":"43"},{"size":164,"mtime":1635084169605,"results":"61","hashOfConfig":"43"},{"size":235,"mtime":1635084169605,"results":"62","hashOfConfig":"43"},{"size":6192,"mtime":1635084169605,"results":"63","hashOfConfig":"43"},{"size":1757,"mtime":1636386234501,"results":"64","hashOfConfig":"43"},{"size":1036,"mtime":1635084169605,"results":"65","hashOfConfig":"43"},{"size":1524,"mtime":1635084169605,"results":"66","hashOfConfig":"43"},{"size":3485,"mtime":1636377622757,"results":"67","hashOfConfig":"43"},{"size":256,"mtime":1635084169605,"results":"68","hashOfConfig":"43"},{"size":257,"mtime":1635084169605,"results":"69","hashOfConfig":"43"},{"size":789,"mtime":1635084169605,"results":"70","hashOfConfig":"43"},{"size":825,"mtime":1635084169605,"results":"71","hashOfConfig":"43"},{"size":1673,"mtime":1635084169605,"results":"72","hashOfConfig":"43"},{"size":608,"mtime":1635084169605,"results":"73","hashOfConfig":"43"},{"size":2578,"mtime":1635084169605,"results":"74","hashOfConfig":"43"},{"size":3773,"mtime":1636386015801,"results":"75","hashOfConfig":"43"},{"size":1243,"mtime":1635084169605,"results":"76","hashOfConfig":"43"},{"size":606,"mtime":1635084169605,"results":"77","hashOfConfig":"43"},{"size":477,"mtime":1635084169605,"results":"78","hashOfConfig":"43"},{"size":4825,"mtime":1635084169605,"results":"79","hashOfConfig":"43"},{"size":975,"mtime":1635536994396,"results":"80","hashOfConfig":"43"},{"size":206,"mtime":1636216760960,"results":"81","hashOfConfig":"43"},{"size":2564,"mtime":1636380421327,"results":"82","hashOfConfig":"43"},{"size":5496,"mtime":1636387561451,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"yt6ytb",{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"86"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"86"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"86"},"/home/gregorian/calendar-ui/ui/src/index.js",[],["177","178"],"/home/gregorian/calendar-ui/ui/src/reportWebVitals.js",[],"/home/gregorian/calendar-ui/ui/src/App.js",["179","180"],"import \"./App.css\";\nimport Calendar from \"./components/Calendar/Calendar\";\nimport NewJobModal from \"./components/forms/NewJobModal\";\n\nimport SettingsContext from \"./components/Contexts\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { JobDetails } from \"./components/forms/JobDetails\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nconst settingsValue = {\n  borderWidth: 1,\n  hourHeight: 30,\n};\n\n//TODO will need to read through code at some point and chekc the math, not sure i am accounting for border width when looking\n//at height of each hour/day\n//also need to think about the implciations of the fact that a pixel values in css can be rounded may need to put in some code to account for\n//border width being set by a user to something that gets rounded\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <div className={classes.root}>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <IconButton\n                edge=\"start\"\n                className={classes.menuButton}\n                color=\"inherit\"\n                aria-label=\"menu\"\n              >\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h6\" className={classes.title}>\n                VanCal\n              </Typography>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <Switch>\n          <Route path=\"/job-details/:id\">\n            <SettingsContext.Provider value={settingsValue}>\n              <Calendar />\n            </SettingsContext.Provider>\n            <JobDetails />\n          </Route>\n          <Route path=\"/job-form\">\n            {/* <NewJobModal\n              addToEvents={addToEvents}\n              toggleModal={toggleNewJobModal}\n            /> */}\n          </Route>\n          <Route path=\"/table\">\n            <h1>table goes here</h1>\n          </Route>\n          <Route path=\"/\">\n            <SettingsContext.Provider value={settingsValue}>\n              <Calendar />\n            </SettingsContext.Provider>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/home/gregorian/calendar-ui/ui/src/components/Contexts.js",[],"/home/gregorian/calendar-ui/ui/src/components/Calendar/Calendar.js",["181","182","183","184","185","186","187"],"import styled from \"styled-components\";\nimport NewJobModal from \"../forms/NewJobModal\";\n\nimport DayLabels from \"../DayLabels\";\nimport Week from \"../Week\";\nimport HourTicks from \"../HourTicks\";\n\nimport Header from \"../Header\";\nimport settingsContext from \"../Contexts\";\n\nimport { fetchDays } from \"../../Model/Jobs\";\n\nimport React from \"react\";\nimport { fitsInWeek } from \"../../utilities/dateUtilities.js\";\n\nimport JobModal from \"../forms/JobModal\";\n\n//import socketIOClient from \"socket.io-client\";\n\nimport { useWeek } from \"./reducer\";\nimport { useGapi } from \"../../useGapi/useGapi\";\n\nimport { incrementWeekThunk, decrementWeekThunk } from \"./calendarSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst CalendarStyled = styled.div`\n  margin: 30px;\n  display: grid;\n  grid-template-rows: 60px 60px ${(props) =>\n      String(props.hourHeight * 24) + \"px\"};\n  grid-template-columns: 60px 1fr;\n`;\n\nexport default function Calendar() {\n  //const [daysOnCal, dispatch] = useWeek();\n  const [showNewJobModal, setShowNewJobModal] = React.useState(false);\n  const [displayEvent, setDisplayEvent] = React.useState(null);\n  //const [events, setEvents] = React.useState([]);\n  const events = useSelector((state) => state.calendar.events);\n  //const [gcalEvents, setGcalEvents] = React.useState([]);\n\n  const dispatch = useDispatch();\n\n  const { authed, listEvents } = useGapi();\n\n  const { hourHeight } = React.useContext(settingsContext);\n\n  const updateDisplayEvent = (id) => {\n    setDisplayEvent(events.filter((event) => event._id === id)[0]);\n  };\n\n  const incrementWeek = () => {\n    //dispatch({ type: \"INCREMENT\" });\n    dispatch(incrementWeekThunk);\n  };\n\n  const decrementWeek = () => {\n    //dispatch({ type: \"DECREMENT\" });\n    dispatch(decrementWeekThunk);\n  };\n\n  const toggleNewJobModal = () => {\n    setShowNewJobModal((val) => !val);\n  };\n\n  const closeDetailsModal = () => {\n    setDisplayEvent(null);\n  };\n\n  // const addToEvents = (event) => {\n  //   if (fitsInWeek(daysOnCal.firstDay, event.start)) {\n  //     setEvents((events) => [...events, event]);\n  //   }\n  // };\n\n  // const updateEvent = (id, data) => {\n  //   setEvents((events) => {\n  //     const remainder = events.filter((event) => event._id !== id);\n  //     const result = [...remainder, data];\n  //     return result;\n  //   });\n  // };\n\n  const addToEvents = () => {};\n\n  const updateEvent = () => {};\n\n  const currentDate = useSelector((state) => state.calendar.currentDate);\n  const days = useSelector((state) => state.calendar.days);\n\n  return (\n    <React.Fragment>\n      <CalendarStyled hourHeight={hourHeight}>\n        <div></div>\n        <Header\n          currentDate={currentDate}\n          incrementWeek={incrementWeek}\n          decrementWeek={decrementWeek}\n          handleShowModal={toggleNewJobModal}\n        />\n        <div></div>\n        <DayLabels days={days} />\n        <HourTicks />\n        <Week\n          events={events}\n          gcalEvents={[]}\n          days={days}\n          updateDisplayEvent={updateDisplayEvent}\n        />\n      </CalendarStyled>\n      {showNewJobModal && (\n        <NewJobModal\n          toggleModal={toggleNewJobModal}\n        />\n      )}\n      {displayEvent && (\n        <JobModal\n          displayEvent={displayEvent}\n          close={closeDetailsModal}\n        />\n      )}\n    </React.Fragment>\n  );\n}\n","/home/gregorian/calendar-ui/ui/src/utilities/dateUtilities.js",[],"/home/gregorian/calendar-ui/ui/src/components/Week.js",[],"/home/gregorian/calendar-ui/ui/src/components/DayLabels.js",[],"/home/gregorian/calendar-ui/ui/src/components/Header.js",[],"/home/gregorian/calendar-ui/ui/src/components/HourTicks.js",[],"/home/gregorian/calendar-ui/ui/src/components/Calendar/reducer.js",[],"/home/gregorian/calendar-ui/ui/src/components/forms/NewJobModal.js",[],"/home/gregorian/calendar-ui/ui/src/components/forms/JobModal.js",["188","189","190","191","192","193"],"import Modal from \"./Modal\";\nimport { Card, CardContent, CardHeader, IconButton } from \"@material-ui/core\";\n\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport AccessibilityNewIcon from \"@material-ui/icons/AccessibilityNew\";\n\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport JobForm from \"./JobForm\";\nimport { PersonOutline } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontSize: 14,\n    fontWeight: \"bold\",\n    fontVariant: \"small-caps\",\n    color: \"#324191\",\n  },\n  group: {\n    marginBottom: \"0.5em\",\n  },\n  content: {\n    paddingTop: 0,\n  },\n  li: {\n    listStyle: \"none\",\n    padding: 0,\n    margin: 0,\n  },\n  container: {\n    marginTop: 20,\n    backgroundColor: \"#F3F3FB\",\n  },\n  list: {\n    padding: 0,\n    \"& > li\": {\n      padding: 0,\n    },\n  },\n  pricing: {\n    marginTop: theme.spacing(2), //TODO use row class for top margin\n    textAlign: \"center\",\n  },\n  items: {\n    whiteSpace: \"pre-line\",\n  },\n  row: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nexport default function JobModal({ displayEvent, close, updateEvent }) {\n  const classes = useStyles();\n  const [editMode, setEditMode] = React.useState(false);\n\n  const { start, end, customer, charges, operatives, items, addresses } =\n    displayEvent;\n\n  //const { customer } = displayEvent;\n\n  //TODO: map over operatives\n  return (\n    <Modal>\n      {editMode ? (\n        <Card style={{ width: 600, backgroundColor: \"#F3F3FB\" }}>\n          <CardContent>\n            <JobForm\n              title=\"Edit Job\"\n              initialValues={displayEvent}\n              close={close}\n            />\n          </CardContent>\n        </Card>\n      ) : (\n        <>\n          <Card style={{ width: 1200, backgroundColor: \"#F3F3FB\" }}>\n            <CardHeader\n              title={customer.name}\n              action={\n                <>\n                  <IconButton\n                    onClick={() => {\n                      setEditMode(true);\n                    }}\n                  >\n                    <EditIcon />\n                  </IconButton>\n                  <IconButton onClick={close}>\n                    <CloseIcon />\n                  </IconButton>\n                </>\n              }\n            />\n            <CardHeader />\n            <CardContent className={classes.content}>\n              <Grid container spacing={3}>\n                <Grid item xs={4}>\n                  <Card className={classes.card}>\n                    <CardHeader title={\"Customer Details\"}></CardHeader>\n                    <CardContent>\n                      <List className={classes.list}>\n                        <ListItem>\n                          <ListItemIcon>\n                            <PersonIcon />\n                          </ListItemIcon>\n                          <ListItemText\n                            primary={customer.name}\n                            secondary=\"name\"\n                          />\n                        </ListItem>\n                        <ListItem>\n                          <ListItemIcon>\n                            <PhoneIcon />\n                          </ListItemIcon>\n                          <ListItemText\n                            primary={customer.mobile}\n                            secondary=\"mobile\"\n                          />\n                        </ListItem>\n                        <ListItem>\n                          <ListItemIcon>\n                            <EmailIcon />\n                          </ListItemIcon>\n                          <ListItemText\n                            primary={customer.email}\n                            secondary=\"email\"\n                          />\n                        </ListItem>\n                      </List>\n                    </CardContent>\n                  </Card>\n                  <Grid container spacing={1} className={classes.pricing}>\n                    <Grid item xs={4}>\n                      <Card>\n                        <CardHeader\n                          title={charges.hourlyRate}\n                          subheader={\"per hour\"}\n                        />\n                      </Card>\n                    </Grid>\n                    <Grid item xs={4}>\n                      <Card>\n                        <CardHeader\n                          title={charges.fuelCharge}\n                          subheader={\"fuel charge\"}\n                        />\n                      </Card>\n                    </Grid>\n                    <Grid item xs={4}>\n                      <Card>\n                        <CardHeader\n                          title={charges.travelTime}\n                          subheader={\"travel time\"}\n                        />\n                      </Card>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item xs={4}>\n                  <Card>\n                    <CardHeader title={\"Items\"} />\n                    <CardContent className={classes.items}>{items}</CardContent>\n                  </Card>\n                </Grid>\n                {/* <Grid item xs={4}>\n                  <Card className={classes.card}>\n                    <CardHeader title={\"Removal Operatives\"}></CardHeader>\n                    <CardContent>\n                      <List className={classes.list}>\n                        <ListItem>\n                          <ListItemIcon>\n                            <AccessibilityNewIcon />\n                          </ListItemIcon>\n                          <ListItemText\n                            primary={operatives[0].value}\n                            secondary=\"first man\"\n                          />\n                        </ListItem>\n                        <ListItem>\n                          <ListItemIcon>\n                            <AccessibilityNewIcon />\n                          </ListItemIcon>\n                          <ListItemText\n                            primary={operatives[1].value}\n                            secondary=\"second man\"\n                          />\n                        </ListItem>\n                      </List>\n                    </CardContent>\n                  </Card>\n                </Grid> */}\n              </Grid>\n            </CardContent>\n          </Card>\n        </>\n      )}\n    </Modal>\n\n    /* editMode\n        ?\n        <EditJobModal data={displayEvent} addToEvents={addToEvents}/>\n            :\n        <Modal\n        open={true}\n        >\n            <Card style={{width: 300}}>\n                <CardHeader\n                    title={summary}\n                    action={\n                        <>\n                            <IconButton>\n                                <EditIcon onClick={()=>{setEditMode(true)}}/>\n                            </IconButton>\n                            <IconButton>\n                                <CloseIcon onClick={close}/>\n                            </IconButton>\n                        </>\n\n                    }\n                />\n                <CardContent className={classes.content}>\n                    <div className={classes.group}>\n                        <Typography className={classes.title}>\n                            location\n                        </Typography>\n                        <Typography variant='body2'>\n                            {location}\n                        </Typography>\n                    </div>\n                    <div className={classes.group}>\n                        <Typography className={classes.title}>\n                            start\n                        </Typography>\n                        <Typography variant='body1'>\n                            {start.toLocaleString()}\n                        </Typography>\n                    </div>\n                    <div className={classes.group}>\n                        <Typography className={classes.title}>\n                            end\n                        </Typography>\n                        <Typography variant='body1'>\n                            {end.toLocaleString()}\n                        </Typography>\n                    </div>\n                    <div className={classes.group}>\n                        <Typography className={classes.title}>\n                            description\n                        </Typography>\n                        <Typography variant='body1'>\n                            {description}\n                        </Typography>\n                    </div>\n\n\n\n\n                    <Typography>\n\n                    </Typography>\n\n\n                </CardContent>\n            </Card>\n        </Modal>*/\n  );\n}\n","/home/gregorian/calendar-ui/ui/src/Model/Jobs.js",["194"],"export async function fetchDays(from, to) {\n  return fetch(`http://localhost:8000/api/v1/jobs?from=${from}&to=${to}`)\n    .then((res) => res.json())\n    .then((res) => res.data)\n    .then((data) =>\n      data.map((job) => ({\n        ...job,\n        start: new Date(job.start),\n        end: new Date(job.end), //TODO create a function that does this\n      }))\n    )\n    .catch((err) => console.error(err));\n}\n\nexport function createJob(job) {\n  return fetch(`http://localhost:8000/api/v1/jobs`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(job),\n  })\n    .then((res) => res.json())\n    .then((res) => res.data)\n    .then((data) => {\n      console.log(data);\n      return {\n        ...data,\n        start: new Date(data.start),\n        end: new Date(data.end), //TODO create a function that does this\n      };\n    })\n    .catch((err) => console.error(err));\n}\n\nfunction processData(data){\n    return{\n        ...data,\n        start: new Date(data.start),\n        end: new Date(data.end),\n    }\n}\n\nfunction processResponse(res){\n    if (res.status === 'success'){\n        return {\n            ...res,\n            data: processData(res.data)\n        }\n    }\n    else{\n        return res\n    }\n}\n\nexport function editJob({ _id, data }) {\n\n\n  return fetch(`http://localhost:8000/api/v1/jobs/${_id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  })\n    .then((res) => res.json())\n    .then((res) => processResponse(res))\n    .catch((err) => console.error(err));\n}\n\n\nexport default {\n  editJob,\n  fetchDays\n}","/home/gregorian/calendar-ui/ui/src/useGapi/useGapi.js",[],"/home/gregorian/calendar-ui/ui/src/components/Day.js",[],"/home/gregorian/calendar-ui/ui/src/components/forms/Modal.js",[],"/home/gregorian/calendar-ui/ui/src/components/forms/JobForm.js",["195","196","197","198","199","200","201","202","203","204","205","206","207","208"],"import React, { useReducer } from \"react\";\nimport mongoose from \"mongoose\";\nimport { useInput } from \"../hooks/useInput\";\nimport { useArray } from \"../hooks/useArray\";\nimport { startEndChange, StartEndInput } from \"./StartEndInput\";\nimport styled from \"styled-components\";\nimport { useImmerReducer } from \"use-immer\";\nimport camelCase from \"camelcase\";\nimport { Formik, Field } from \"formik\";\nimport { cloneDeep, values, flatten } from \"lodash\";\n//import { styled } from \"@mui/material/styles\";\n\nimport { ListBuilder } from \"./AddressInput\";\n\nimport { TextField, Grid, Button } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DateFnsUtils from \"@date-io/date-fns\"; // choose your lib\n\nimport { rootReducer } from \"./reducer\";\nimport { editJob } from \"../../Model/Jobs\";\n\nimport { editJobThunk } from \"../Calendar/calendarSlice\";\nimport { useDispatch } from \"react-redux\";\n\nimport {\n  DatePicker,\n  TimePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\n\nimport { Typography } from \"@material-ui/core\";\n\nimport { jobSchema } from \"api/model/job\"; //TODO change name of buildSchema\nimport { processMongooseError } from \"./../../utilities/processMongooseError\";\n\nfunction dateTimeFromInput(date, time) {\n  const hours = time.getHours();\n  const minutes = time.getMinutes();\n  let res = new Date(date);\n  res.setHours(hours);\n  res.setMinutes(minutes);\n  return res;\n}\n\nconst FlexRow = styled.div`\n  display: flex;\n`;\n\nconst useStyles = makeStyles({\n  flexItem: {\n    flex: \"1 1 0\",\n    \"&:not(:last-child)\": {\n      marginRight: \"10px\",\n    },\n  },\n  inputRow: {\n    marginBottom: \"10px\",\n  },\n  textField: {\n    \"& textarea\": {\n      whiteSpace: \"pre-line\",\n    },\n  },\n});\n\nexport default function JobForm({ close, toggleModal, initialValues }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n\n  const handleSubmit = (data) => {\n    dispatch(editJobThunk(data));\n  };\n\n  function printAsPlainObject(err) {\n    const result =\n      typeof err === \"object\" ? JSON.parse(JSON.stringify(err)) : null;\n    console.log(result);\n  }\n\n  const validator = async (values) => {\n    const doc = new mongoose.Document(values, jobSchema);\n\n    const validationResult = await doc.validateSync();\n    console.log(validationResult);\n\n    const processed = processMongooseError(validationResult);\n    console.log(processed);\n\n    return processed;\n  };\n\n  return (\n    <Formik\n      initialValues={cloneDeep(initialValues || {})}\n      onSubmit={handleSubmit}\n      validate={validator}\n    >\n      {(props) => (\n        //<Typography variant=\"h4\">Create Job</Typography>\n        <form onSubmit={props.handleSubmit}>\n          <Field\n            as={TextField}\n            className={classes.inputRow}\n            name=\"customer.name\"\n            label=\"name\"\n            error={props.errors?.customer?.name}\n            helperText={props.errors?.customer?.name}\n            fullWidth\n          />\n          <Field\n            as={TextField}\n            className={classes.inputRow}\n            error={props.errors?.customer?.mobile}\n            helperText={props.errors?.customer?.mobile}\n            name=\"customer.mobile\"\n            label=\"mobile\"\n            fullWidth\n          />\n          <Field\n            as={TextField}\n            className={classes.inputRow}\n            name=\"customer.email\"\n            label=\"email\"\n            error={props.errors?.customer?.email}\n            helperText={props.errors?.customer?.email}\n            fullWidth\n          />\n          <FlexRow className={classes.inputRow}>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <TimePicker\n                className={classes.flexItem}\n                value={new Date(props.values.start)}\n                onChange={(date) => {\n                  props.setFieldValue(\"start\", date, true);\n                }}\n                label=\"start time\"\n              />\n            </MuiPickersUtilsProvider>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <TimePicker\n                className={classes.flexItem}\n                value={props.values.end}\n                onChange={(date) => {\n                  props.setFieldValue(\"end\", date, true);\n                }}\n                label=\"end time\"\n              />\n            </MuiPickersUtilsProvider>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <DatePicker\n                className={classes.flexItem}\n                value={props.values.start}\n                onChange={(date) => {\n                  props.setFieldValue(\n                    \"start\",\n                    dateTimeFromInput(date, props.values.start),\n                    true\n                  );\n                  props.setFieldValue(\n                    \"end\",\n                    dateTimeFromInput(date, props.values.end),\n                    true\n                  );\n                  console.log(\"hello\");\n                }}\n                label=\"date\"\n              />\n            </MuiPickersUtilsProvider>\n          </FlexRow>\n\n          <FlexRow className={classes.inputRow}>\n            <Field\n              className={classes.flexItem}\n              as={TextField}\n              name=\"charges.hourlyRate\"\n              label=\"hourly rate\"\n              error={props.errors?.charges?.hourlyRate}\n              helperText={props.errors?.charges?.hourlyRate}\n              fullWidth\n            />\n            <Field\n              className={classes.flexItem}\n              as={TextField}\n              name=\"charges.fuelCharge\"\n              label=\"fuelCharge\"\n              error={props.errors?.charges?.fuelCharge}\n              helperText={props.errors?.charges?.fuelCharge}\n              fullWidth\n            />\n            <Field\n              className={classes.flexItem}\n              as={TextField}\n              name=\"charges.travelTime\"\n              label=\"travelTime\"\n              error={props.errors?.charges?.travelTime}\n              helperText={props.errors?.charges?.travelTime}\n              fullWidth\n            />\n          </FlexRow>\n\n          <Field\n            as={TextField}\n            className={classes.inputRow}\n            name=\"items\"\n            label=\"items\"\n            error={props.errors?.items}\n            helperText={props.errors?.items}\n            fullWidth\n            multiline\n            rows={5}\n          />\n          <ListBuilder\n            value={props.values.addresses}\n            onChange={props.handleChange}\n            label=\"add address\"\n            name=\"addresses\"\n            itemName=\"address\"\n            errors={props.errors?.addresses}\n          />\n          <ListBuilder\n            value={props.values.operatives}\n            onChange={props.handleChange}\n            label=\"add operative\"\n            name=\"operatives\"\n            itemName=\"operative\"\n            errors={props.errors?.operatives}\n          />\n\n          {/* <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <TimePicker\n          value={startValue}\n          onChange={onStartChange}\n          label=\"start\"\n        />\n      </MuiPickersUtilsProvider>\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <TimePicker value={endValue} onChange={onEndChange} label=\"end\" />\n      </MuiPickersUtilsProvider> */}\n          {/*<FieldSet inline>\n          <TextField\n            inputProps={{ \"data-group\": \"charges\" }}\n            name=\"hourly-rate\"\n            label=\"Hourly Rate\"\n            value={state.charges.hourlyRate}\n            onChange={groupItemChange}\n            fullWidth\n          />\n          <TextField\n            inputProps={{ \"data-group\": \"charges\" }}\n            name=\"fuel-charge\"\n            label=\"Fuel Charge\"\n            value={state.charges.fuelCharge}\n            onChange={groupItemChange}\n            fullWidth\n          />\n          <TextField\n            inputProps={{ \"data-group\": \"charges\" }}\n            name=\"travel-time\"\n            label=\"Travel Time\"\n            value={state.charges.travelTime}\n            onChange={groupItemChange}\n            fullWidth\n          />\n        </FieldSet>\n        <AddressInput\n          value={state.addresses}\n          onChange={itemChange}\n          name=\"addresses\"\n        /> */}\n          <Button\n            type=\"submit\"\n            // onClick={(e) => {\n            //    e.preventDefault();\n            //    props.handleSubmit(values); //TODO should i be cloning object before apssing it about\n            //  }}\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth\n          >\n            save\n          </Button>\n        </form>\n      )}\n    </Formik>\n  );\n}\n","/home/gregorian/calendar-ui/ui/src/useGapi/constants.js",[],"/home/gregorian/calendar-ui/ui/src/useGapi/reshape.js",[],"/home/gregorian/calendar-ui/ui/src/useGapi/eventType.js",[],"/home/gregorian/calendar-ui/ui/src/components/Events.js",[],"/home/gregorian/calendar-ui/ui/src/components/Hours.js",[],"/home/gregorian/calendar-ui/ui/src/components/forms/StartEndInput.js",["209"],"import { Grid } from \"@material-ui/core\";\nimport {\n  DatePicker,\n  MuiPickersUtilsProvider,\n  TimePicker,\n} from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nfunction dateTimeFromInput(date, time) {\n  const hours = time.getHours();\n  const minutes = time.getMinutes();\n  let res = new Date(date);\n  res.setHours(hours);\n  res.setMinutes(minutes);\n  return res;\n}\n\n//export function StartEndInput({startName,endName,startValue,endValue,onStartChange,onEndChange}){\n\nexport function StartEndInput({\n  startName,\n  endName,\n  startValue,\n  endValue,\n  onStartChange,\n  onEndChange,\n  formikProps\n}) {\n  const handleDateChange = (date) => {\n    onStartChange(dateTimeFromInput(date, startValue));\n    onEndChange(dateTimeFromInput(date, endValue));\n  };\n\n \n\n  return (\n    <Container>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <DatePicker\n          value={startValue}\n          onChange={handleDateChange}\n          label=\"date\"\n        />\n      </MuiPickersUtilsProvider>\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <TimePicker\n          value={startValue}\n          onChange={onStartChange}\n          label=\"start\"\n        />\n      </MuiPickersUtilsProvider>\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <TimePicker value={endValue} onChange={onEndChange} label=\"end\" />\n      </MuiPickersUtilsProvider>\n    </Container>\n  );\n}\n","/home/gregorian/calendar-ui/ui/src/components/forms/AddressInput.js",["210","211"],"import React from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport {\n  Grid,\n  ListItemAvatar,\n  ListItemSecondaryAction,\n  ListItemText,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport HouseIcon from \"@material-ui/icons/House\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\n\nimport cuid from \"cuid\";\nimport produce from \"immer\";\nimport { PromiseProvider } from \"mongoose\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    inline: {\n      display: \"flex\",\n    },\n  })\n);\n\nexport function ListBuilder({\n  name,\n  value,\n  onChange,\n  label,\n  errors,\n  itemName,\n}) {\n  //TODO should maybe be thinking about a shared constructor for this\n  //we are making an object like this on api as well\n\n  console.log(errors);\n  function wrap(value) {\n    return {\n      _id: cuid(),\n      value,\n    };\n  }\n\n  const addAddress = (value, address) => {\n    const updatedValue = produce(value, (draft) => {\n      console.log(draft);\n      draft.push(wrap(address));\n    });\n    const e = {\n      target: {\n        value: updatedValue,\n        name: name,\n      },\n    };\n    onChange(e);\n  };\n\n  const removeAddress = (value, id) => {\n    const updatedValue = produce(value, (draft) => {\n      return draft.filter((el) => el._id !== id);\n    });\n    const e = {\n      target: {\n        value: updatedValue,\n        name: name,\n      },\n    };\n    onChange(e);\n  };\n\n  const [input, setInput] = React.useState(\"\");\n\n  const classes = useStyles();\n\n  function getError(index) {\n    if (errors && errors[index]) {\n      return errors[index].value;\n    }\n    return null;\n  }\n\n  return (\n    <>\n      <List dense>\n        {value &&\n          value.map((a, i) => (\n            <ListItem key={a._id}>\n              <ListItemAvatar>\n                <HouseIcon></HouseIcon>\n              </ListItemAvatar>\n              <ListItemText\n                //className={classes.inline}\n                primary={\n                  <>\n                    <Typography variant={\"body1\"} display=\"inline\">\n                      {a.value}\n                    </Typography>\n                    {getError(i) ? (\n                      <Typography variant=\"caption\" color=\"error\">\n                        {`  - ${getError(i)}`}\n                      </Typography>\n                    ) : (\n                      <Typography variant=\"caption\">\n                        {\" \"}\n                        - {itemName}\n                        {i + 1}\n                      </Typography>\n                    )}\n                  </>\n                }\n                disableTypography\n              />\n              <ListItemSecondaryAction>\n                <CloseIcon\n                  color=\"primary\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    removeAddress(value, a._id);\n                  }}\n                />\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n      </List>\n      <Grid item>\n        <TextField\n          label={label}\n          value={input}\n          fullWidth\n          onChange={(e) => {\n            setInput(e.target.value);\n          }}\n        />\n        <button\n          onClick={(e) => {\n            e.preventDefault();\n            addAddress(value, input);\n            setInput(\"\");\n          }}\n        >\n          +\n        </button>\n      </Grid>\n    </>\n  );\n}\n","/home/gregorian/calendar-ui/ui/src/components/forms/reducer.js",[],"/home/gregorian/calendar-ui/ui/src/components/hooks/useInput.js",[],"/home/gregorian/calendar-ui/ui/src/components/hooks/useArray.js",[],"/home/gregorian/calendar-ui/ui/src/utilities/batchProcess.js",[],"/home/gregorian/calendar-ui/ui/src/eventGeometry/eventGeometry.js",[],"/home/gregorian/calendar-ui/ui/src/utilities/timeConversions.js",[],"/home/gregorian/calendar-ui/ui/src/eventGeometry/groupEvents.js",[],"/home/gregorian/calendar-ui/ui/src/components/Event.js",[],"/home/gregorian/calendar-ui/ui/src/components/gcalEvent.js",[],"/home/gregorian/calendar-ui/ui/src/components/useDetectBottomEdge.js",[],"/home/gregorian/calendar-ui/ui/src/utilities/utilities.js",[],"/home/gregorian/calendar-ui/ui/src/components/useDrag.js",[],"/home/gregorian/calendar-ui/ui/src/utilities/processMongooseError.js",["212"],"const { get, set } = require(\"lodash\");\n\nfunction convertToLodashDotPath(mongooseDotPath) {\n  return mongooseDotPath.replace(/\\d+/g, (match) => {\n    return `[${match}]`;\n  });\n}\n\nfunction isValidatorError(err) {\n  if (err.name === \"ValidatorError\") return true;\n  return false;\n}\n\nfunction getValidatorMessage(err) {\n  return err.message;\n}\n\nfunction isCastError(err) {\n  if (err.name === \"CastError\") return true;\n  return false;\n}\n\nfunction getCastMessage(err) {\n  return `should be a ${err.kind}`;\n}\n\nfunction processMongooseError(err) {\n  if (!err) return null;\n  const result = {};\n\n  for (let [key, value] of Object.entries(err.errors)) {\n    const path = convertToLodashDotPath(key);\n    console.log(path);\n    if (isCastError(value)) set(result, path, getCastMessage(value));\n    else if (isValidatorError(value)) {\n      set(result, path, getValidatorMessage(value));\n    }\n  }\n  return result;\n}\n\nmodule.exports = { processMongooseError, convertToLodashDotPath };\n","/home/gregorian/calendar-ui/ui/src/app/store.js",[],"/home/gregorian/calendar-ui/ui/src/components/Calendar/calendarSlice.js",["213"],"import { createSlice } from \"@reduxjs/toolkit\";\nimport {\n  weekContaining,\n  setTimeDayStart,\n  setTimeDayEnd,\n} from \"../../utilities/dateUtilities\";\nimport { addDays } from \"date-fns\";\nimport model from \"../../Model/Jobs\";\nimport { cloneDeep } from \"lodash-es\";\n\nexport function getWeek(date, increment = 0) {\n  const currentDate = addDays(date, increment * 7);\n  const days = weekContaining(currentDate);\n  const firstDay = setTimeDayStart(new Date(days[0])); //TODO\n  const lastDay = setTimeDayEnd(new Date(days[days.length - 1])); //TODO\n  return {\n    currentDate,\n    days,\n    firstDay,\n    lastDay,\n  };\n}\n\nconst initialState = {\n  ...getWeek(new Date()),\n  events: [],\n};\n\nconst calendarSlice = createSlice({\n  name: \"calendar\",\n  initialState,\n  reducers: {\n    dataLoaded(state, action) {\n      state.events = action.payload;\n    },\n    incrementWeek(state, action) {\n      return {\n        ...getWeek(state.currentDate, 1),\n        events: [],\n      };\n    },\n    decrementWeek(state) {\n      return {\n        ...getWeek(state.currentDate, -1),\n        events: [],\n      };\n    },\n    editJob(state, action) {\n      const { payload } = action;\n      const idToChange = state.events.findIndex(\n        (event) => event._id == payload._id\n      );\n      if (idToChange !== -1) {\n        state.events[idToChange] = cloneDeep(payload);\n      }\n    },\n  },\n});\n\nconst { actions } = calendarSlice;\n\nexport const fetchData = (dispatch, getState) => {\n  const state = getState();\n  console.log(state.calendar.firstDay);\n  model\n    .fetchDays(\n      state.calendar.firstDay.toString(),\n      state.calendar.lastDay.toString()\n    )\n    .then((data) => {\n      dispatch(actions.dataLoaded([...data])); //TODO have a look at what we are doing here what if there is no data\n    })\n    .catch(console.error);\n};\n\nexport const incrementWeekThunk = (dispatch, getState) => {\n  dispatch(actions.incrementWeek());\n  dispatch(fetchData);\n};\n\nexport const decrementWeekThunk = (dispatch, getState) => {\n  dispatch(actions.decrementWeek());\n  dispatch(fetchData);\n};\n\nexport const editJobThunk = (data) => (dispatch, getState) => {\n  const { _id } = data;\n  console.log(data);\n  model\n    .editJob({ _id: _id, data: data })\n    .then((response) => {\n      if (response.status === \"success\") {\n        dispatch(actions.editJob(data));\n      } else if (\n        response.status === \"fail\" &&\n        response.name === \"validationError\"\n      ) {\n        console.log(\"i need validation\");\n      }\n    })\n    .catch(console.error);\n};\n\nexport default calendarSlice.reducer;\n","/home/gregorian/calendar-ui/ui/src/components/forms/JobDetails.js",["214","215","216","217","218","219","220","221","222"],"import Modal from \"./Modal\";\nimport { Card, CardContent, CardHeader, IconButton } from \"@material-ui/core\";\n\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport AccessibilityNewIcon from \"@material-ui/icons/AccessibilityNew\";\n\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport JobForm from \"./JobForm\";\nimport { PersonOutline } from \"@material-ui/icons\";\n\nimport { useParams } from \"react-router\";\nimport { useSelector } from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontSize: 14,\n    fontWeight: \"bold\",\n    fontVariant: \"small-caps\",\n    color: \"#324191\",\n  },\n  group: {\n    marginBottom: \"0.5em\",\n  },\n  content: {\n    paddingTop: 0,\n  },\n  li: {\n    listStyle: \"none\",\n    padding: 0,\n    margin: 0,\n  },\n  container: {\n    marginTop: 20,\n    backgroundColor: \"#F3F3FB\",\n  },\n  list: {\n    padding: 0,\n    \"& > li\": {\n      padding: 0,\n    },\n  },\n  pricing: {\n    marginTop: theme.spacing(2), //TODO use row class for top margin\n    textAlign: \"center\",\n  },\n  items: {\n    whiteSpace: \"pre-line\",\n  },\n  row: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nexport function JobDetails({ displayEvent, close, updateEvent }) {\n  const classes = useStyles();\n  const [editMode, setEditMode] = React.useState(false);\n\n  let {id} = useParams()\n\n  console.log(id)\n\n  let job = useSelector(state=>state.calendar.events.find(event=>event._id==id))\n\n\n\n  const { start, end, customer, charges, operatives, items, addresses } =\n    job;\n\n  //const { customer } = displayEvent;\n\n  //TODO: map over operatives\n  return (\n    <Modal>\n          <Card style={{ width: 1200, backgroundColor: \"#F3F3FB\" }}>\n            <CardHeader\n              title={customer.name}\n              action={\n                <>\n                  <IconButton\n                    onClick={() => {\n                      setEditMode(true);\n                    }}\n                  >\n                    <EditIcon />\n                  </IconButton>\n                  <IconButton onClick={close}>\n                    <CloseIcon />\n                  </IconButton>\n                </>\n              }\n            />\n            <CardHeader />\n            <CardContent className={classes.content}>\n              <Grid container spacing={3}>\n                <Grid item xs={4}>\n                  <Card className={classes.card}>\n                    <CardHeader title={\"Customer Details\"}></CardHeader>\n                    <CardContent>\n                      <List className={classes.list}>\n                        <ListItem>\n                          <ListItemIcon>\n                            <PersonIcon />\n                          </ListItemIcon>\n                          <ListItemText\n                            primary={customer.name}\n                            secondary=\"name\"\n                          />\n                        </ListItem>\n                        <ListItem>\n                          <ListItemIcon>\n                            <PhoneIcon />\n                          </ListItemIcon>\n                          <ListItemText\n                            primary={customer.mobile}\n                            secondary=\"mobile\"\n                          />\n                        </ListItem>\n                        <ListItem>\n                          <ListItemIcon>\n                            <EmailIcon />\n                          </ListItemIcon>\n                          <ListItemText\n                            primary={customer.email}\n                            secondary=\"email\"\n                          />\n                        </ListItem>\n                      </List>\n                    </CardContent>\n                  </Card>\n                  <Grid container spacing={1} className={classes.pricing}>\n                    <Grid item xs={4}>\n                      <Card>\n                        <CardHeader\n                          title={charges.hourlyRate}\n                          subheader={\"per hour\"}\n                        />\n                      </Card>\n                    </Grid>\n                    <Grid item xs={4}>\n                      <Card>\n                        <CardHeader\n                          title={charges.fuelCharge}\n                          subheader={\"fuel charge\"}\n                        />\n                      </Card>\n                    </Grid>\n                    <Grid item xs={4}>\n                      <Card>\n                        <CardHeader\n                          title={charges.travelTime}\n                          subheader={\"travel time\"}\n                        />\n                      </Card>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item xs={4}>\n                  <Card>\n                    <CardHeader title={\"Items\"} />\n                    <CardContent className={classes.items}>{items}</CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n    </Modal>\n  );\n}\n",{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","severity":1,"message":"228","line":3,"column":8,"nodeType":"229","messageId":"230","endLine":3,"endColumn":19},{"ruleId":"227","severity":1,"message":"231","line":15,"column":50,"nodeType":"229","messageId":"230","endLine":15,"endColumn":54},{"ruleId":"227","severity":1,"message":"232","line":11,"column":10,"nodeType":"229","messageId":"230","endLine":11,"endColumn":19},{"ruleId":"227","severity":1,"message":"233","line":14,"column":10,"nodeType":"229","messageId":"230","endLine":14,"endColumn":20},{"ruleId":"227","severity":1,"message":"234","line":20,"column":10,"nodeType":"229","messageId":"230","endLine":20,"endColumn":17},{"ruleId":"227","severity":1,"message":"235","line":44,"column":11,"nodeType":"229","messageId":"230","endLine":44,"endColumn":17},{"ruleId":"227","severity":1,"message":"236","line":44,"column":19,"nodeType":"229","messageId":"230","endLine":44,"endColumn":29},{"ruleId":"227","severity":1,"message":"237","line":84,"column":9,"nodeType":"229","messageId":"230","endLine":84,"endColumn":20},{"ruleId":"227","severity":1,"message":"238","line":86,"column":9,"nodeType":"229","messageId":"230","endLine":86,"endColumn":20},{"ruleId":"227","severity":1,"message":"239","line":12,"column":8,"nodeType":"229","messageId":"230","endLine":12,"endColumn":28},{"ruleId":"227","severity":1,"message":"240","line":21,"column":10,"nodeType":"229","messageId":"230","endLine":21,"endColumn":23},{"ruleId":"227","severity":1,"message":"241","line":67,"column":11,"nodeType":"229","messageId":"230","endLine":67,"endColumn":16},{"ruleId":"227","severity":1,"message":"242","line":67,"column":18,"nodeType":"229","messageId":"230","endLine":67,"endColumn":21},{"ruleId":"227","severity":1,"message":"243","line":67,"column":42,"nodeType":"229","messageId":"230","endLine":67,"endColumn":52},{"ruleId":"227","severity":1,"message":"244","line":67,"column":61,"nodeType":"229","messageId":"230","endLine":67,"endColumn":70},{"ruleId":"245","severity":1,"message":"246","line":72,"column":1,"nodeType":"247","endLine":75,"endColumn":2},{"ruleId":"227","severity":1,"message":"248","line":1,"column":17,"nodeType":"229","messageId":"230","endLine":1,"endColumn":27},{"ruleId":"227","severity":1,"message":"249","line":3,"column":10,"nodeType":"229","messageId":"230","endLine":3,"endColumn":18},{"ruleId":"227","severity":1,"message":"250","line":4,"column":10,"nodeType":"229","messageId":"230","endLine":4,"endColumn":18},{"ruleId":"227","severity":1,"message":"251","line":5,"column":10,"nodeType":"229","messageId":"230","endLine":5,"endColumn":24},{"ruleId":"227","severity":1,"message":"252","line":5,"column":26,"nodeType":"229","messageId":"230","endLine":5,"endColumn":39},{"ruleId":"227","severity":1,"message":"253","line":7,"column":10,"nodeType":"229","messageId":"230","endLine":7,"endColumn":25},{"ruleId":"227","severity":1,"message":"254","line":8,"column":8,"nodeType":"229","messageId":"230","endLine":8,"endColumn":17},{"ruleId":"227","severity":1,"message":"255","line":10,"column":21,"nodeType":"229","messageId":"230","endLine":10,"endColumn":27},{"ruleId":"227","severity":1,"message":"256","line":10,"column":29,"nodeType":"229","messageId":"230","endLine":10,"endColumn":36},{"ruleId":"227","severity":1,"message":"257","line":15,"column":21,"nodeType":"229","messageId":"230","endLine":15,"endColumn":25},{"ruleId":"227","severity":1,"message":"258","line":19,"column":10,"nodeType":"229","messageId":"230","endLine":19,"endColumn":21},{"ruleId":"227","severity":1,"message":"259","line":20,"column":10,"nodeType":"229","messageId":"230","endLine":20,"endColumn":17},{"ruleId":"227","severity":1,"message":"260","line":31,"column":10,"nodeType":"229","messageId":"230","endLine":31,"endColumn":20},{"ruleId":"227","severity":1,"message":"261","line":75,"column":12,"nodeType":"229","messageId":"230","endLine":75,"endColumn":30},{"ruleId":"227","severity":1,"message":"257","line":1,"column":10,"nodeType":"229","messageId":"230","endLine":1,"endColumn":14},{"ruleId":"227","severity":1,"message":"262","line":18,"column":10,"nodeType":"229","messageId":"230","endLine":18,"endColumn":25},{"ruleId":"227","severity":1,"message":"263","line":76,"column":9,"nodeType":"229","messageId":"230","endLine":76,"endColumn":16},{"ruleId":"227","severity":1,"message":"264","line":1,"column":9,"nodeType":"229","messageId":"230","endLine":1,"endColumn":12},{"ruleId":"265","severity":1,"message":"266","line":51,"column":30,"nodeType":"267","messageId":"268","endLine":51,"endColumn":32},{"ruleId":"227","severity":1,"message":"239","line":12,"column":8,"nodeType":"229","messageId":"230","endLine":12,"endColumn":28},{"ruleId":"227","severity":1,"message":"269","line":20,"column":8,"nodeType":"229","messageId":"230","endLine":20,"endColumn":15},{"ruleId":"227","severity":1,"message":"240","line":21,"column":10,"nodeType":"229","messageId":"230","endLine":21,"endColumn":23},{"ruleId":"227","severity":1,"message":"270","line":68,"column":10,"nodeType":"229","messageId":"230","endLine":68,"endColumn":18},{"ruleId":"265","severity":1,"message":"266","line":74,"column":75,"nodeType":"267","messageId":"268","endLine":74,"endColumn":77},{"ruleId":"227","severity":1,"message":"241","line":78,"column":11,"nodeType":"229","messageId":"230","endLine":78,"endColumn":16},{"ruleId":"227","severity":1,"message":"242","line":78,"column":18,"nodeType":"229","messageId":"230","endLine":78,"endColumn":21},{"ruleId":"227","severity":1,"message":"243","line":78,"column":42,"nodeType":"229","messageId":"230","endLine":78,"endColumn":52},{"ruleId":"227","severity":1,"message":"244","line":78,"column":61,"nodeType":"229","messageId":"230","endLine":78,"endColumn":70},"no-native-reassign",["271"],"no-negated-in-lhs",["272"],"no-unused-vars","'NewJobModal' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'fetchDays' is defined but never used.","'fitsInWeek' is defined but never used.","'useWeek' is defined but never used.","'authed' is assigned a value but never used.","'listEvents' is assigned a value but never used.","'addToEvents' is assigned a value but never used.","'updateEvent' is assigned a value but never used.","'AccessibilityNewIcon' is defined but never used.","'PersonOutline' is defined but never used.","'start' is assigned a value but never used.","'end' is assigned a value but never used.","'operatives' is assigned a value but never used.","'addresses' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useReducer' is defined but never used.","'useInput' is defined but never used.","'useArray' is defined but never used.","'startEndChange' is defined but never used.","'StartEndInput' is defined but never used.","'useImmerReducer' is defined but never used.","'camelCase' is defined but never used.","'values' is defined but never used.","'flatten' is defined but never used.","'Grid' is defined but never used.","'rootReducer' is defined but never used.","'editJob' is defined but never used.","'Typography' is defined but never used.","'printAsPlainObject' is defined but never used.","'PromiseProvider' is defined but never used.","'classes' is assigned a value but never used.","'get' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'JobForm' is defined but never used.","'editMode' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]